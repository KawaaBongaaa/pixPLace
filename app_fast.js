// App state
let tg = window.Telegram?.WebApp;
let selectedStyle = 'realistic';
let isGenerating = false;
let isTelegramApp = false;
let currentTheme = 'light';

// Initialize app
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ App loaded');
    initTelegramApp();
    initEventListeners();
});

function initTelegramApp() {
    console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp...');

    if (typeof window.Telegram === 'undefined' || !window.Telegram.WebApp) {
        console.log('‚ö†Ô∏è Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        showStatus('‚ö†Ô∏è –û—Ç–∫—Ä–æ–π—Ç–µ —á–µ—Ä–µ–∑ Telegram', 'info');
        return;
    }

    tg = window.Telegram.WebApp;
    console.log('‚úÖ Telegram WebApp –Ω–∞–π–¥–µ–Ω');

    try {
        tg.ready();
        tg.expand();
        isTelegramApp = true;

        // Setup main button
        if (tg.MainButton) {
            tg.MainButton.setText('‚ú® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
            tg.MainButton.onClick(generateImage);
            tg.MainButton.show();
            console.log('‚úÖ MainButton –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
        }

        showStatus('üì± –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Telegram', 'success');

        // Get user data
        if (tg.initDataUnsafe?.user) {
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', tg.initDataUnsafe.user.first_name);
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showStatus('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', 'error');
    }
}

function initEventListeners() {
    // Style buttons
    document.querySelectorAll('.style-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            document.querySelectorAll('.style-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            selectedStyle = this.dataset.style;

            if (tg?.HapticFeedback) {
                tg.HapticFeedback.impactOccurred('light');
            }

            console.log('üé® –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å:', selectedStyle);
        });
    });

    // Auto-resize textarea
    const textarea = document.getElementById('prompt');
    if (textarea) {
        textarea.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = this.scrollHeight + 'px';
        });
    }
}

function changeTheme() {
    currentTheme = currentTheme === 'light' ? 'dark' : 'light';
    document.body.setAttribute('data-theme', currentTheme);

    if (tg?.HapticFeedback) {
        tg.HapticFeedback.impactOccurred('light');
    }

    console.log('üé® –¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:', currentTheme);
}

function generateImage() {
    if (isGenerating) return;

    const prompt = document.getElementById('prompt').value.trim();
    const quality = document.getElementById('quality').value;

    console.log('üöÄ –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
    console.log('üìù –ü—Ä–æ–º–ø—Ç:', prompt);
    console.log('üé® –°—Ç–∏–ª—å:', selectedStyle);
    console.log('‚öôÔ∏è –ö–∞—á–µ—Å—Ç–≤–æ:', quality);

    // Validation
    if (!prompt) {
        showStatus('‚ùå –û–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'error');
        if (tg?.HapticFeedback) {
            tg.HapticFeedback.notificationOccurred('error');
        }
        return;
    }

    if (prompt.length < 5) {
        showStatus('‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ', 'error');
        return;
    }

    isGenerating = true;
    showLoading();

    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –±–æ—Ç–∞
    const command = `/generate ${prompt} --style=${selectedStyle} --quality=${quality}`;

    console.log('üì§ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–æ—Ç–∞:', command);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram WebApp
    if (tg && isTelegramApp) {
        try {
            // –ú–µ—Ç–æ–¥ 1: sendData
            if (typeof tg.sendData === 'function') {
                const data = {
                    command: 'generate',
                    prompt: prompt,
                    style: selectedStyle,
                    quality: quality,
                    user_id: tg?.initDataUnsafe?.user?.id || null,
                    timestamp: Date.now()
                };

                tg.sendData(JSON.stringify(data));
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ sendData');
                showStatus('üì§ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', 'success');
                return;
            }

            // –ú–µ—Ç–æ–¥ 2: MainButton —Å –¥–∞–Ω–Ω—ã–º–∏
            if (tg.MainButton) {
                tg.MainButton.setText('‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...');
                tg.MainButton.hide();

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º
                setTimeout(() => {
                    tg.close();
                }, 1000);

                console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ —Å –¥–∞–Ω–Ω—ã–º–∏');
                return;
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
        }
    }

    // Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    showFallback(command);
}

function showFallback(command) {
    setTimeout(() => {
        const fallbackDiv = document.createElement('div');
        fallbackDiv.innerHTML = `
            <div class="status info" style="text-align: left;">
                <h3>üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:</h3>
                <div style="background: #f0f0f0; padding: 12px; border-radius: 8px; margin: 8px 0; font-family: monospace; word-break: break-all;">
                    ${command}
                </div>
                <button onclick="copyCommand('${command.replace(/'/g, "\'")}'); this.textContent='‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!'" 
                        style="padding: 8px 16px; background: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer; width: 100%;">
                    üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
                </button>
                <p style="margin-top: 12px; font-size: 14px;">
                    –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É @pixPLacebot
                </p>
            </div>
        `;

        document.getElementById('loading').appendChild(fallbackDiv);
    }, 1500);
}

function copyCommand(command) {
    if (navigator.clipboard) {
        navigator.clipboard.writeText(command);
    } else {
        const textArea = document.createElement('textarea');
        textArea.value = command;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
    }

    if (tg?.HapticFeedback) {
        tg.HapticFeedback.notificationOccurred('success');
    }
}

function showLoading() {
    document.getElementById('mainForm').style.display = 'none';
    document.getElementById('loading').classList.add('show');

    if (isTelegramApp && tg?.MainButton) {
        tg.MainButton.setText('‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...');
        tg.MainButton.hide();
    }
}

function backToForm() {
    document.getElementById('loading').classList.remove('show');
    document.getElementById('mainForm').style.display = 'block';
    isGenerating = false;

    if (isTelegramApp && tg?.MainButton) {
        tg.MainButton.setText('‚ú® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
        tg.MainButton.show();
    }

    // Clear fallback content
    const fallbacks = document.querySelectorAll('#loading > div:not(.spinner):not(h3):not(p):not(.back-btn)');
    fallbacks.forEach(fb => fb.remove());
}

function showStatus(message, type = 'info') {
    const statusDiv = document.getElementById('status');
    if (statusDiv) {
        statusDiv.querySelector('span').textContent = message;
        statusDiv.className = `status ${type}`;

        if (type === 'success') {
            setTimeout(() => {
                statusDiv.style.display = 'none';
            }, 3000);
        }
    }
}

// Global functions for testing
window.testApp = function() {
    document.getElementById('prompt').value = '–∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –º–æ—Ä–µ–º';
    generateImage();
};

window.getAppInfo = function() {
    return {
        telegramAvailable: !!tg,
        isTelegramApp: isTelegramApp,
        selectedStyle: selectedStyle,
        isGenerating: isGenerating,
        currentTheme: currentTheme,
        userId: tg?.initDataUnsafe?.user?.id || null
    };
};

console.log('üéØ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: testApp() –∏–ª–∏ getAppInfo()');
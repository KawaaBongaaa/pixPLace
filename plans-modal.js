// üîß –ü–õ–≠–ù–ò–ù–ì –ú–ï–ù–Æ –ö–ê–†–£–°–ï–õ–ò –ò–õ–ò–ö–ê–¶–ò–Ø - –ù–û–í–´–ô –ú–û–î–£–õ–¨ –î–õ–Ø –ú–ï–ù–Æ –ü–õ–ê–ù–û–í
// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏

window.initPlansCarousel = function() {
    const carousel = document.querySelector('.plans-carousel');
    const indicators = document.querySelectorAll('.indicator');

    return new Promise((resolve) => {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é highlight –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –ø–ª–∞–Ω–æ–≤
        function highlight(card, options = {}) {
            if (!card) return;

            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–ª–∞–Ω–æ–≤
            document.querySelectorAll('.plan-card').forEach(c => {
                c.classList.remove('active');
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
            if (card && typeof card.classList !== 'undefined') {
                card.classList.add('active');
            }

            console.log('–ö–∞—Ä—Ç–æ—á–∫–∞ –ø–ª–∞–Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–∞:', card ? 'OK' : 'null');
        }

        if (!carousel || !indicators.length) {
            console.log('Plans carousel not found, skipping init');
            resolve(false);
            return;
        }

        const cards = document.querySelectorAll('.plan-card');
        const totalSlides = Math.ceil(cards.length / 3); // 3 –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å–ª–∞–π–¥

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        function updateIndicators(activeIndex) {
            indicators.forEach((indicator, index) => {
                indicator.classList.toggle('active', index === activeIndex);
            });
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ —Å–ª–∞–π–¥—É
        function scrollToSlide(slideIndex) {
            currentPlanSlide = slideIndex;
            const cardWidth = cards[0].offsetWidth;
            const gap = 16; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –≤ px
            const scrollLeft = slideIndex * (cardWidth * 3 + gap * 2);
            carousel.scrollTo({
                left: scrollLeft,
                behavior: 'smooth'
            });
            updateIndicators(slideIndex);
        }

        // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫—É –ø–æ–ª–Ω–æ—Å—Ç—å—é, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

        // –ö–ª–∏–∫ –ø–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º (–æ—Å—Ç–∞–ª—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
        indicators.forEach((indicator, index) => {
            let lastClickTime = 0;

            indicator.addEventListener('click', (e) => {
                e.preventDefault();
                const now = Date.now();
                if (now - lastClickTime < 800) return; // –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–ø–∞–º –∫–ª–∏–∫–∏
                lastClickTime = now;

                scrollToSlide(index);
            });
        });

        // –°–≤–∞–π–ø—ã - —á–∏—Å—Ç–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫)
        let touchStartX = 0;
        let touchStartTime = 0;

        carousel.addEventListener('touchstart', (e) => {
            touchStartTime = Date.now();
            touchStartX = e.changedTouches[0].screenX;
        });

        carousel.addEventListener('touchend', (e) => {
            const touchDuration = Date.now() - touchStartTime;
            const touchEndX = e.changedTouches[0].screenX;
            const diff = touchStartX - touchEndX;

            // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–∞–π–ø–∞
            if (Math.abs(diff) > 60 && touchDuration > 100) {
                if (diff > 0 && currentPlanSlide < totalSlides - 1) {
                    scrollToSlide(currentPlanSlide + 1);
                } else if (diff < 0 && currentPlanSlide > 0) {
                    scrollToSlide(currentPlanSlide - 1);
                }
            }
        });

        // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø - –ü–†–û–°–¢–û –¶–ï–ù–¢–†–ò–†–£–ï–ú PRO –ö–ê–†–¢–£ (–∏–Ω–¥–µ–∫—Å 1)
        const centerCardIndex = 1; // –ü—Ä–æ = –∏–Ω–¥–µ–∫—Å 1 (—Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –ø–ª–∞–Ω)
        const centerCard = cards[centerCardIndex];

        if (centerCard) {
            setTimeout(() => {
                const containerWidth = carousel.offsetWidth;
                const cardWidth = centerCard.offsetWidth;
                const cardLeft = centerCard.offsetLeft;
                const scrollPosition = cardLeft - (containerWidth / 2) + (cardWidth / 2);
                carousel.scrollLeft = Math.max(0, scrollPosition);

                // –ü—Ä–æ—Å—Ç–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
                setTimeout(() => {
                    centerCard.scrollIntoView({
                        behavior: 'instant',
                        block: 'nearest',
                        inline: 'center'
                    });
                }, 100);
            }, 50);
        }

        highlight(cards[centerCardIndex], { scroll: false });
        updateIndicators(centerCardIndex);
        console.log('üî• Plans carousel initialized - centered on PRO plan, auto-scroll REMOVED');
        resolve(true);
    });
};

window.initPlanCards = function() {
    const cards = document.querySelectorAll('.plan-card');

    return new Promise((resolve) => {
        cards.forEach(card => {
            card.addEventListener('click', () => {
                const planType = card.className.includes('lite') ? 'lite' :
                    card.className.includes('pro') ? 'pro' : 'studio';

                // –ê–Ω–∏–º–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞
                cards.forEach(c => c.classList.remove('selected'));
                card.classList.add('selected');

                card.style.animation = 'pulse 0.6s ease-out';
                setTimeout(() => {
                    card.style.animation = '';
                }, 600);

                console.log('Selected plan:', planType);
            });

            // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
            card.addEventListener('mouseenter', () => {
                card.style.transform = 'translateY(-12px) scale(1.03)';
            });

            card.addEventListener('mouseleave', () => {
                if (!card.classList.contains('selected')) {
                    card.style.transform = '';
                }
            });
        });

        console.log('üîß Plan cards initialized with click handlers');
        resolve(true);
    });
};



// –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–∫–∞–∑–µ –º–æ–¥–∞–ª–∞
let plansModalInitialized = false;

function lazyInitializePlansModal() {
    if (plansModalInitialized) return Promise.resolve();

    // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –º–æ–¥–∞–ª–∞ –ª–∏–º–∏—Ç–∞ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—É—Å–µ–ª—å –ø—Ä–∏ –ø–æ–∫–∞–∑–µ
    console.log('üé≠ Setting up plans modal lazy initialization');
    const observer = new MutationObserver(async function (mutations) {
        mutations.forEach(async function (mutation) {
            if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                const modal = document.getElementById('limitModal');
                if (modal && modal.classList.contains('show')) {
                    // –ú–æ–¥–∞–ª –ø–æ—è–≤–∏–ª—Å—è - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—É—Å–µ–ª—å —Å async/await
                    console.log('üé≠ Limit modal shown - initializing plans carousel');
                    try {
                        await window.initPlansCarousel();
                        await window.initPlanCards();
                        await window.initGlassmorphismEffects();
                        console.log('‚úÖ Plans modal initialization complete');
                        plansModalInitialized = true;
                        observer.disconnect(); // –ë–æ–ª—å—à–µ –Ω–µ —Å–ª–µ–¥–∏–º
                    } catch (error) {
                        console.error('‚ùå Error initializing plans modal:', error);
                    }
                }
            }
        });
    });

    const modal = document.getElementById('limitModal');
    if (modal) {
        observer.observe(modal, {
            attributes: true,
            attributeFilter: ['class']
        });
    }

    return Promise.resolve();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function () {
    // –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–∑—É, –∂–¥–µ–º –∫–æ–≥–¥–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
    console.log('üîß Plans modal module loaded and ready (lazy load)');
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
window.lazyInitializePlansModal = lazyInitializePlansModal;

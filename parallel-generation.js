/**
 * Parallel Image Generation Manager
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ—á–µ—Ä–µ–¥—å—é –∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
 */

class GenerationManager {
    constructor() {
        this.activeGenerations = new Map(); // id -> generation object
        this.generationQueue = []; // –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞—é—â–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        this.maxConcurrentGenerations = 3; // –º–∞–∫—Å–∏–º—É–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    }

    canStartNewGeneration() {
        return this.activeGenerations.size < this.maxConcurrentGenerations && this.generationQueue.length === 0;
    }

    addGeneration(generation) {
        // –°–æ–∑–¥–∞—ë–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
        generation.id = generation.id || Date.now() + Math.random().toString(36).substr(2, 9);

        if (this.activeGenerations.size >= this.maxConcurrentGenerations) {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è
            this.generationQueue.push(generation);
            generation.status = 'queued';
            generation.queuedAt = Date.now();
            console.log(`üìã Generation ${generation.id} queued (${this.generationQueue.length} in queue)`);
            return false;
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É
        this.activeGenerations.set(generation.id, generation);
        generation.status = 'processing';
        generation.startedAt = Date.now();
        console.log(`üöÄ Generation ${generation.id} started (${this.activeGenerations.size}/${this.maxConcurrentGenerations} active)`);

        // –ù–ê–ß–ò–ù–ê–ï–ú –ü–†–û–¶–ï–°–° –ì–ï–ù–ï–†–ê–¶–ò–ò
        console.log(`‚ö° Starting processGeneration for ${generation.id}`);
        this.processGeneration(generation);

        return true;
    }

    completeGeneration(generationId, result = null, error = null) {
        const generation = this.activeGenerations.get(generationId);
        if (!generation) {
            console.warn(`Generation ${generationId} not found in active list`);
            return;
        }

        generation.completedAt = Date.now();
        generation.duration = generation.completedAt - (generation.startedAt || generation.completedAt);

        if (error) {
            generation.status = 'error';
            generation.error = error.message || error;
        } else if (result) {
            generation.status = 'success';
            generation.result = result;
        } else {
            generation.status = 'completed';
        }

        // üî• UPDATING COMPLETED GENERATION STATUS (no more duplicate history logic needed - generated added at preview creation)
        console.log(`‚úÖ Generation ${generationId} completed with status: ${generation.status}`);

        this.activeGenerations.delete(generationId);
        console.log(`‚úÖ Generation ${generationId} completed (${this.activeGenerations.size} remaining)`);

        // üî• –î–û–ë–ê–í–õ–ï–ù–û: –£–ë–ò–†–ê–ï–ú –ó–ê–¶–ò–ö–õ–ï–ù–ù–´–ô LOADING –≠–õ–ï–ú–ï–ù–¢ –ü–†–ò –û–®–ò–ë–ö–ï
        if (error) {
            const loadingElement = document.getElementById(`loading-${generationId}`);
            if (loadingElement) {
                console.log(`üóëÔ∏è Removing failed generation loading element: ${generationId}`);
                loadingElement.remove();

                // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö –∫–æ–≥–¥–∞ –ø—Ä–µ–≤—å—é —É–¥–∞–ª—è–µ—Ç—Å—è
                setTimeout(() => {
                    window.scrollTo({
                        top: 0,
                        behavior: 'smooth'
                    });
                    console.log('üÜô Scrolled to top after removing failed preview');
                }, 300); // –Ω–µ–±–æ–ª—å—à–æ–π delay —á—Ç–æ–±—ã DOM –æ–±–Ω–æ–≤–∏–ª—Å—è

                // ‚ùó‚ùó‚ùó –¢–û–°–¢ –ù–ï –ü–û–ö–ê–ó–´–í–ê–ï–ú –ó–î–ï–°–¨ - –í–°–Å –î–ï–õ–ê–ï–¢–°–Ø –í processGeneration –î–õ–Ø –ö–û–ù–¢–†–û–õ–Ø ‚ùó‚ùó‚ùó
                // –¢–æ—Å—Ç –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ª–∏–±–æ –¥–ª—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ (–¥–ª–∏–Ω–Ω—ã–π), –ª–∏–±–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ (–æ–±—ã—á–Ω—ã–π)
            }
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        this.startNextFromQueue();
    }

    startNextFromQueue() {
        if (this.generationQueue.length === 0) return;

        const nextGeneration = this.generationQueue.shift();
        if (nextGeneration) {
            nextGeneration.status = 'processing';
            nextGeneration.startedAt = Date.now();
            this.activeGenerations.set(nextGeneration.id, nextGeneration);
            this.processGeneration(nextGeneration);
            console.log(`üöÄ Started queued generation ${nextGeneration.id}`);
        }
    }

    async processGeneration(generation) {
        try {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            if (window.globalHistoryLoader) {
                setTimeout(() => {
                    if (window.globalHistoryLoader.forceLoadVisibleHistoryPreviews) {
                        window.globalHistoryLoader.forceLoadVisibleHistoryPreviews();
                    }
                }, 100);
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π webhook –∑–∞–ø—Ä–æ—Å
            const requestData = {
                action: 'Image Generation',
                prompt: generation.prompt,
                style: generation.style || appState?.selectedStyle,
                mode: generation.mode,
                size: generation.size,
                user_id: appState?.user?.id || null,
                user_name: appState?.user?.name || null,
                user_username: appState?.user?.username || null,
                user_language: appState?.user?.language || 'en',
                user_is_premium: appState?.user?.isPremium || false,
                telegram_platform: appState?.tg?.platform || 'unknown',
                telegram_version: appState?.tg?.version || 'unknown',
                timestamp: generation.timestamp || new Date().toISOString(),
                generation_id: generation.id,
                taskUUID: generation.taskUUID,
                // üî• –î–û–ë–ê–í–ò–õ–ò: –£–ú–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê UUID - –æ–¥–∏–Ω–æ—á–Ω–æ–µ –∏–ª–∏ –º–∞—Å—Å–∏–≤ "uuid1","uuid2" –¥–ª—è –±—ç–∫–µ–Ω–¥–∞
                ...(generation.imageUUIDs?.length === 1
                    ? { imageUUID: generation.imageUUIDs[0] }  // –µ–¥–∏–Ω–∏—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –æ–¥–∏–Ω–æ—á–Ω—ã–π –∫–ª—é—á
                    : generation.imageUUIDs?.length > 1
                        ? { imageUUIDs: generation.imageUUIDs }  // —É–∂–µ –º–∞—Å—Å–∏–≤ UUID - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è –±—ç–∫–∞
                        : {})  // –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            };

            // üî• –ù–ï–û–ë–•–û–î–ò–ú–û–ï –î–û–ü–û–õ–ù–ï–ù–ò–ï: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è inline –≤ processGeneration

            // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–¥–∞–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç processResult - –ª–æ–≥–∏–∫–∞ —Ç–µ–ø–µ—Ä—å inline

            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
            console.log('üéØ Checking userImageUrls:', {
                exists: !!generation.userImageUrls,
                length: generation.userImageUrls ? generation.userImageUrls.length : 0,
                urls: generation.userImageUrls
            });

            if (generation.userImageUrls && generation.userImageUrls.length > 0) {
                console.log('‚úÖ Found user images, sending to webhook:', generation.userImageUrls.length, 'images');

                // –ï—Å–ª–∏ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ "user_image_url" (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ), –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ - "user_image_urls" (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ)
                if (generation.userImageUrls.length === 1) {
                    requestData.user_image_url = generation.userImageUrls[0]; // –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
                    console.log('üì§ Sending single image URL (user_image_url):', requestData.user_image_url.substring(0, 100) + '...');
                } else {
                    requestData.user_image_urls = generation.userImageUrls; // –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
                    console.log('üì§ Sending array of URLs (user_image_urls):', requestData.user_image_urls.length, 'items');
                }
            } else {
                console.log('‚ùå No user images found for this generation');
            }

            console.log('üì§ Sending webhook request for generation:', generation.id);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é sendToWebhook
            let response;
            console.log('üîó Calling sendToWebhook for generation:', generation.id);
            if (window.sendToWebhook) {
                response = await window.sendToWebhook(requestData);
            } else {
                // Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∏–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                await new Promise(resolve => setTimeout(resolve, 2000 + Math.random() * 3000));
                response = {
                    status: 'success',
                    image_url: 'https://picsum.photos/512/512?random=' + generation.id,
                    cost: 1,
                    cost_currency: 'cr'
                };
            }

            console.log('üì• Webhook response for generation:', generation.id, response);

            // üî• –î–û–ë–ê–í–ò–õ–ò: –í–ê–ñ–ù–û! –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–µ—Ä–µ–≥—Ä—É–∑–∫—É —Å–µ—Ä–≤–µ—Ä–∞
            if (response.server_overloaded === true) {
                console.log(`üö® SERVER OVERLOADED DETECTED: ${response.message || 'backend timeout'}`);
                // –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ö–ê–ö –ü–ï–†–ï–ì–†–£–ó–ö–£ - –£–î–ê–õ–Ø–ï–ú LOADING-CARD –ò –ü–û–ö–ê–ó–´–í–ê–ï–ú –¢–û–°–¢
                this.removeFailedLoadingCard(generation.id);

                if (window.showToast) {
                    const overloadMessage = window.appState?.translate('error_server_overloaded') ||
                        'üòì –°–µ—Ä–≤–µ—Ä—ã –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
                    window.showToast('error', overloadMessage);
                }
                this.completeGeneration(generation.id, null, new Error('Server overloaded'));
                return;
            }

            // üìù –î–û–ë–ê–í–ò–õ–ò: –û–±—Ä–∞–±–æ—Ç–∫–∞ "accepted" –æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
            if (response.trim && response.trim().toLowerCase() === 'accepted') {
                console.log(`üö® SERVER ACCEPTED RESPONSE - treating as overload: "${response}"`);
                this.removeFailedLoadingCard(generation.id);

                if (window.showToast) {
                    const overloadMessage = window.appState?.translate('error_server_overloaded') ||
                        'üòì –°–µ—Ä–≤–µ—Ä—ã –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
                    window.showToast('error', overloadMessage);
                }
                this.completeGeneration(generation.id, null, new Error('Server accepted - overload'));
                return;
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —è–≤–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
            if (response.status === 'error' || response.error) {
                console.log(`üö® API ERROR DETECTED: ${response.error || response.message || 'Generation failed'}`);
                this.removeFailedLoadingCard(generation.id);
                throw new Error(response.error || response.message || 'Generation failed');
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∫—Ä–µ–¥–∏—Ç–æ–≤
            const limitReached = response.limit_reached === true ||
                response.limit_reached === 'true' ||
                response.limit_reached === '1' ||
                response.limit_reached === 1;

            if (limitReached) {
                console.log(`üö® CREDIT LIMIT REACHED: ${response.message || 'Generation limit reached'}`);
                generation.status = 'limit';
                if (window.showSubscriptionNotice) {
                    window.showSubscriptionNotice(response);
                }
                if (window.showToast) {
                    window.showToast('warning', response.message || 'Generation limit reached');
                }
                this.removeFailedLoadingCard(generation.id);
                this.completeGeneration(generation.id, null, new Error('Limit reached'));
                return;
            }

            // –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            if (response.status === 'success' && response.image_url) {
                console.log('‚úÖ WEBHOOK SUCCESS - launching preview replacement for:', generation.id);
                console.log('üìã Full webhook response:', response);

                // üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ó–∞–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞ –ø—Ä–µ–≤—å—é –ø–æ taskUUID
                const replacementData = {
                    image_url: response.image_url,
                    generation_id: response.generation_id || generation.id,
                    mode: generation.mode,
                    style: generation.style,
                    generation_cost: response.generation_cost,
                    cost_currency: response.cost_currency,
                    remaining_credits: response.remaining_credits,
                    imageUUID: response.imageUUID,
                    taskUUID: response.taskUUID || generation.taskUUID
                };

                console.log('üéØ Data for preview replacement:', replacementData);

                        // üî• –ó–ê–ú–ï–ù–ê –ê–ù–ò–ú–ê–¶–ò–ò –ù–ê –ü–†–ï–í–¨–Æ –ø–æ taskUUID
                        let visualUpdateDone = false;

                        // üî• –ü–†–û–í–ï–†–Ø–ï–ú: –ó–∞–∫—Ä—ã—Ç–∞ –ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º DOM
                        const isHistoryClosed = !document.getElementById('historyList')?.classList.contains('hidden');

                        if (window.replaceLoadingWithPreview) {
                            const replaced = window.replaceLoadingWithPreview(generation.taskUUID, replacementData);
                            if (replaced) {
                                console.log('‚úÖ Preview successfully replaced animation for taskUUID:', generation.taskUUID);
                                visualUpdateDone = true;
                            } else {
                                console.warn(`‚ö†Ô∏è Preview replacement failed (history closed: ${!isHistoryClosed}), not updating DOM`);
                                // –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫–æ–≥–¥–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫—Ä—ã—Ç–∞ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
                            }
                        } else {
                            console.warn('‚ùå replaceLoadingWithPreview not available');
                            // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –æ—Ç–∫—Ä—ã—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                            if (window.updateHistoryItemWithImage && isHistoryClosed) {
                                console.log('üîÑ Using fallback visual update while history is open');
                                window.updateHistoryItemWithImage(generation.id, response.image_url);
                                visualUpdateDone = true;
                            }
                        }

                        // üî• –í–°–ï–ì–î–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è background listeners
                        console.log('üéØ Sending completion events for generation:', generation.id, `(visualUpdateDone: ${visualUpdateDone})`);

                        const completionEvent = new CustomEvent(`generation:completed:${generation.taskUUID}`, {
                            detail: replacementData
                        });
                        document.dispatchEvent(completionEvent);

                        // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
                        const globalCompletionEvent = new CustomEvent('generation:completed', {
                            detail: {
                                ...replacementData,
                                generation_id: generation.id,
                                taskUUID: generation.taskUUID
                            }
                        });
                        document.dispatchEvent(globalCompletionEvent);

                        console.log('üéØ Background completion events sent for generation:', generation.id);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –ø–∞–º—è—Ç–∏
                generation.result = response.image_url;
                generation.status = 'completed';

                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç–µ
                if (response.remaining_credits !== undefined && window.updateUserBalance) {
                    window.updateUserBalance(response.remaining_credits);
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç webhook
                if (response.generation_cost !== undefined) {
                    generation.generation_cost = response.generation_cost;
                    generation.cost_currency = response.cost_currency || 'Cr';
                }
                if (response.imageUUID) {
                    generation.imageUUID = response.imageUUID;
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if (window.appState) {
                    window.appState.currentGeneration = generation;
                    window.appState.saveHistory();
                    console.log('üíæ Generation state saved after webhook success');
                }

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                try {
                    if (window.showResultToast) {
                        window.showResultToast({ image_url: response.image_url });
                        console.log('üéØ Success notification shown for generation:', generation.id);
                    } else if (window.showToast) {
                        window.showToast('success', '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ! –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏.');
                    }
                } catch (e) {
                    console.error('‚ùå Error showing success notification:', e);
                }

                // –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: –ø—Ä–µ–≤—å—é –∑–∞–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
                console.log(`‚úÖ Generation ${generation.id} completed successfully - preview replaced using taskUUID`);

                this.completeGeneration(generation.id, response.image_url);
                return;
            }

            // –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
            throw new Error('Unexpected response format');

        } catch (error) {
            // üö® –¢–û–°–¢ –ü–†–û –ü–ï–†–ï–ì–†–£–ó–ö–£ –ü–û–ö–ê–ó–´–í–ê–¢–¨ –ù–ê –í–°–ï –û–®–ò–ë–ö–ò (–ö–†–û–ú–ï –í–ê–õ–ò–î–ù–û–ì–û SUCCESS JSON)
            console.log(`üö® Showing server overload toast for all non-success responses for generation ${generation.id}`);

            if (window.showToast) {
                const overloadMessage = 'üòì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –°–µ—Ä–≤–µ—Ä—ã —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏‚Ä¶ –ú—ã –∏—Å–∫—Ä–µ–Ω–Ω–µ –∏–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞ –∏ –Ω–∞–¥–µ–µ–º—Å—è –Ω–∞ –≤–∞—à–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ üôè';
                window.showToast('error', overloadMessage);
            }

            console.error(`‚ùå Generation error for ${generation.id}:`, error);
            this.completeGeneration(generation.id, null, error);
        }
    }

    cancelGeneration(generationId) {
        // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        if (this.activeGenerations.has(generationId)) {
            const generation = this.activeGenerations.get(generationId);
            generation.status = 'cancelled';
            generation.error = 'Cancelled by user';
            this.completeGeneration(generationId);
            return true;
        }

        // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        const queueIndex = this.generationQueue.findIndex(g => g.id === generationId);
        if (queueIndex !== -1) {
            this.generationQueue.splice(queueIndex, 1);
            console.log(`‚ùå Generation ${generationId} removed from queue`);
            return true;
        }

        return false;
    }

    getActiveGenerationCount() {
        return this.activeGenerations.size;
    }

    getQueueLength() {
        return this.generationQueue.length;
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    getGenerationStatus(generationId) {
        const active = this.activeGenerations.get(generationId);
        if (active) return active.status;

        const queued = this.generationQueue.find(g => g.id === generationId);
        if (queued) return 'queued';

        return null;
    }

    // üîß –î–û–ë–ê–í–ò–õ–ò: –ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—É–¥–∞–≤—à–µ–π—Å—è loading-card
    removeFailedLoadingCard(generationId) {
        const loadingElement = document.getElementById(`loading-${generationId}`);
        if (loadingElement) {
            console.log(`üóëÔ∏è Removing failed generation loading card: ${generationId}`);
            loadingElement.remove();

            // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö –∫–æ–≥–¥–∞ –ø—Ä–µ–≤—å—é —É–¥–∞–ª—è–µ—Ç—Å—è
            setTimeout(() => {
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth'
                });
                console.log('üÜô Scrolled to top after removing failed preview');
            }, 300);
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const generationManager = new GenerationManager();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.GenerationManager = GenerationManager;
window.generationManager = generationManager;

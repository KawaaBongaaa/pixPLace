/**
 * Parallel Image Generation Manager
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ—á–µ—Ä–µ–¥—å—é –∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
 */

class GenerationManager {
    constructor() {
        this.activeGenerations = new Map(); // id -> generation object
        this.generationQueue = []; // –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞—é—â–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        this.maxConcurrentGenerations = 3; // –º–∞–∫—Å–∏–º—É–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    }

    canStartNewGeneration() {
        return this.activeGenerations.size < this.maxConcurrentGenerations && this.generationQueue.length === 0;
    }

    addGeneration(generation) {
        // –°–æ–∑–¥–∞—ë–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
        generation.id = generation.id || Date.now() + Math.random().toString(36).substr(2, 9);

        if (this.activeGenerations.size >= this.maxConcurrentGenerations) {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è
            this.generationQueue.push(generation);
            generation.status = 'queued';
            generation.queuedAt = Date.now();
            console.log(`üìã Generation ${generation.id} queued (${this.generationQueue.length} in queue)`);
            return false;
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É
        this.activeGenerations.set(generation.id, generation);
        generation.status = 'processing';
        generation.startedAt = Date.now();
        console.log(`üöÄ Generation ${generation.id} started (${this.activeGenerations.size}/${this.maxConcurrentGenerations} active)`);

        // –ù–ê–ß–ò–ù–ê–ï–ú –ü–†–û–¶–ï–°–° –ì–ï–ù–ï–†–ê–¶–ò–ò
        console.log(`‚ö° Starting processGeneration for ${generation.id}`);
        this.processGeneration(generation);

        return true;
    }

    completeGeneration(generationId, result = null, error = null) {
        const generation = this.activeGenerations.get(generationId);
        if (!generation) {
            console.warn(`Generation ${generationId} not found in active list`);
            return;
        }

        generation.completedAt = Date.now();
        generation.duration = generation.completedAt - (generation.startedAt || generation.completedAt);

        if (error) {
            generation.status = 'error';
            generation.error = error.message || error;
        } else if (result) {
            generation.status = 'success';
            generation.result = result;
        } else {
            generation.status = 'completed';
        }

        // –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –í –ò–°–¢–û–†–ò–ò: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ app_modern.js::generateImage
        // –ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
        // –ù–∞–π–¥–µ–º –∏ –æ–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å –≤ –∏—Å—Ç–æ—Ä–∏–∏
        if (window.appState && window.appState.generationHistory) {
            const historyItem = window.appState.generationHistory.find(item => item.id === generationId);
            if (historyItem) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                historyItem.status = generation.status;
                historyItem.completedAt = generation.completedAt;
                historyItem.duration = generation.duration;
                historyItem.result = generation.result;
                historyItem.error = generation.error;
                window.appState.saveHistory();
                console.log(`‚ú® Updated generation ${generationId} status in history: ${generation.status}`);
            } else {
                console.warn(`‚ö†Ô∏è Generation ${generationId} not found in appState history - something went wrong!`);
            }
        }

        this.activeGenerations.delete(generationId);
        console.log(`‚úÖ Generation ${generationId} completed (${this.activeGenerations.size} remaining)`);

        // üî• –î–û–ë–ê–í–õ–ï–ù–û: –£–ë–ò–†–ê–ï–ú –ó–ê–¶–ò–ö–õ–ï–ù–ù–´–ô LOADING –≠–õ–ï–ú–ï–ù–¢ –ü–†–ò –û–®–ò–ë–ö–ï
        if (error) {
            const loadingElement = document.getElementById(`loading-${generationId}`);
            if (loadingElement) {
                console.log(`üóëÔ∏è Removing failed generation loading element: ${generationId}`);
                loadingElement.remove();

                // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö –∫–æ–≥–¥–∞ –ø—Ä–µ–≤—å—é —É–¥–∞–ª—è–µ—Ç—Å—è
                setTimeout(() => {
                    window.scrollTo({
                        top: 0,
                        behavior: 'smooth'
                    });
                    console.log('üÜô Scrolled to top after removing failed preview');
                }, 300); // –Ω–µ–±–æ–ª—å—à–æ–π delay —á—Ç–æ–±—ã DOM –æ–±–Ω–æ–≤–∏–ª—Å—è

                // ‚ùó‚ùó‚ùó –¢–û–°–¢ –ù–ï –ü–û–ö–ê–ó–´–í–ê–ï–ú –ó–î–ï–°–¨ - –í–°–Å –î–ï–õ–ê–ï–¢–°–Ø –í processGeneration –î–õ–Ø –ö–û–ù–¢–†–û–õ–Ø ‚ùó‚ùó‚ùó
                // –¢–æ—Å—Ç –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ª–∏–±–æ –¥–ª—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ (–¥–ª–∏–Ω–Ω—ã–π), –ª–∏–±–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ (–æ–±—ã—á–Ω—ã–π)
            }
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        this.startNextFromQueue();
    }

    startNextFromQueue() {
        if (this.generationQueue.length === 0) return;

        const nextGeneration = this.generationQueue.shift();
        if (nextGeneration) {
            nextGeneration.status = 'processing';
            nextGeneration.startedAt = Date.now();
            this.activeGenerations.set(nextGeneration.id, nextGeneration);
            this.processGeneration(nextGeneration);
            console.log(`üöÄ Started queued generation ${nextGeneration.id}`);
        }
    }

    async processGeneration(generation) {
        try {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            if (window.globalHistoryLoader) {
                setTimeout(() => {
                    if (window.globalHistoryLoader.forceLoadVisibleHistoryPreviews) {
                        window.globalHistoryLoader.forceLoadVisibleHistoryPreviews();
                    }
                }, 100);
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π webhook –∑–∞–ø—Ä–æ—Å
            const requestData = {
                action: 'Image Generation',
                prompt: generation.prompt,
                style: generation.style || appState?.selectedStyle,
                mode: generation.mode,
                size: generation.size,
                user_id: appState?.userId,
                user_name: appState?.userName,
                user_username: appState?.userUsername,
                user_language: appState?.userLanguage || 'en',
                user_is_premium: appState?.userIsPremium,
                telegram_platform: appState?.telegramPlatform,
                telegram_version: appState?.telegramVersion,
                timestamp: generation.timestamp || new Date().toISOString(),
                generation_id: generation.id
            };

            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
            console.log('üéØ Checking userImageUrls:', {
                exists: !!generation.userImageUrls,
                length: generation.userImageUrls ? generation.userImageUrls.length : 0,
                urls: generation.userImageUrls
            });

            if (generation.userImageUrls && generation.userImageUrls.length > 0) {
                console.log('‚úÖ Found user images, sending to webhook:', generation.userImageUrls.length, 'images');

                // –ï—Å–ª–∏ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ "user_image_url" (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ), –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ - "user_image_urls" (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ)
                if (generation.userImageUrls.length === 1) {
                    requestData.user_image_url = generation.userImageUrls[0]; // –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
                    console.log('üì§ Sending single image URL (user_image_url):', requestData.user_image_url.substring(0, 100) + '...');
                } else {
                    requestData.user_image_urls = generation.userImageUrls; // –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
                    console.log('üì§ Sending array of URLs (user_image_urls):', requestData.user_image_urls.length, 'items');
                }
            } else {
                console.log('‚ùå No user images found for this generation');
            }

            console.log('üì§ Sending webhook request for generation:', generation.id);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é sendToWebhook
            let response;
            console.log('üîó Calling sendToWebhook for generation:', generation.id);
            if (window.sendToWebhook) {
                response = await window.sendToWebhook(requestData);
            } else {
                // Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∏–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                await new Promise(resolve => setTimeout(resolve, 2000 + Math.random() * 3000));
                response = {
                    status: 'success',
                    image_url: 'https://picsum.photos/512/512?random=' + generation.id,
                    cost: 1,
                    cost_currency: 'cr'
                };
            }

            console.log('üì• Webhook response for generation:', generation.id, response);

            // üî• –î–û–ë–ê–í–ò–õ–ò: –í–ê–ñ–ù–û! –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–µ—Ä–µ–≥—Ä—É–∑–∫—É —Å–µ—Ä–≤–µ—Ä–∞
            if (response.server_overloaded === true) {
                console.log(`üö® SERVER OVERLOADED DETECTED: ${response.message || 'backend timeout'}`);
                // –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ö–ê–ö –ü–ï–†–ï–ì–†–£–ó–ö–£ - –ü–û–ö–ê–ó–´–í–ê–ï–ú –¢–û–°–¢ –ò –ó–ê–í–ï–†–®–ê–ï–ú
                if (window.showToast) {
                    const overloadMessage = window.appState?.translate('error_server_overloaded') ||
                        'üòì –°–µ—Ä–≤–µ—Ä—ã –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
                    window.showToast('error', overloadMessage);
                }
                this.completeGeneration(generation.id, null, new Error('Server overloaded'));
                return;
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —è–≤–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
            if (response.status === 'error' || response.error) {
                throw new Error(response.error || response.message || 'Generation failed');
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∫—Ä–µ–¥–∏—Ç–æ–≤
            const limitReached = response.limit_reached === true ||
                response.limit_reached === 'true' ||
                response.limit_reached === '1' ||
                response.limit_reached === 1;

            if (limitReached) {
                generation.status = 'limit';
                if (window.showSubscriptionNotice) {
                    window.showSubscriptionNotice(response);
                }
                if (window.showToast) {
                    window.showToast('warning', response.message || 'Generation limit reached');
                }
                this.completeGeneration(generation.id, null, new Error('Limit reached'));
                return;
            }

            // –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            if (response.status === 'success' && response.image_url) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç–µ
                if (response.remaining_credits !== undefined && window.updateUserBalance) {
                    window.updateUserBalance(response.remaining_credits);
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –æ–±—ä–µ–∫—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π –∏–∑ –≤–µ–±—Ö—É–∫–∞)
                if (response.generation_cost !== undefined) {
                    generation.generation_cost = response.generation_cost;
                    generation.cost_currency = response.cost_currency || 'Cr';
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É –≤ –∏—Å—Ç–æ—Ä–∏–∏
                if (window.updateHistoryItemWithImage) {
                    window.updateHistoryItemWithImage(generation.id, response.image_url);
                }

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
                console.log('üîç Checking showResult conditions:', {
                    showResult: !!window.showResult,
                    appState: !!window.appState,
                    generation: !!generation
                });

                // ‚úÖ –ü–†–ï–í–¨–Æ –í–ê–†–ò–ê–ù–¢: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Å–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
                console.log('üéØ Generation completed successfully');

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ appState –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –ø—Ä–µ–≤—å—é
                if (window.appState) {
                    window.appState.currentGeneration = generation;
                }

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
                try {
                    if (window.showResultToast) {
                        window.showResultToast({ image_url: response.image_url });
                        console.log('üéØ Result preview toast shown for generation:', generation.id);
                    } else if (window.showResult) {
                        // Fallback –Ω–∞ –ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω –µ—Å–ª–∏ –ø—Ä–µ–≤—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
                        window.showResult({ image_url: response.image_url });
                        console.log('üéØ Fallback: Full result screen shown for generation:', generation.id);
                    } else {
                        console.error('‚ùå window.showResultToast and window.showResult not available!');
                        // Fallback - —Ç–æ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        if (window.showToast) {
                            window.showToast('success', 'Image generated! Check history.');
                        }
                    }
                } catch (e) {
                    console.error('‚ùå Error showing result toast:', e);
                    // Fallback - —Ç–æ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if (window.showToast) {
                        window.showToast('success', 'Image generated! Check history.');
                    }
                }

                // –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: –ø—Ä–µ–≤—å—é –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                console.log(`‚úÖ Generation ${generation.id} fully completed - preview shown to user`);

                this.completeGeneration(generation.id, response.image_url);
                return;
            }

            // –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
            throw new Error('Unexpected response format');

        } catch (error) {
            // üö® –¢–û–°–¢ –ü–†–û –ü–ï–†–ï–ì–†–£–ó–ö–£ –ü–û–ö–ê–ó–´–í–ê–¢–¨ –ù–ê –í–°–ï –û–®–ò–ë–ö–ò (–ö–†–û–ú–ï –í–ê–õ–ò–î–ù–û–ì–û SUCCESS JSON)
            console.log(`üö® Showing server overload toast for all non-success responses for generation ${generation.id}`);

            if (window.showToast) {
                const overloadMessage = window.appState?.translate('error_server_overloaded') ||
                    'üòì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –°–µ—Ä–≤–µ—Ä—ã —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏‚Ä¶ –ú—ã –∏—Å–∫—Ä–µ–Ω–Ω–µ –∏–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞ –∏ –Ω–∞–¥–µ–µ–º—Å—è –Ω–∞ –≤–∞—à–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ üôè';
                window.showToast('error', overloadMessage);
            }

            console.error(`‚ùå Generation error for ${generation.id}:`, error);
            this.completeGeneration(generation.id, null, error);
        }
    }

    cancelGeneration(generationId) {
        // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        if (this.activeGenerations.has(generationId)) {
            const generation = this.activeGenerations.get(generationId);
            generation.status = 'cancelled';
            generation.error = 'Cancelled by user';
            this.completeGeneration(generationId);
            return true;
        }

        // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        const queueIndex = this.generationQueue.findIndex(g => g.id === generationId);
        if (queueIndex !== -1) {
            this.generationQueue.splice(queueIndex, 1);
            console.log(`‚ùå Generation ${generationId} removed from queue`);
            return true;
        }

        return false;
    }

    getActiveGenerationCount() {
        return this.activeGenerations.size;
    }

    getQueueLength() {
        return this.generationQueue.length;
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    getGenerationStatus(generationId) {
        const active = this.activeGenerations.get(generationId);
        if (active) return active.status;

        const queued = this.generationQueue.find(g => g.id === generationId);
        if (queued) return 'queued';

        return null;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const generationManager = new GenerationManager();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.GenerationManager = GenerationManager;
window.generationManager = generationManager;

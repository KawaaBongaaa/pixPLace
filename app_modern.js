// üöÄ Modern AI Image Generator WebApp

// Configuration
const CONFIG = {
    WEBHOOK_URL: 'https://hook.us2.make.com/x2hgl6ocask8hearbpwo3ch7pdwpdlrk', // ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® WEBHOOK!
    TIMEOUT: 120000, // 120 —Å–µ–∫—É–Ω–¥
    LANGUAGES: ['en', 'ru', 'es', 'fr', 'de', 'zh', 'pt', 'ar', 'hi', 'ja', 'it', 'ko', 'tr', 'pl'],
    DEFAULT_LANGUAGE: 'en',
    DEFAULT_THEME: 'dark', // 'light', 'dark', 'auto'
    IMGBB_API_KEY: '34627904ae4633713e1fee94a243794e', // —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤/–ø—Ä–æ—Ç–æ—Ç–∏–ø–∞
    MAX_IMAGE_MB: 10,
    ALLOWED_TYPES: ['image/jpeg', 'image/png', 'image/webp', 'image/gif'],
    PREVIEW_MAX_W: 1024,
    PREVIEW_MAX_H: 1024,
    PREVIEW_JPEG_QUALITY: 0.9,
};
// üåç Translations
const TRANSLATIONS = {
    en: {
        loading: 'Please, Have a Fun',
        app_title: 'pixPLace',
        connecting: 'Connecting...',
        connected: 'Connected to Telegram',
        welcome_title: 'Create Amazing Images',
        welcome_subtitle: 'Describe your vision and watch AI bring it to life',
        prompt_label: 'Prompt',
        prompt_placeholder: 'A beautiful sunset over the ocean...',
        style_label: 'Style',
        style_realistic: 'Realistic',
        style_artistic: 'Artistic',
        style_cartoon: 'Cartoon',
        style_fantasy: 'Fantasy',
        style_anime: 'Anime',
        style_cyberpunk: 'Cyberpunk',
        style_popart: 'Pop Art',
        style_abstract: 'Abstract',
        style_sketch: 'Sketch',
        style_3d: '3d',
        style_sticker: 'Sticker',
        style_vector: 'Vector',
        style_interior: 'Interior',
        style_architecture: 'Architecture',
        style_fashion: 'Fashion',
        style_tattoo: 'Tattoo',
        style_print: 'Print',
        style_logo: 'Logo',
        style_icon: 'Icon',
        style_banner: 'Banner',
        mode_label: 'Mode',
        mode_print_maker: 'Print/Stickers',
        mode_photo_session: 'Photo Session',
        mode_fast_generation: 'Fast Generation',
        mode_pixplace_pro: 'pixPLace Pro (Logo/Text/Photo Supported)',
        size_label: 'Size',
        size_square: '1:1',
        size_portrait: '9:16',
        size_landscape: '16:9',
        generate_btn: 'Generate Image',
        processing_title: 'Creating Your Masterpiece',
        processing_subtitle: 'This may take up to 60 seconds',
        step_analyzing: 'Analyzing prompt',
        step_generating: 'Generating image',
        step_finalizing: 'Finalizing result',
        elapsed_time: 'Elapsed time:',
        cancel_btn: 'Cancel',
        create_new: 'Create New',
        view_history: 'View History',
        history_title: 'Generation History',
        empty_history_title: 'No generations yet',
        empty_history_subtitle: 'Create your first AI image to see it here',
        generation_time: 'Generation time',
        error_prompt_required: 'Please describe your image',
        error_prompt_too_short: 'Prompt too short (minimum 5 characters)',
        error_webhook_not_configured: 'Webhook URL not configured',
        error_generation_failed: 'Generation failed',
        error_timeout: 'Generation timeout. Please try again.',
        success_generated: 'Image generated successfully!',
        copied_to_clipboard: 'Copied to clipboard',
        download_started: 'Download started',
        limit_title: 'Generation Limit Reached',
        limit_message: 'You\'ve reached your free generation limit. Upgrade to continue creating amazing images!',
        check_subsciption: 'Check Subsciption',
        closeLimitModal: 'Maybe Later',
        upgradeBtn: 'Upgrade Now',
        remove_user_image: 'Remove',
        reference_image: 'Reference',
        optional_choice: '(optional)',
        upload_image: 'Upload Img'

    },
    ru: {
        loading: '–¢–≤–æ—Ä–∏—Ç–µ —Å –£–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º!',
        app_title: 'pixPLace',
        connecting: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...',
        connected: '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Telegram',
        welcome_title: '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ü–æ—Ç—Ä—è—Å–∞—é—â–∏–µ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        welcome_subtitle: '–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –≤–∏–¥–µ–Ω–∏–µ –∏ –Ω–∞–±–ª—é–¥–∞–π—Ç–µ, –∫–∞–∫ pixPLace –≤–æ–ø–ª–æ—â–∞–µ—Ç –µ–≥–æ –≤ –∂–∏–∑–Ω—å',
        prompt_label: 'Prompt',
        prompt_placeholder: '–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –æ–∫–µ–∞–Ω–æ–º...',
        style_label: '–°—Ç–∏–ª—å',
        style_realistic: '–†–µ–∞–ª–∏–∑–º',
        style_artistic: '–ê—Ä—Ç',
        style_cartoon: '–ú—É–ª—å—Ç',
        style_sketch: '–°–∫–µ—Ç—á',
        style_fantasy: '–§—ç–Ω—Ç—ç–∑–∏',
        style_anime: '–ê–Ω–∏–º—ç',
        style_cyberpunk: 'CyberPunk',
        mode_label: '–†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
        mode_print_maker: '–ü—Ä–∏–Ω—Ç—ã/–°—Ç–∏–∫–µ—Ä—ã',
        mode_fast_generation: '–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è',
        mode_pixplace_pro: 'pixPLace Pro (Logo/Text/Photo)',
        size_label: '–†–∞–∑–º–µ—Ä',
        size_square: '1:1',
        size_portrait: '9:16',
        size_landscape: '16:9',
        generate_btn: '–°–æ–∑–¥–∞—Ç—å –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
        processing_title: '–°–æ–∑–¥–∞–µ–º –í–∞—à –®–µ–¥–µ–≤—Ä',
        processing_subtitle: '–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 60 —Å–µ–∫—É–Ω–¥',
        step_analyzing: '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç',
        step_generating: '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
        step_finalizing: '–ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
        elapsed_time: '–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏:',
        cancel_btn: '–û—Ç–º–µ–Ω–∏—Ç—å',
        create_new: '–°–æ–∑–¥–∞—Ç—å –ù–æ–≤–æ–µ',
        view_history: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ò—Å—Ç–æ—Ä–∏—é',
        history_title: '–ò—Å—Ç–æ—Ä–∏—è –ì–µ–Ω–µ—Ä–∞—Ü–∏–π',
        empty_history_title: '–ü–æ–∫–∞ –Ω–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π',
        empty_history_subtitle: '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –ò–ò –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –∑–¥–µ—Å—å',
        generation_time: '–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
        error_prompt_required: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
        error_prompt_too_short: '–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)',
        error_webhook_not_configured: 'Webhook URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
        error_generation_failed: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å',
        error_timeout: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        success_generated: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!',
        copied_to_clipboard: '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞',
        download_started: '–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å',
        limit_title: '–õ–∏–º–∏—Ç –ì–µ–Ω–µ—Ä–∞—Ü–∏–π –ò—Å—á–µ—Ä–ø–∞–Ω',
        limit_message: '–¢–æ–∫–µ–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ë–æ–ª—å—à–µ –¢–æ–∫–µ–Ω–æ–≤, –æ–ø–ª–∞—Ç–∏–≤ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª pixPLace',
        check_subsciption: '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ü–æ–¥–ø–∏—Å–∫—É',
        closeLimitModal: '–ú–æ–∂–µ—Ç –ü–æ–∑–∂–µ',
        upgradeBtn: '–û–ø–ª–∞—Ç–∏—Ç—å –°–µ–π—á–∞—Å'

    },
    es: {
        loading: '¬°Crea con diversi√≥n!',
        app_title: 'pixPLace',
        connecting: 'Conectando...',
        connected: 'Conectado a Telegram',
        welcome_title: 'Crea Im√°genes Asombrosas',
        welcome_subtitle: 'Describe tu visi√≥n y observa c√≥mo la IA la hace realidad',
        prompt_label: 'Prompt',
        prompt_placeholder: 'Una hermosa puesta de sol sobre el oc√©ano...',
        style_label: 'Estilo',
        style_realistic: 'Realista',
        style_artistic: 'Art√≠stico',
        style_cartoon: 'Dibujo animado',
        style_fantasy: 'Fantas√≠a',
        style_anime: 'Anime',
        style_cyberpunk: 'Cyberpunk',
        mode_label: 'Modo',
        mode_print_maker: 'Impresiones/Stickers',
        mode_fast_generation: 'Generaci√≥n r√°pida',
        mode_pixplace_pro: 'pixPLace Pro (Logo/Texto/Photo Soportado)',
        size_label: 'Tama√±o',
        size_square: '1:1',
        size_portrait: '9:16',
        size_landscape: '16:9',
        generate_btn: 'Generar Imagen',
        processing_title: 'Creando Tu Obra Maestra',
        processing_subtitle: 'Esto puede tardar hasta 60 segundos',
        step_analyzing: 'Analizando prompt',
        step_generating: 'Generando imagen',
        step_finalizing: 'Finalizando resultado',
        elapsed_time: 'Tiempo transcurrido:',
        cancel_btn: 'Cancelar',
        create_new: 'Crear Nuevo',
        view_history: 'Ver Historial',
        history_title: 'Historial de Generaciones',
        empty_history_title: 'A√∫n no hay generaciones',
        empty_history_subtitle: 'Crea tu primera imagen con IA para verla aqu√≠',
        generation_time: 'Tiempo de generaci√≥n',
        error_prompt_required: 'Por favor describe tu imagen',
        error_prompt_too_short: 'El prompt es demasiado corto (m√≠nimo 5 caracteres)',
        error_webhook_not_configured: 'Webhook no configurado',
        error_generation_failed: 'Fallo en la generaci√≥n',
        error_timeout: 'Tiempo de espera agotado. Int√©ntalo de nuevo.',
        success_generated: '¬°Imagen generada con √©xito!',
        copied_to_clipboard: 'Copiado al portapapeles',
        download_started: 'Descarga iniciada',
        limit_title: 'L√≠mite de Generaciones Alcanzado',
        limit_message: 'Has alcanzado tu l√≠mite gratuito. ¬°Actualiza para seguir creando im√°genes incre√≠bles!',
        check_subsciption: 'Comprobar Suscripci√≥n',
        closeLimitModal: 'Quiz√°s m√°s tarde',
        upgradeBtn: 'Actualizar ahora'
    },
    fr: {
        loading: 'Cr√©ez avec plaisir !',
        app_title: 'pixPLace',
        connecting: 'Connexion...',
        connected: 'Connect√© √† Telegram',
        welcome_title: 'Cr√©ez des Images Incroyables',
        welcome_subtitle: 'D√©crivez votre vision et laissez l‚ÄôIA lui donner vie',
        prompt_label: 'Prompt',
        prompt_placeholder: 'Un magnifique coucher de soleil sur l‚Äôoc√©an...',
        style_label: 'Style',
        style_realistic: 'R√©aliste',
        style_artistic: 'Artistique',
        style_cartoon: 'Dessin anim√©',
        style_fantasy: 'Fantaisie',
        style_anime: 'Anime',
        style_cyberpunk: 'Cyberpunk',
        mode_label: 'Mode',
        mode_print_maker: 'Impressions/Autocollants',
        mode_fast_generation: 'G√©n√©ration rapide',
        mode_pixplace_pro: 'pixPLace Pro (Logo/Texte Support√©)',
        size_label: 'Taille',
        size_square: '1:1',
        size_portrait: '9:16',
        size_landscape: '16:9',
        generate_btn: 'G√©n√©rer Image',
        processing_title: 'Cr√©ation de Votre Chef-d‚Äô≈ìuvre',
        processing_subtitle: 'Cela peut prendre jusqu‚Äô√† 60 secondes',
        step_analyzing: 'Analyse du prompt',
        step_generating: 'G√©n√©ration de l‚Äôimage',
        step_finalizing: 'Finalisation du r√©sultat',
        elapsed_time: 'Temps √©coul√© :',
        cancel_btn: 'Annuler',
        create_new: 'Cr√©er Nouveau',
        view_history: 'Voir l‚ÄôHistorique',
        history_title: 'Historique des G√©n√©rations',
        empty_history_title: 'Aucune g√©n√©ration pour le moment',
        empty_history_subtitle: 'Cr√©ez votre premi√®re image IA pour la voir ici',
        generation_time: 'Temps de g√©n√©ration',
        error_prompt_required: 'Veuillez d√©crire votre image',
        error_prompt_too_short: 'Prompt trop court (minimum 5 caract√®res)',
        error_webhook_not_configured: 'Webhook non configur√©',
        error_generation_failed: '√âchec de la g√©n√©ration',
        error_timeout: 'D√©lai d√©pass√©. R√©essayez.',
        success_generated: 'Image g√©n√©r√©e avec succ√®s !',
        copied_to_clipboard: 'Copi√© dans le presse-papiers',
        download_started: 'T√©l√©chargement d√©marr√©',
        limit_title: 'Limite de G√©n√©rations Atteinte',
        limit_message: 'Vous avez atteint votre limite gratuite. Passez √† l‚Äôabonnement pour continuer √† cr√©er des images incroyables !',
        check_subsciption: 'V√©rifier Abonnement',
        closeLimitModal: 'Peut-√™tre plus tard',
        upgradeBtn: 'Mettre √† niveau maintenant'
    },
    de: {
        loading: 'Viel Spa√ü beim Erstellen!',
        app_title: 'pixPLace',
        connecting: 'Verbinde...',
        connected: 'Mit Telegram verbunden',
        welcome_title: 'Erstelle Erstaunliche Bilder',
        welcome_subtitle: 'Beschreibe deine Vision und beobachte, wie die KI sie zum Leben erweckt',
        prompt_label: 'Prompt',
        prompt_placeholder: 'Ein sch√∂ner Sonnenuntergang √ºber dem Ozean...',
        style_label: 'Stil',
        style_realistic: 'Realistisch',
        style_artistic: 'K√ºnstlerisch',
        style_cartoon: 'Cartoon',
        style_fantasy: 'Fantasie',
        style_anime: 'Anime',
        style_cyberpunk: 'Cyberpunk',
        mode_label: 'Modus',
        mode_print_maker: 'Drucke/Sticker',
        mode_fast_generation: 'Schnelle Generierung',
        mode_pixplace_pro: 'pixPLace Pro (Logo/Text unterst√ºtzt)',
        size_label: 'Gr√∂√üe',
        size_square: '1:1',
        size_portrait: '9:16',
        size_landscape: '16:9',
        generate_btn: 'Bild generieren',
        processing_title: 'Dein Meisterwerk wird erstellt',
        processing_subtitle: 'Dies kann bis zu 60 Sekunden dauern',
        step_analyzing: 'Prompt analysieren',
        step_generating: 'Bild wird generiert',
        step_finalizing: 'Ergebnis wird finalisiert',
        elapsed_time: 'Verstrichene Zeit:',
        cancel_btn: 'Abbrechen',
        create_new: 'Neu Erstellen',
        view_history: 'Verlauf anzeigen',
        history_title: 'Generationsverlauf',
        empty_history_title: 'Noch keine Generierungen',
        empty_history_subtitle: 'Erstelle dein erstes KI-Bild, um es hier zu sehen',
        generation_time: 'Generierungszeit',
        error_prompt_required: 'Bitte beschreibe dein Bild',
        error_prompt_too_short: 'Prompt zu kurz (mindestens 5 Zeichen)',
        error_webhook_not_configured: 'Webhook nicht konfiguriert',
        error_generation_failed: 'Generierung fehlgeschlagen',
        error_timeout: 'Zeit√ºberschreitung. Bitte erneut versuchen.',
        success_generated: 'Bild erfolgreich generiert!',
        copied_to_clipboard: 'In die Zwischenablage kopiert',
        download_started: 'Download gestartet',
        limit_title: 'Generierungslimit erreicht',
        limit_message: 'Du hast dein kostenloses Limit erreicht. Upgrade, um weiterhin tolle Bilder zu erstellen!',
        check_subsciption: 'Abonnement pr√ºfen',
        closeLimitModal: 'Vielleicht sp√§ter',
        upgradeBtn: 'Jetzt upgraden'
    },
    zh: {
        loading: 'Â∞ΩÊÉÖÂàõ‰ΩúÂêßÔºÅ',
        app_title: 'pixPLace',
        connecting: 'ËøûÊé•‰∏≠...',
        connected: 'Â∑≤ËøûÊé•Âà∞ Telegram',
        welcome_title: 'ÂàõÈÄ†ÊÉäËâ≥ÁöÑÂõæÂÉè',
        welcome_subtitle: 'ÊèèËø∞‰Ω†ÁöÑÊÑøÊôØÔºåÁúãAIÂ∞ÜÂÖ∂Âèò‰∏∫Áé∞ÂÆû',
        prompt_label: 'ÊèêÁ§∫ËØç',
        prompt_placeholder: 'Áæé‰∏ΩÁöÑÊµ∑‰∏äÊó•ËêΩ...',
        style_label: 'È£éÊ†º',
        style_realistic: 'ÂÜôÂÆû',
        style_artistic: 'Ëâ∫ÊúØ',
        style_cartoon: 'Âç°ÈÄö',
        style_fantasy: 'ÂπªÊÉ≥',
        style_anime: 'Âä®Êº´',
        style_cyberpunk: 'ËµõÂçöÊúãÂÖã',
        mode_label: 'Ê®°Âºè',
        mode_print_maker: 'ÊâìÂç∞/Ë¥¥Á∫∏',
        mode_fast_generation: 'Âø´ÈÄüÁîüÊàê',
        mode_pixplace_pro: 'pixPLace Pro (ÊîØÊåÅÊñáÊú¨)',
        size_label: 'Â∞∫ÂØ∏',
        size_square: '1:1',
        size_portrait: '9:16',
        size_landscape: '16:9',
        generate_btn: 'ÁîüÊàêÂõæÂÉè',
        processing_title: 'Ê≠£Âú®ÂàõÈÄ†‰Ω†ÁöÑÊù∞‰Ωú',
        processing_subtitle: 'ËøôÂèØËÉΩÈúÄË¶ÅÈïøËææ 60 Áßí',
        step_analyzing: 'ÂàÜÊûêÊèêÁ§∫ËØç',
        step_generating: 'ÁîüÊàêÂõæÂÉè',
        step_finalizing: 'ÂÆåÊàêÁªìÊûú',
        elapsed_time: 'Â∑≤Áî®Êó∂Èó¥Ôºö',
        cancel_btn: 'ÂèñÊ∂à',
        create_new: 'ÂàõÂª∫Êñ∞ÂõæÂÉè',
        view_history: 'Êü•ÁúãÂéÜÂè≤',
        history_title: 'ÁîüÊàêÂéÜÂè≤',
        empty_history_title: 'ÊöÇÊó†ÁîüÊàêËÆ∞ÂΩï',
        empty_history_subtitle: 'ÂàõÂª∫‰Ω†ÁöÑÁ¨¨‰∏ÄÂº†AIÂõæÂÉèÂêéÂèØÂú®Ê≠§Êü•Áúã',
        generation_time: 'ÁîüÊàêÊó∂Èó¥',
        error_prompt_required: 'ËØ∑ÊèèËø∞‰Ω†ÁöÑÂõæÂÉè',
        error_prompt_too_short: 'ÊèêÁ§∫ËØçËøáÁü≠ÔºàËá≥Â∞ë 5 ‰∏™Â≠óÁ¨¶Ôºâ',
        error_webhook_not_configured: 'Webhook Êú™ÈÖçÁΩÆ',
        error_generation_failed: 'ÁîüÊàêÂ§±Ë¥•',
        error_timeout: 'Ë∂ÖÊó∂ÔºåËØ∑ÈáçËØï„ÄÇ',
        success_generated: 'ÂõæÂÉèÁîüÊàêÊàêÂäüÔºÅ',
        copied_to_clipboard: 'Â∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø',
        download_started: '‰∏ãËΩΩÂ∑≤ÂºÄÂßã',
        limit_title: 'ÁîüÊàêÊ¨°Êï∞Â∑≤Ëææ‰∏äÈôê',
        limit_message: 'Â∑≤ËææÂà∞ÂÖçË¥πÁîüÊàê‰∏äÈôê„ÄÇÂçáÁ∫ß‰ª•ÁªßÁª≠ÂàõÈÄ†ÊÉäËâ≥ÁöÑÂõæÂÉèÔºÅ',
        check_subsciption: 'Ê£ÄÊü•ËÆ¢ÈòÖ',
        closeLimitModal: 'Á®çÂêéÂÜçËØ¥',
        upgradeBtn: 'Á´ãÂç≥ÂçáÁ∫ß'
    },
    pt: {
        loading: 'Crie com prazer!',
        app_title: 'pixPLace',
        connecting: 'Conectando...',
        connected: 'Conectado ao Telegram',
        welcome_title: 'Crie Imagens Incr√≠veis',
        welcome_subtitle: 'Descreva sua vis√£o e veja a IA torn√°-la realidade',
        prompt_label: 'Prompt',
        prompt_placeholder: 'Um lindo p√¥r do sol sobre o oceano...',
        style_label: 'Estilo',
        style_realistic: 'Realista',
        style_artistic: 'Art√≠stico',
        style_cartoon: 'Desenho animado',
        style_fantasy: 'Fantasia',
        style_anime: 'Anime',
        style_cyberpunk: 'Cyberpunk',
        mode_label: 'Modo',
        mode_print_maker: 'Impress√µes/Adesivos',
        mode_fast_generation: 'Gera√ß√£o r√°pida',
        mode_pixplace_pro: 'pixPLace Pro (Logo/Texto Suportado)',
        size_label: 'Tamanho',
        size_square: '1:1',
        size_portrait: '9:16',
        size_landscape: '16:9',
        generate_btn: 'Gerar Imagem',
        processing_title: 'Criando Sua Obra-prima',
        processing_subtitle: 'Isso pode levar at√© 60 segundos',
        step_analyzing: 'Analisando prompt',
        step_generating: 'Gerando imagem',
        step_finalizing: 'Finalizando resultado',
        elapsed_time: 'Tempo decorrido:',
        cancel_btn: 'Cancelar',
        create_new: 'Criar Novo',
        view_history: 'Ver Hist√≥rico',
        history_title: 'Hist√≥rico de Gera√ß√µes',
        empty_history_title: 'Nenhuma gera√ß√£o ainda',
        empty_history_subtitle: 'Crie sua primeira imagem IA para v√™-la aqui',
        generation_time: 'Tempo de gera√ß√£o',
        error_prompt_required: 'Por favor descreva sua imagem',
        error_prompt_too_short: 'Prompt muito curto (m√≠nimo 5 caracteres)',
        error_webhook_not_configured: 'Webhook n√£o configurado',
        error_generation_failed: 'Falha na gera√ß√£o',
        error_timeout: 'Tempo limite excedido. Tente novamente.',
        success_generated: 'Imagem gerada com sucesso!',
        copied_to_clipboard: 'Copiado para a √°rea de transfer√™ncia',
        download_started: 'Download iniciado',
        limit_title: 'Limite de Gera√ß√µes Atingido',
        limit_message: 'Voc√™ atingiu seu limite gratuito. Atualize para continuar criando imagens incr√≠veis!',
        check_subsciption: 'Verificar Assinatura',
        closeLimitModal: 'Talvez depois',
        upgradeBtn: 'Atualizar agora'
    },
    ar: {
        loading: 'ÿßÿ®ÿ™ŸÉÿ± ÿ®ŸÖÿ™ÿπÿ©!',
        app_title: 'pixPLace',
        connecting: 'ÿ¨ÿßÿ±Ÿç ÿßŸÑÿßÿ™ÿµÿßŸÑ...',
        connected: 'ÿ™ŸÖ ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÄ Telegram',
        welcome_title: 'ÿ£ŸÜÿ¥ÿ¶ ÿµŸàÿ±ÿßŸã ŸÖÿ∞ŸáŸÑÿ©',
        welcome_subtitle: 'ÿµŸÅ ÿ±ÿ§Ÿäÿ™ŸÉ Ÿàÿ¥ÿßŸáÿØ ŸÉŸäŸÅ Ÿäÿ≠ŸàŸÑŸáÿß ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ÿ•ŸÑŸâ ÿ≠ŸÇŸäŸÇÿ©',
        prompt_label: 'ÿßŸÑŸàÿµŸÅ',
        prompt_placeholder: 'ÿ∫ÿ±Ÿàÿ® ÿ¨ŸÖŸäŸÑ ŸÅŸàŸÇ ÿßŸÑŸÖÿ≠Ÿäÿ∑...',
        style_label: 'ÿßŸÑŸÜŸÖÿ∑',
        style_realistic: 'ŸàÿßŸÇÿπŸä',
        style_artistic: 'ŸÅŸÜŸä',
        style_cartoon: 'ŸÉÿ±ÿ™ŸàŸÜŸä',
        style_fantasy: 'ÿÆŸäÿßŸÑŸä',
        style_anime: 'ÿ£ŸÜŸÖŸä',
        style_cyberpunk: 'ÿ≥ÿßŸäÿ®ÿ±ÿ®ÿßŸÜŸÉ',
        mode_label: 'ÿßŸÑŸàÿ∂ÿπ',
        mode_print_maker: 'ÿ∑ÿ®ÿßÿπÿ©/ŸÖŸÑÿµŸÇÿßÿ™',
        mode_fast_generation: 'ÿ™ŸàŸÑŸäÿØ ÿ≥ÿ±Ÿäÿπ',
        mode_pixplace_pro: 'pixPLace Pro (ŸäÿØÿπŸÖ ÿßŸÑŸÜÿµŸàÿµ)',
        size_label: 'ÿßŸÑÿ≠ÿ¨ŸÖ',
        size_square: '1:1',
        size_portrait: '9:16',
        size_landscape: '16:9',
        generate_btn: 'ÿ•ŸÜÿ¥ÿßÿ° ÿµŸàÿ±ÿ©',
        processing_title: 'ÿ¨ÿßÿ±Ÿä ÿ•ŸÜÿ¥ÿßÿ° ÿ™ÿ≠ŸÅÿ™ŸÉ',
        processing_subtitle: 'ŸÇÿØ Ÿäÿ≥ÿ™ÿ∫ÿ±ŸÇ ÿ∞ŸÑŸÉ ŸÖÿß ŸäÿµŸÑ ÿ•ŸÑŸâ 60 ÿ´ÿßŸÜŸäÿ©',
        step_analyzing: 'ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑŸàÿµŸÅ',
        step_generating: 'ÿ¨ÿßÿ±Ÿç ÿßŸÑÿ™ŸàŸÑŸäÿØ',
        step_finalizing: 'ÿ¨ÿßÿ±Ÿç ÿßŸÑÿ•ŸÜŸáÿßÿ°',
        elapsed_time: 'ÿßŸÑŸàŸÇÿ™ ÿßŸÑŸÖŸÜŸÇÿ∂Ÿä:',
        cancel_btn: 'ÿ•ŸÑÿ∫ÿßÿ°',
        create_new: 'ÿ•ŸÜÿ¥ÿßÿ° ÿ¨ÿØŸäÿØ',
        view_history: 'ÿπÿ±ÿ∂ ÿßŸÑÿ≥ÿ¨ŸÑ',
        history_title: 'ÿ≥ÿ¨ŸÑ ÿßŸÑÿ™ŸàŸÑŸäÿØ',
        empty_history_title: 'ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ™ŸàŸÑŸäÿØÿßÿ™ ÿ®ÿπÿØ',
        empty_history_subtitle: 'ÿ£ŸÜÿ¥ÿ¶ ÿ£ŸàŸÑ ÿµŸàÿ±ÿ© ÿ®ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ŸÑÿπÿ±ÿ∂Ÿáÿß ŸáŸÜÿß',
        generation_time: 'ŸàŸÇÿ™ ÿßŸÑÿ™ŸàŸÑŸäÿØ',
        error_prompt_required: 'Ÿäÿ±ÿ¨Ÿâ ŸàÿµŸÅ ÿßŸÑÿµŸàÿ±ÿ©',
        error_prompt_too_short: 'ÿßŸÑŸàÿµŸÅ ŸÇÿµŸäÿ± ÿ¨ÿØŸãÿß (5 ÿ£ÿ≠ÿ±ŸÅ ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ)',
        error_webhook_not_configured: 'ŸÑŸÖ Ÿäÿ™ŸÖ ÿ™ŸÉŸàŸäŸÜ Webhook',
        error_generation_failed: 'ŸÅÿ¥ŸÑ ÿßŸÑÿ™ŸàŸÑŸäÿØ',
        error_timeout: 'ÿßŸÜÿ™Ÿáÿ™ ÿßŸÑŸÖŸáŸÑÿ©. ÿ≠ÿßŸàŸÑ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ.',
        success_generated: 'ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿµŸàÿ±ÿ© ÿ®ŸÜÿ¨ÿßÿ≠!',
        copied_to_clipboard: 'ÿ™ŸÖ ÿßŸÑŸÜÿ≥ÿÆ ÿ•ŸÑŸâ ÿßŸÑÿ≠ÿßŸÅÿ∏ÿ©',
        download_started: 'ÿ®ÿØÿ£ ÿßŸÑÿ™ŸÜÿ≤ŸäŸÑ',
        limit_title: 'ÿ™ŸÖ ÿ®ŸÑŸàÿ∫ ÿßŸÑÿ≠ÿØ ÿßŸÑÿ£ŸÇÿµŸâ',
        limit_message: 'ŸÑŸÇÿØ ŸàÿµŸÑÿ™ ÿ•ŸÑŸâ ÿßŸÑÿ≠ÿØ ÿßŸÑŸÖÿ¨ÿßŸÜŸä. ŸÇŸÖ ÿ®ÿßŸÑÿ™ÿ±ŸÇŸäÿ© ŸÑŸÖŸàÿßÿµŸÑÿ© ÿ•ŸÜÿ¥ÿßÿ° ÿµŸàÿ± ŸÖÿ∞ŸáŸÑÿ©!',
        check_subsciption: 'ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ',
        closeLimitModal: 'ÿ±ÿ®ŸÖÿß ŸÑÿßÿ≠ŸÇŸãÿß',
        upgradeBtn: 'ŸÇŸÖ ÿ®ÿßŸÑÿ™ÿ±ŸÇŸäÿ© ÿßŸÑÿ¢ŸÜ'
    },
    hi: {
        loading: '‡§Æ‡§ú‡§º‡•á ‡§ï‡•á ‡§∏‡§æ‡§• ‡§¨‡§®‡§æ‡§è‡§Å!',
        app_title: 'pixPLace',
        connecting: '‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...',
        connected: 'Telegram ‡§∏‡•á ‡§ú‡•Å‡§°‡§º ‡§ó‡§Ø‡§æ',
        welcome_title: '‡§∂‡§æ‡§®‡§¶‡§æ‡§∞ ‡§õ‡§µ‡§ø‡§Ø‡§æ‡§Å ‡§¨‡§®‡§æ‡§è‡§Å',
        welcome_subtitle: '‡§Ö‡§™‡§®‡•Ä ‡§ï‡§≤‡•ç‡§™‡§®‡§æ ‡§ï‡§æ ‡§µ‡§∞‡•ç‡§£‡§® ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§¶‡•á‡§ñ‡•á‡§Ç ‡§ï‡§ø AI ‡§â‡§∏‡•á ‡§ú‡•Ä‡§µ‡§® ‡§Æ‡•á‡§Ç ‡§ï‡•à‡§∏‡•á ‡§≤‡§æ‡§§‡§æ ‡§π‡•à',
        prompt_label: '‡§™‡•ç‡§∞‡•â‡§Æ‡•ç‡§™‡•ç‡§ü',
        prompt_placeholder: '‡§∏‡§Æ‡•Å‡§¶‡•ç‡§∞ ‡§™‡§∞ ‡§è‡§ï ‡§∏‡•Å‡§Ç‡§¶‡§∞ ‡§∏‡•Ç‡§∞‡•ç‡§Ø‡§æ‡§∏‡•ç‡§§...',
        style_label: '‡§∂‡•à‡§≤‡•Ä',
        style_realistic: '‡§Ø‡§•‡§æ‡§∞‡•ç‡§•‡§µ‡§æ‡§¶‡•Ä',
        style_artistic: '‡§ï‡§≤‡§æ‡§§‡•ç‡§Æ‡§ï',
        style_cartoon: '‡§ï‡§æ‡§∞‡•ç‡§ü‡•Ç‡§®',
        style_fantasy: '‡§´‡•à‡§Ç‡§ü‡•á‡§∏‡•Ä',
        style_anime: '‡§ê‡§®‡§ø‡§Æ‡•á',
        style_cyberpunk: '‡§∏‡§æ‡§á‡§¨‡§∞‡§™‡§Ç‡§ï',
        mode_label: '‡§Æ‡•ã‡§°',
        mode_print_maker: '‡§™‡•ç‡§∞‡§ø‡§Ç‡§ü/‡§∏‡•ç‡§ü‡§ø‡§ï‡§∞',
        mode_fast_generation: '‡§§‡•á‡§ú‡§º ‡§ú‡§®‡§∞‡•á‡§∂‡§®',
        mode_pixplace_pro: 'pixPLace Pro (‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§∏‡§Æ‡§∞‡•ç‡§•‡§ø‡§§)',
        size_label: '‡§Ü‡§ï‡§æ‡§∞',
        size_square: '1:1',
        size_portrait: '9:16',
        size_landscape: '16:9',
        generate_btn: '‡§õ‡§µ‡§ø ‡§¨‡§®‡§æ‡§è‡§Å',
        processing_title: '‡§Ü‡§™‡§ï‡•Ä ‡§â‡§§‡•ç‡§ï‡•É‡§∑‡•ç‡§ü ‡§ï‡•É‡§§‡§ø ‡§¨‡§®‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç',
        processing_subtitle: '‡§á‡§∏‡§Æ‡•á‡§Ç 60 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§§‡§ï ‡§≤‡§ó ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç',
        step_analyzing: '‡§™‡•ç‡§∞‡•â‡§Æ‡•ç‡§™‡•ç‡§ü ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£',
        step_generating: '‡§õ‡§µ‡§ø ‡§¨‡§®‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç',
        step_finalizing: '‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç',
        elapsed_time: '‡§¨‡•Ä‡§§‡§æ ‡§π‡•Å‡§Ü ‡§∏‡§Æ‡§Ø:',
        cancel_btn: '‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç',
        create_new: '‡§®‡§Ø‡§æ ‡§¨‡§®‡§æ‡§è‡§Å',
        view_history: '‡§á‡§§‡§ø‡§π‡§æ‡§∏ ‡§¶‡•á‡§ñ‡•á‡§Ç',
        history_title: '‡§ú‡§®‡§∞‡•á‡§∂‡§® ‡§á‡§§‡§ø‡§π‡§æ‡§∏',
        empty_history_title: '‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§ï‡•ã‡§à ‡§ú‡§®‡§∞‡•á‡§∂‡§® ‡§®‡§π‡•Ä‡§Ç',
        empty_history_subtitle: '‡§Ö‡§™‡§®‡•Ä ‡§™‡§π‡§≤‡•Ä AI ‡§õ‡§µ‡§ø ‡§¨‡§®‡§æ‡§è‡§Å ‡§î‡§∞ ‡§â‡§∏‡•á ‡§Ø‡§π‡§æ‡§Å ‡§¶‡•á‡§ñ‡•á‡§Ç',
        generation_time: '‡§ú‡§®‡§∞‡•á‡§∂‡§® ‡§∏‡§Æ‡§Ø',
        error_prompt_required: '‡§ï‡•É‡§™‡§Ø‡§æ ‡§õ‡§µ‡§ø ‡§ï‡§æ ‡§µ‡§∞‡•ç‡§£‡§® ‡§ï‡§∞‡•á‡§Ç',
        error_prompt_too_short: '‡§™‡•ç‡§∞‡•â‡§Æ‡•ç‡§™‡•ç‡§ü ‡§¨‡§π‡•Å‡§§ ‡§õ‡•ã‡§ü‡§æ ‡§π‡•à (‡§®‡•ç‡§Ø‡•Ç‡§®‡§§‡§Æ 5 ‡§Ö‡§ï‡•ç‡§∑‡§∞)',
        error_webhook_not_configured: 'Webhook ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à',
        error_generation_failed: '‡§ú‡§®‡§∞‡•á‡§∂‡§® ‡§µ‡§ø‡§´‡§≤ ‡§∞‡§π‡§æ',
        error_timeout: '‡§∏‡§Æ‡§Ø ‡§∏‡•Ä‡§Æ‡§æ ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§',
        success_generated: '‡§õ‡§µ‡§ø ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§¨‡§®‡§æ‡§à ‡§ó‡§à!',
        copied_to_clipboard: '‡§ï‡•ç‡§≤‡§ø‡§™‡§¨‡•ã‡§∞‡•ç‡§° ‡§™‡§∞ ‡§ï‡•â‡§™‡•Ä ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ',
        download_started: '‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•Å‡§Ü',
        limit_title: '‡§∏‡•Ä‡§Æ‡§æ ‡§™‡•Ç‡§∞‡•Ä ‡§π‡•ã ‡§ó‡§à',
        limit_message: '‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡•Å‡§´‡§º‡•ç‡§§ ‡§∏‡•Ä‡§Æ‡§æ ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§π‡•ã ‡§ó‡§à ‡§π‡•à‡•§ ‡§Ö‡§¶‡•ç‡§≠‡•Å‡§§ ‡§õ‡§µ‡§ø‡§Ø‡§æ‡§Å ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡§ó‡•ç‡§∞‡•á‡§° ‡§ï‡§∞‡•á‡§Ç!',
        check_subsciption: '‡§∏‡§¶‡§∏‡•ç‡§Ø‡§§‡§æ ‡§ú‡§æ‡§Å‡§ö‡•á‡§Ç',
        closeLimitModal: '‡§∂‡§æ‡§Ø‡§¶ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç',
        upgradeBtn: '‡§Ö‡§≠‡•Ä ‡§Ö‡§™‡§ó‡•ç‡§∞‡•á‡§° ‡§ï‡§∞‡•á‡§Ç'
    },
    ja: {
        loading: 'Ê•Ω„Åó„Åè‰Ωú„Çä„Åæ„Åó„Çá„ÅÜÔºÅ',
        app_title: 'pixPLace',
        connecting: 'Êé•Á∂ö‰∏≠...',
        connected: 'Telegram„Å´Êé•Á∂ö„Åó„Åæ„Åó„Åü',
        welcome_title: 'È©ö„Åè„Åπ„ÅçÁîªÂÉè„Çí‰ΩúÊàê',
        welcome_subtitle: '„ÅÇ„Å™„Åü„ÅÆ„Éì„Ç∏„Éß„É≥„ÇíË™¨Êòé„Åó„ÄÅAI„Åå„Åù„Çå„ÇíÂÆüÁèæ„Åô„Çã„ÅÆ„ÇíË¶ã„Åæ„Åó„Çá„ÅÜ',
        prompt_label: '„Éó„É≠„É≥„Éó„Éà',
        prompt_placeholder: 'Êµ∑„Å´Ê≤à„ÇÄÁæé„Åó„ÅÑÂ§ïÊó•...',
        style_label: '„Çπ„Çø„Ç§„É´',
        style_realistic: '„É™„Ç¢„É´',
        style_artistic: '„Ç¢„Éº„Éà',
        style_cartoon: '„Ç´„Éº„Éà„Ç•„Éº„É≥',
        style_fantasy: '„Éï„Ç°„É≥„Çø„Ç∏„Éº',
        style_anime: '„Ç¢„Éã„É°',
        style_cyberpunk: '„Çµ„Ç§„Éê„Éº„Éë„É≥„ÇØ',
        mode_label: '„É¢„Éº„Éâ',
        mode_print_maker: '„Éó„É™„É≥„Éà/„Çπ„ÉÜ„ÉÉ„Ç´„Éº',
        mode_fast_generation: 'È´òÈÄüÁîüÊàê',
        mode_pixplace_pro: 'pixPLace Pro („ÉÜ„Ç≠„Çπ„ÉàÂØæÂøú)',
        size_label: '„Çµ„Ç§„Ç∫',
        size_square: '1:1',
        size_portrait: '9:16',
        size_landscape: '16:9',
        generate_btn: 'ÁîªÂÉè„ÇíÁîüÊàê',
        processing_title: '„ÅÇ„Å™„Åü„ÅÆÂÇë‰Ωú„Çí‰ΩúÊàê‰∏≠',
        processing_subtitle: 'ÊúÄÂ§ß60Áßí„Åã„Åã„ÇãÂ†¥Âêà„Åå„ÅÇ„Çä„Åæ„Åô',
        step_analyzing: '„Éó„É≠„É≥„Éó„Éà„ÇíÂàÜÊûê‰∏≠',
        step_generating: 'ÁîªÂÉè„ÇíÁîüÊàê‰∏≠',
        step_finalizing: 'ÁµêÊûú„Çí‰ªï‰∏ä„Åí„Å¶„ÅÑ„Åæ„Åô',
        elapsed_time: 'ÁµåÈÅéÊôÇÈñìÔºö',
        cancel_btn: '„Ç≠„É£„É≥„Çª„É´',
        create_new: 'Êñ∞„Åó„Åè‰ΩúÊàê',
        view_history: 'Â±•Ê≠¥„ÇíË¶ã„Çã',
        history_title: 'ÁîüÊàêÂ±•Ê≠¥',
        empty_history_title: '„Åæ„Å†ÁîüÊàê„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì',
        empty_history_subtitle: 'ÊúÄÂàù„ÅÆAIÁîªÂÉè„Çí‰ΩúÊàê„Åó„Å¶„Åì„Åì„Å´Ë°®Á§∫„Åó„Åæ„Åó„Çá„ÅÜ',
        generation_time: 'ÁîüÊàêÊôÇÈñì',
        error_prompt_required: 'ÁîªÂÉè„ÇíË™¨Êòé„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
        error_prompt_too_short: '„Éó„É≠„É≥„Éó„Éà„ÅåÁü≠„Åô„Åé„Åæ„ÅôÔºàÊúÄÂ∞è5ÊñáÂ≠óÔºâ',
        error_webhook_not_configured: 'Webhook„ÅåÊú™Ë®≠ÂÆö„Åß„Åô',
        error_generation_failed: 'ÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü',
        error_timeout: '„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü„ÄÇÂÜçË©¶Ë°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
        success_generated: 'ÁîªÂÉè„ÅåÊ≠£Â∏∏„Å´ÁîüÊàê„Åï„Çå„Åæ„Åó„ÅüÔºÅ',
        copied_to_clipboard: '„ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Å´„Ç≥„Éî„Éº„Åó„Åæ„Åó„Åü',
        download_started: '„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü',
        limit_title: 'ÁîüÊàêÂà∂Èôê„Å´ÈÅî„Åó„Åæ„Åó„Åü',
        limit_message: 'ÁÑ°ÊñôÂà∂Èôê„Å´ÈÅî„Åó„Åæ„Åó„Åü„ÄÇ„Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ„Åó„Å¶„Åï„Çâ„Å´Á¥†Êô¥„Çâ„Åó„ÅÑÁîªÂÉè„Çí‰ΩúÊàê„Åó„Åæ„Åó„Çá„ÅÜÔºÅ',
        check_subsciption: '„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥„ÇíÁ¢∫Ë™ç',
        closeLimitModal: 'Âæå„Åß',
        upgradeBtn: '‰ªä„Åô„Åê„Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ'
    },
    it: {
        loading: 'Crea con piacere!',
        app_title: 'pixPLace',
        connecting: 'Connessione...',
        connected: 'Connesso a Telegram',
        welcome_title: 'Crea Immagini Straordinarie',
        welcome_subtitle: 'Descrivi la tua visione e guarda l‚ÄôIA darle vita',
        prompt_label: 'Prompt',
        prompt_placeholder: 'Un bellissimo tramonto sull‚Äôoceano...',
        style_label: 'Stile',
        style_realistic: 'Realistico',
        style_artistic: 'Artistico',
        style_cartoon: 'Cartone animato',
        style_fantasy: 'Fantasy',
        style_anime: 'Anime',
        style_cyberpunk: 'Cyberpunk',
        mode_label: 'Modalit√†',
        mode_print_maker: 'Stampe/Sticker',
        mode_fast_generation: 'Generazione veloce',
        mode_pixplace_pro: 'pixPLace Pro (Supporto Testo/Logos)',
        size_label: 'Dimensione',
        size_square: '1:1',
        size_portrait: '9:16',
        size_landscape: '16:9',
        generate_btn: 'Genera Immagine',
        processing_title: 'Creazione del tuo capolavoro',
        processing_subtitle: 'Pu√≤ richiedere fino a 60 secondi',
        step_analyzing: 'Analisi del prompt',
        step_generating: 'Generazione immagine',
        step_finalizing: 'Finalizzazione risultato',
        elapsed_time: 'Tempo trascorso:',
        cancel_btn: 'Annulla',
        create_new: 'Crea Nuovo',
        view_history: 'Vedi Cronologia',
        history_title: 'Cronologia Generazioni',
        empty_history_title: 'Ancora nessuna generazione',
        empty_history_subtitle: 'Crea la tua prima immagine AI per vederla qui',
        generation_time: 'Tempo di generazione',
        error_prompt_required: 'Per favore descrivi la tua immagine',
        error_prompt_too_short: 'Prompt troppo breve (minimo 5 caratteri)',
        error_webhook_not_configured: 'Webhook non configurato',
        error_generation_failed: 'Generazione fallita',
        error_timeout: 'Timeout. Riprova.',
        success_generated: 'Immagine generata con successo!',
        copied_to_clipboard: 'Copiato negli appunti',
        download_started: 'Download avviato',
        limit_title: 'Limite Generazioni Raggiunto',
        limit_message: 'Hai raggiunto il limite gratuito. Aggiorna per continuare a creare immagini straordinarie!',
        check_subsciption: 'Controlla Abbonamento',
        closeLimitModal: 'Forse pi√π tardi',
        upgradeBtn: 'Aggiorna ora'
    },
    ko: {
        loading: 'Ï¶êÍ≤ÅÍ≤å Ï∞ΩÏûëÌïòÏÑ∏Ïöî!',
        app_title: 'pixPLace',
        connecting: 'Ïó∞Í≤∞ Ï§ë...',
        connected: 'TelegramÏóê Ïó∞Í≤∞Îê®',
        welcome_title: 'ÎÜÄÎùºÏö¥ Ïù¥ÎØ∏ÏßÄÎ•º ÏÉùÏÑ±ÌïòÏÑ∏Ïöî',
        welcome_subtitle: 'ÎπÑÏ†ÑÏùÑ ÏÑ§Î™ÖÌïòÎ©¥ AIÍ∞Ä ÌòÑÏã§Î°ú ÎßåÎì§Ïñ¥ ÎìúÎ¶ΩÎãàÎã§',
        prompt_label: 'ÌîÑÎ°¨ÌîÑÌä∏',
        prompt_placeholder: 'Î∞îÎã§ ÏúÑÏùò ÏïÑÎ¶ÑÎã§Ïö¥ ÏÑùÏñë...',
        style_label: 'Ïä§ÌÉÄÏùº',
        style_realistic: 'Î¶¨ÏñºÎ¶¨Ï¶ò',
        style_artistic: 'ÏïÑÌä∏',
        style_cartoon: 'ÎßåÌôî',
        style_fantasy: 'ÌåêÌÉÄÏßÄ',
        style_anime: 'Ïï†ÎãàÎ©îÏù¥ÏÖò',
        style_cyberpunk: 'ÏÇ¨Ïù¥Î≤ÑÌéëÌÅ¨',
        mode_label: 'Î™®Îìú',
        mode_print_maker: 'ÌîÑÎ¶∞Ìä∏/Ïä§Ìã∞Ïª§',
        mode_fast_generation: 'Îπ†Î•∏ ÏÉùÏÑ±',
        mode_pixplace_pro: 'pixPLace Pro (ÌÖçÏä§Ìä∏ ÏßÄÏõê)',
        size_label: 'ÌÅ¨Í∏∞',
        size_square: '1:1',
        size_portrait: '9:16',
        size_landscape: '16:9',
        generate_btn: 'Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±',
        processing_title: 'Í±∏ÏûëÏùÑ ÎßåÎìúÎäî Ï§ë',
        processing_subtitle: 'ÏµúÎåÄ 60Ï¥àÍ∞Ä Í±∏Î¶¥ Ïàò ÏûàÏäµÎãàÎã§',
        step_analyzing: 'ÌîÑÎ°¨ÌîÑÌä∏ Î∂ÑÏÑù Ï§ë',
        step_generating: 'Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ï§ë',
        step_finalizing: 'Í≤∞Í≥º ÎßàÎ¨¥Î¶¨ Ï§ë',
        elapsed_time: 'Í≤ΩÍ≥º ÏãúÍ∞Ñ:',
        cancel_btn: 'Ï∑®ÏÜå',
        create_new: 'ÏÉàÎ°ú ÎßåÎì§Í∏∞',
        view_history: 'Í∏∞Î°ù Î≥¥Í∏∞',
        history_title: 'ÏÉùÏÑ± Í∏∞Î°ù',
        empty_history_title: 'ÏïÑÏßÅ ÏÉùÏÑ±Îêú Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏóÜÏäµÎãàÎã§',
        empty_history_subtitle: 'Ï≤´ Î≤àÏß∏ AI Ïù¥ÎØ∏ÏßÄÎ•º ÏÉùÏÑ±ÌïòÏó¨ Ïó¨Í∏∞ÏóêÏÑú ÌôïÏù∏ÌïòÏÑ∏Ïöî',
        generation_time: 'ÏÉùÏÑ± ÏãúÍ∞Ñ',
        error_prompt_required: 'Ïù¥ÎØ∏ÏßÄÎ•º ÏÑ§Î™ÖÌï¥ Ï£ºÏÑ∏Ïöî',
        error_prompt_too_short: 'ÌîÑÎ°¨ÌîÑÌä∏Í∞Ä ÎÑàÎ¨¥ ÏßßÏäµÎãàÎã§ (ÏµúÏÜå 5Ïûê)',
        error_webhook_not_configured: 'WebhookÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå',
        error_generation_failed: 'ÏÉùÏÑ± Ïã§Ìå®',
        error_timeout: 'ÏãúÍ∞Ñ Ï¥àÍ≥º. Îã§Ïãú ÏãúÎèÑÌïòÏÑ∏Ïöî.',
        success_generated: 'Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!',
        copied_to_clipboard: 'ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨Îê®',
        download_started: 'Îã§Ïö¥Î°úÎìú ÏãúÏûëÎê®',
        limit_title: 'ÏÉùÏÑ± ÌïúÎèÑ ÎèÑÎã¨',
        limit_message: 'Î¨¥Î£å ÌïúÎèÑÏóê ÎèÑÎã¨ÌñàÏäµÎãàÎã§. ÏóÖÍ∑∏Î†àÏù¥ÎìúÌïòÏó¨ Í≥ÑÏÜç Î©ãÏßÑ Ïù¥ÎØ∏ÏßÄÎ•º ÎßåÎìúÏÑ∏Ïöî!',
        check_subsciption: 'Íµ¨ÎèÖ ÌôïÏù∏',
        closeLimitModal: 'ÎÇòÏ§ëÏóê',
        upgradeBtn: 'ÏßÄÍ∏à ÏóÖÍ∑∏Î†àÏù¥Îìú'
    },
    tr: {
        loading: 'Eƒülenerek olu≈üturun!',
        app_title: 'pixPLace',
        connecting: 'Baƒülanƒ±yor...',
        connected: 'Telegram‚Äôa baƒülandƒ±',
        welcome_title: 'Harika G√∂rseller Yaratƒ±n',
        welcome_subtitle: 'Vizyonunuzu a√ßƒ±klayƒ±n ve yapay zek√¢nƒ±n onu ger√ßeƒüe d√∂n√º≈üt√ºrmesini izleyin',
        prompt_label: 'Prompt',
        prompt_placeholder: 'Okyanus √ºzerinde g√ºzel bir g√ºn batƒ±mƒ±...',
        style_label: 'Stil',
        style_realistic: 'Ger√ßek√ßi',
        style_artistic: 'Sanatsal',
        style_cartoon: '√áizgi film',
        style_fantasy: 'Fantastik',
        style_anime: 'Anime',
        style_cyberpunk: 'Siberpunk',
        mode_label: 'Mod',
        mode_print_maker: 'Baskƒ±/Sticker',
        mode_fast_generation: 'Hƒ±zlƒ± √úretim',
        mode_pixplace_pro: 'pixPLace Pro (Metin Destekli)',
        size_label: 'Boyut',
        size_square: '1:1',
        size_portrait: '9:16',
        size_landscape: '16:9',
        generate_btn: 'G√∂rsel √úret',
        processing_title: 'Ba≈ü Yapƒ±tƒ±nƒ±z Olu≈üturuluyor',
        processing_subtitle: 'Bu i≈ülem 60 saniyeye kadar s√ºrebilir',
        step_analyzing: 'Prompt analiz ediliyor',
        step_generating: 'G√∂rsel √ºretiliyor',
        step_finalizing: 'Sonu√ß tamamlanƒ±yor',
        elapsed_time: 'Ge√ßen s√ºre:',
        cancel_btn: 'ƒ∞ptal',
        create_new: 'Yeni Olu≈ütur',
        view_history: 'Ge√ßmi≈üi G√∂r',
        history_title: '√úretim Ge√ßmi≈üi',
        empty_history_title: 'Hen√ºz √ºretim yok',
        empty_history_subtitle: 'ƒ∞lk yapay zek√¢ g√∂rselinizi olu≈üturun ve burada g√∂r√ºn',
        generation_time: '√úretim s√ºresi',
        error_prompt_required: 'L√ºtfen g√∂rselinizi tanƒ±mlayƒ±n',
        error_prompt_too_short: 'Prompt √ßok kƒ±sa (en az 5 karakter)',
        error_webhook_not_configured: 'Webhook yapƒ±landƒ±rƒ±lmadƒ±',
        error_generation_failed: '√úretim ba≈üarƒ±sƒ±z',
        error_timeout: 'Zaman a≈üƒ±mƒ±. Tekrar deneyin.',
        success_generated: 'G√∂rsel ba≈üarƒ±yla √ºretildi!',
        copied_to_clipboard: 'Panoya kopyalandƒ±',
        download_started: 'ƒ∞ndirme ba≈üladƒ±',
        limit_title: '√úretim Limiti A≈üƒ±ldƒ±',
        limit_message: '√úcretsiz limitinize ula≈ütƒ±nƒ±z. Harika g√∂rseller olu≈üturmaya devam etmek i√ßin y√ºkseltin!',
        check_subsciption: 'Aboneliƒüi Kontrol Et',
        closeLimitModal: 'Belki Sonra',
        upgradeBtn: '≈ûimdi Y√ºkselt'
    },
    pl: {
        loading: 'Tw√≥rz z Przyjemno≈õciƒÖ!',
        app_title: 'pixPLace',
        connecting: '≈ÅƒÖczenie...',
        connected: 'Po≈ÇƒÖczono z Telegramem',
        welcome_title: 'Tw√≥rz Niesamowite Obrazy',
        welcome_subtitle: 'Opisz swojƒÖ wizjƒô i obserwuj, jak pixPLace o≈ºywia jƒÖ dziƒôki AI',
        prompt_label: 'Prompt',
        prompt_placeholder: 'Piƒôkny zach√≥d s≈Ço≈Ñca nad oceanem...',
        style_label: 'Styl',
        style_realistic: 'Realistyczny',
        style_artistic: 'Artystyczny',
        style_cartoon: 'Kresk√≥wkowy',
        style_fantasy: 'Fantasy',
        style_anime: 'Anime',
        style_cyberpunk: 'Cyberpunk',
        mode_label: 'Tryb',
        mode_print_maker: 'Druki/Naklejki',
        mode_fast_generation: 'Szybka Generacja',
        mode_pixplace_pro: 'pixPLace Pro (Logo/Tekst/Zdjƒôcie)',
        size_label: 'Rozmiar',
        size_square: '1:1',
        size_portrait: '9:16',
        size_landscape: '16:9',
        generate_btn: 'Wygeneruj Obraz',
        processing_title: 'Tworzymy Tw√≥j Arcydzie≈Ço',
        processing_subtitle: 'Mo≈ºe to potrwaƒá do 60 sekund',
        step_analyzing: 'Analizujemy prompt',
        step_generating: 'Generujemy obraz',
        step_finalizing: 'Finalizujemy wynik',
        elapsed_time: 'Up≈Çynƒô≈Ço czasu:',
        cancel_btn: 'Anuluj',
        create_new: 'Stw√≥rz Nowy',
        view_history: 'Zobacz Historiƒô',
        history_title: 'Historia Generacji',
        empty_history_title: 'Brak wygenerowanych obraz√≥w',
        empty_history_subtitle: 'Stw√≥rz sw√≥j pierwszy obraz AI, aby zobaczyƒá go tutaj',
        generation_time: 'Czas generacji',
        error_prompt_required: 'Proszƒô opisaƒá obraz',
        error_prompt_too_short: 'Opis za kr√≥tki (minimum 5 znak√≥w)',
        error_webhook_not_configured: 'Adres URL webhooka nie jest skonfigurowany',
        error_generation_failed: 'Generacja nie powiod≈Ça siƒô',
        error_timeout: 'Przekroczono limit czasu. Spr√≥buj ponownie.',
        success_generated: 'Obraz zosta≈Ç wygenerowany pomy≈õlnie!',
        copied_to_clipboard: 'Skopiowano do schowka',
        download_started: 'Rozpoczƒôto pobieranie',
        limit_title: 'Limit Generacji Wyczerpany',
        limit_message: 'Sko≈Ñczy≈Çy Ci siƒô darmowe generacje! Mo≈ºesz zdobyƒá wiƒôcej, kupujƒÖc subskrypcjƒô pixPLace.',
        check_subsciption: 'Sprawd≈∫ Subskrypcjƒô',
        closeLimitModal: 'Mo≈ºe P√≥≈∫niej',
        upgradeBtn: 'Ulepsz Teraz'
    }
};

// üéØ App State
class AppState {
    constructor() {
        this.tg = null;
        this.currentLanguage = CONFIG.DEFAULT_LANGUAGE;
        this.currentTheme = 'dark';
        this.selectedStyle = 'realistic';
        this.isGenerating = false;
        this.userId = null;
        this.userName = null;
        this.generationHistory = [];
        this.currentGeneration = null;
        this.startTime = null;
        this.timerInterval = null;
    }

    // Language methods
    setLanguage(lang) {
        if (CONFIG.LANGUAGES.includes(lang)) {
            this.currentLanguage = lang;
            document.body.setAttribute('data-lang', lang);
            this.updateTranslations();
            this.saveSettings();
        }
    }

    toggleLanguage() {
        const currentIndex = CONFIG.LANGUAGES.indexOf(this.currentLanguage);
        const nextIndex = (currentIndex + 1) % CONFIG.LANGUAGES.length;
        this.setLanguage(CONFIG.LANGUAGES[nextIndex]);
    }

    translate(key) {
        return TRANSLATIONS[this.currentLanguage]?.[key] || TRANSLATIONS[CONFIG.DEFAULT_LANGUAGE]?.[key] || key;
    }

    updateTranslations() {
        document.querySelectorAll('[data-i18n]').forEach(element => {
            const key = element.getAttribute('data-i18n');
            element.textContent = this.translate(key);
        });

        document.querySelectorAll('[data-i18n-placeholder]').forEach(element => {
            const key = element.getAttribute('data-i18n-placeholder');
            element.placeholder = this.translate(key);
        });
    }

    // Theme methods
    setTheme(theme) {
        this.currentTheme = theme;
        document.body.setAttribute('data-theme', theme);
        this.saveSettings();
    }

    toggleTheme() {
        const themes = ['light', 'dark', 'auto'];
        const currentIndex = themes.indexOf(this.currentTheme);
        const nextIndex = (currentIndex + 1) % themes.length;
        this.setTheme(themes[nextIndex]);
    }
    // Storage methods
    saveSettings() {
        try {
            localStorage.setItem('appSettings', JSON.stringify({
                language: this.currentLanguage,
                theme: this.currentTheme
            }));
        } catch (error) {
            console.error('Failed to save settings:', error);
        }
    }

    loadSettings() {
        try {
            const settings = JSON.parse(localStorage.getItem('appSettings') || '{}');
            if (settings.language) this.setLanguage(settings.language);
            if (settings.theme) this.setTheme(settings.theme);
        } catch (error) {
            console.error('Failed to load settings:', error);
        }
    }

    saveHistory() {
        try {
            localStorage.setItem('generationHistory', JSON.stringify(this.generationHistory));
        } catch (error) {
            console.error('Failed to save history:', error);
        }
    }

    loadHistory() {
        try {
            const history = localStorage.getItem('generationHistory');
            if (history) {
                this.generationHistory = JSON.parse(history);
            }
        } catch (error) {
            console.error('Failed to load history:', error);
            this.generationHistory = [];
        }
    }
}

// üéØ Global state
const appState = new AppState();



// üéØ Utility Functions
function showStatus(type, message) {
    const statusBar = document.getElementById('statusBar');
    const statusText = document.querySelector('.status-text');

    if (statusBar && statusText) {
        statusText.textContent = message;
        statusBar.className = `status-bar ${type} show`;

        setTimeout(() => {
            statusBar.classList.remove('show');
        }, 3000);
    }
}

function showToast(type, message) {
    const container = document.getElementById('toastContainer');
    if (!container) return;

    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    toast.textContent = message;

    container.appendChild(toast);

    // Trigger animation
    setTimeout(() => toast.classList.add('show'), 100);

    // Remove after delay
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => container.removeChild(toast), 300);
    }, 3000);
}

function triggerHaptic(type) {
    if (appState.tg?.HapticFeedback) {
        switch (type) {
            case 'light':
                appState.tg.HapticFeedback.impactOccurred('light');
                break;
            case 'medium':
                appState.tg.HapticFeedback.impactOccurred('medium');
                break;
            case 'heavy':
                appState.tg.HapticFeedback.impactOccurred('heavy');
                break;
            case 'success':
                appState.tg.HapticFeedback.notificationOccurred('success');
                break;
            case 'error':
                appState.tg.HapticFeedback.notificationOccurred('error');
                break;
        }
    }
}
// üìä Processing Animation
function updateProcessingSteps(activeStep) {
    document.querySelectorAll('.step').forEach((step, index) => {
        if (index + 1 <= activeStep) {
            step.classList.add('active');
        } else {
            step.classList.remove('active');
        }
    });

    // Update progress circle
    const progressCircle = document.querySelector('.progress-circle');
    if (progressCircle) {
        const progress = (activeStep / 3) * 283; // 283 is circumference
        progressCircle.style.strokeDashoffset = 283 - progress;
    }
}
function updateProgressBar(elapsed) {
    const progressBar = document.querySelector('.progress-bar');
    const progressFill = document.querySelector('.progress-fill');

    if (progressBar && progressFill) {
        // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ (0-100%)
        const maxTime = 60; // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        const progress = Math.min((elapsed / maxTime) * 100, 100);
        progressFill.style.width = progress + '%';
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –∫—Ä—É–≥–æ–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å, –µ—Å–ª–∏ –µ—Å—Ç—å
    const progressCircle = document.querySelector('.progress-circle');
    if (progressCircle) {
        const circumference = 283; // –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å –∫—Ä—É–≥–∞
        const progress = Math.min((elapsed / 60) * 100, 100);
        const offset = circumference - (progress / 100) * circumference;
        progressCircle.style.strokeDashoffset = offset;
    }
}
function startTimer() {
    const elapsedTimeElement = document.getElementById('elapsedTime');
    let step = 1;

    appState.timerInterval = setInterval(() => {
        const elapsed = Math.floor((Date.now() - appState.startTime) / 1000);
        if (elapsedTimeElement) {
            elapsedTimeElement.textContent = elapsed + 's';
        }
        updateProgressBar(elapsed);
        // Update steps based on time

    }, 1000);
}

function stopTimer() {
    if (appState.timerInterval) {
        clearInterval(appState.timerInterval);
        appState.timerInterval = null;
    }
}

// üìã History Management

function showBackButton(show) {
    const body = document.body;
    if (show) {
        body.classList.add('show-back');
    } else {
        body.classList.remove('show-back');
    }
}
function updateHistoryDisplay() {
    const historyContent = document.getElementById('historyContent');
    if (!historyContent) return;

    if (appState.generationHistory.length === 0) {
        historyContent.innerHTML = `
    <div class="empty-history">
    <div class="empty-icon">üìã</div>
    <h3 data-i18n="empty_history_title">${appState.translate('empty_history_title')}</h3>
    <p data-i18n="empty_history_subtitle">${appState.translate('empty_history_subtitle')}</p>
    </div>
    `;
        return;
    }

    historyContent.innerHTML = appState.generationHistory.map(item => `
    <div class="history-item" onclick="viewHistoryItem('${item.id}')">
    <div class="history-header">
    <span class="history-date">${new Date(item.timestamp).toLocaleString()}</span>
    <span class="history-status ${item.status}">${getStatusText(item.status)}</span>
    </div>
    <div class="history-prompt">${item.prompt}</div>
    <div class="history-details">
    <span class="info-pair">
    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#FFFF"><path d="M480-80q-82 0-155-31.5t-127.5-86Q143-252 111.5-325T80-480q0-83 32.5-156t88-127Q256-817 330-848.5T488-880q80 0 151 27.5t124.5 76q53.5 48.5 85 115T880-518q0 115-70 176.5T640-280h-74q-9 0-12.5 5t-3.5 11q0 12 15 34.5t15 51.5q0 50-27.5 74T480-80Zm0-400Zm-220 40q26 0 43-17t17-43q0-26-17-43t-43-17q-26 0-43 17t-17 43q0 26 17 43t43 17Zm120-160q26 0 43-17t17-43q0-26-17-43t-43-17q-26 0-43 17t-17 43q0 26 17 43t43 17Zm200 0q26 0 43-17t17-43q0-26-17-43t-43-17q-26 0-43 17t-17 43q0 26 17 43t43 17Zm120 160q26 0 43-17t17-43q0-26-17-43t-43-17q-26 0-43 17t-17 43q0 26 17 43t43 17ZM480-160q9 0 14.5-5t5.5-13q0-14-15-33t-15-57q0-42 29-67t71-25h70q66 0 113-38.5T800-518q0-121-92.5-201.5T488-800q-136 0-232 93t-96 227q0 133 93.5 226.5T480-160Z"/></svg>
    ${appState.translate('style_' + item.style)}
    </span>
    <span class="info-pair">
    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#FFFF"><path d="M240-40v-329L110-580l185-300h370l185 300-130 211v329l-240-80-240 80Zm80-111 160-53 160 53v-129H320v129Zm20-649L204-580l136 220h280l136-220-136-220H340Zm98 383L296-558l57-57 85 85 169-170 57 56-226 227ZM320-280h320-320Z"/></svg>
    ${appState.translate('mode_' + item.mode)}
    </span>
    ${item.duration ? `<span> ‚è± ${Math.round(item.duration / 1000)}s</span>` : ''}
    </div>
    ${item.result ? `<img src="${item.result}" alt="Generated" class="history-image" loading="lazy" />` : ''}
    ${item.error ? `<p style="color: var(--error-500); font-size: var(--font-size-sm); margin-top: var(--space-2);">‚ùå ${item.error}</p>` : ''}
    </div>
    `).join('');
    showBackButton(true); // –ø–æ–∫–∞–∑–∞—Ç—å

}

function getStatusText(status) {
    switch (status) {
        case 'processing': return '‚è≥';
        case 'success': return '‚úÖ';
        case 'error': return '‚ùå';
        default: return status;
    }
}

function viewHistoryItem(id) {
    const item = appState.generationHistory.find(h => h.id == id);
    if (item && item.result) {
        appState.currentGeneration = item;
        showResult({ image_url: item.result });
    }
}

function clearHistory() {
    if (confirm('Clear all generation history?')) {
        appState.generationHistory = [];
        appState.saveHistory();
        updateHistoryDisplay();
        triggerHaptic('medium');
    }
}
function showHistory() {
    showScreen('historyScreen');
    updateHistoryDisplay();
}

// üñºÔ∏è UI Initialization
// üé¨ Screen Management
function showLoadingScreen() {
    document.getElementById('loadingScreen').classList.add('active');
}

function hideLoadingScreen() {
    document.getElementById('loadingScreen').classList.remove('active');
}

function showApp() {
    document.getElementById('app').classList.add('loaded');
}
function getCurrentScreen() {
    const generationEl = document.getElementById('generationScreen');
    const processingEl = document.getElementById('processingScreen');
    const resultEl = document.getElementById('resultScreen');
    const historyEl = document.getElementById('historyScreen');

    const isVisible = el => {
        if (!el) return false;
        const cs = window.getComputedStyle(el);
        if (el.classList.contains('hidden')) return false;
        return cs.display !== 'none' && cs.visibility !== 'hidden' && cs.opacity !== '0';
    };

    if (isVisible(resultEl)) return 'result';
    if (isVisible(processingEl)) return 'processing';
    if (isVisible(historyEl)) return 'history';
    if (isVisible(generationEl)) return 'generation';
    return 'unknown';
}

/*
function showScreen(screenId) {
    // Hide all screens
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });

    // Show target screen
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.classList.add('active');
    }
    if (!targetScreen) { console.error('Screen not found:', screenId); return; }

    // Update main button
    //updateMainButton(screenId);
}
*/

function showScreen(screenId) {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
    const targetScreen = document.getElementById(screenId);
    if (!targetScreen) {
        console.error('Screen not found:', screenId);
        return;
    }

    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
        screen.classList.add('hidden'); // –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø—Ä—è—á–µ–º
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π
    targetScreen.classList.remove('hidden');
    targetScreen.classList.add('active');
}


function showProcessing() {
    showScreen('processingScreen');
    updateProcessingSteps(1);
    console.log('--- –ü—Ä–æ–≤–µ—Ä–∫–∞ processingScreen ---');
    const proc = document.getElementById('processingScreen');
    if (!proc) {
        console.error('‚ùå –ù–µ—Ç –±–ª–æ–∫–∞ #processingScreen –≤ DOM');
    } else {
        console.log('‚úÖ –ù–∞—à—ë–ª processingScreen:', proc);
        console.log('–ö–ª–∞—Å—Å—ã:', proc.className);
        console.log('display:', getComputedStyle(proc).display);
        console.log('opacity:', getComputedStyle(proc).opacity);
        console.log('transform:', getComputedStyle(proc).transform);
        console.log('innerHTML –¥–ª–∏–Ω–∞:', proc.innerHTML.length);
    }

    console.log('after showProcessing ->', getCurrentScreen());
}

function showResult(result) {
    showScreen('resultScreen');

    // Update result display
    const resultImage = document.getElementById('resultImage');
    const resultPrompt = document.getElementById('resultPrompt');
    const resultStyle = document.getElementById('resultStyle');
    const resultMode = document.getElementById('resultMode');
    const resultTime = document.getElementById('resultTime');

    if (resultImage) resultImage.src = result.image_url;
    if (resultPrompt) resultPrompt.textContent = appState.currentGeneration.prompt;
    if (resultStyle) resultStyle.textContent = appState.translate('style_' + appState.currentGeneration.style);
    if (resultMode) resultMode.textContent = appState.translate('mode_' + appState.currentGeneration.mode);
    if (resultTime) {
        const duration = Math.round((appState.currentGeneration.duration || 0) / 1000);
        resultTime.textContent = duration + 's';
    }

    console.log('after showResult ->', getCurrentScreen());
}

function showSubscriptionNotice(result) {
    console.log('üîó Full result object:', result);
    const paymentUrl = result.payment_url || 'https://t.me/tribute/app?startapp=syDv';
    console.log('üîó Payment URL from result:', paymentUrl);

    const modal = document.getElementById('limitModal');
    if (!modal) {
        console.error('‚ùå Modal not found!');
        return;
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    modal.classList.add('show');

    // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã
    const upgradeBtn = document.getElementById('upgradeBtn');
    console.log('üîò Upgrade button found:', !!upgradeBtn);
    if (upgradeBtn) {
        console.log('üîò Setting up button click handler');
        upgradeBtn.onclick = () => {
            console.log('üîò Upgrade button clicked');

            // –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            modal.classList.remove('show');
            showGeneration();
            // –ó–∞—Ç–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É
            setTimeout(() => {
                try {
                    console.log('üîó Redirecting to payment URL...');
                    window.location.href = paymentUrl;
                } catch (error) {
                    console.error('‚ùå Error redirecting to payment link:', error);
                    alert('Error opening payment link. Please try again.');
                }
            }, 100); // 100 –º—Å –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ UI
        };
    }

    // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
    const closeBtn = document.getElementById('closeLimitModal');
    if (closeBtn) {
        closeBtn.onclick = () => {
            modal.classList.remove('show');
            showGeneration(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
        };
    }
}

/*function showGeneration() {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    document.getElementById('generationScreen').classList.add('active');
    showBackButton(false);
*/
function showGeneration() {
    const screens = document.querySelectorAll('.screen');
    screens.forEach(s => {
        s.classList.remove('active');
        s.classList.add('hidden');
    });

    const gen = document.getElementById('generationScreen');
    if (!gen) {
        console.warn('generationScreen –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    gen.classList.remove('hidden');
    gen.classList.add('active');

    showBackButton(false);
}


// üé® UI Initialization
function initializeUI() {
    // Character counter
    const promptInput = document.getElementById('promptInput');
    const charCounter = document.getElementById('charCounter');

    if (promptInput && charCounter) {
        promptInput.addEventListener('input', function () {
            charCounter.textContent = this.value.length;

            // Auto-resize
            this.style.height = 'auto';
            this.style.height = this.scrollHeight + 'px';
        });
    }

    // Form submission
    const form = document.querySelector('.generation-form');
    if (form) {
        form.addEventListener('submit', generateImage);
    }

    // Update translations
    appState.updateTranslations();

    console.log('‚úÖ UI initialized');
}

// ===== –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: —Å–æ—Å—Ç–æ—è–Ω–∏–µ =====
const userImageState = {
    file: null,        // File
    dataUrl: null,     // data:image/...;base64,...
    uploadedUrl: null, // –ø—É–±–ª–∏—á–Ω—ã–π URL –æ—Ç imgbb
};


// ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –∑–∞–≥—Ä—É–∑–∫–∏ =====
function initUserImageUpload() {
    const input = document.getElementById('userImage');
    const chooseBtn = document.getElementById('chooseUserImage');
    const removeBtn = document.getElementById('removeUserImage');

    chooseBtn?.addEventListener('click', () => input?.click());
    input?.addEventListener('change', onUserImageChange);
    removeBtn?.addEventListener('click', clearUserImage);
}

function readFileAsDataURL(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result);
        reader.onerror = reject;
        reader.readAsDataURL(file);
    });
}
// ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ =====
async function onUserImageChange(e) {
    const file = e.target.files?.[0];
    const errorEl = document.getElementById('userImageError');
    const preview = document.getElementById('userImagePreview');
    const img = document.getElementById('userImagePreviewImg');

    const chooseBtn = document.getElementById('chooseUserImage');
    const optionalLabel = document.querySelector('.under-user-image-label');

    if (errorEl) errorEl.textContent = '';
    if (!file) return;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    //if (!CONFIG.ALLOWED_TYPES.includes(file.type)) {
    if (!CONFIG.ALLOWED_TYPES.includes(file.type)) {
        if (errorEl) errorEl.textContent = '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç: JPG, PNG, WEBP, GIF.';
        e.target.value = '';
        return;
    }
    const maxBytes = CONFIG.MAX_IMAGE_MB * 1024 * 1024;
    if (file.size > maxBytes) {
        if (errorEl) errorEl.textContent = `–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º ${CONFIG.MAX_IMAGE_MB} MB.`;
        e.target.value = '';
        return;
    }

    try {
        const dataUrl = await readFileAsDataURL(file);
        const compressed = await maybeCompressImage(
            dataUrl,
            CONFIG.PREVIEW_MAX_W,
            CONFIG.PREVIEW_MAX_H,
            CONFIG.PREVIEW_JPEG_QUALITY
        );

        userImageState.file = file;
        userImageState.dataUrl = compressed;
        userImageState.uploadedUrl = null;

        if (img) img.src = compressed;
        if (preview) preview.classList.remove('hidden');
        const wrapper = document.getElementById('userImageWrapper');
        wrapper?.classList.add('has-image');

        // –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É –∏ "(Optional)"
        if (chooseBtn) chooseBtn.style.display = 'none';
        if (optionalLabel) optionalLabel.style.display = 'none';

    } catch (err) {
        console.error(err);
        if (errorEl) errorEl.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å/–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.';
        e.target.value = '';
    }
}

function clearUserImage() {
    const input = document.getElementById('userImage');
    const preview = document.getElementById('userImagePreview');
    const img = document.getElementById('userImagePreviewImg');
    const errorEl = document.getElementById('userImageError');

    const chooseBtn = document.getElementById('chooseUserImage');
    const optionalLabel = document.querySelector('.under-user-image-label');

    if (input) input.value = '';
    if (img) img.removeAttribute('src');
    if (preview) preview.classList.add('hidden');
    if (errorEl) errorEl.textContent = '';

    // –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –∏ "(Optional)" –æ–±—Ä–∞—Ç–Ω–æ
    if (chooseBtn) chooseBtn.style.display = '';
    if (optionalLabel) optionalLabel.style.display = '';

    userImageState.file = null;
    userImageState.dataUrl = null;
    userImageState.uploadedUrl = null;
    const wrapper = document.getElementById('userImageWrapper');
    wrapper?.classList.remove('has-image');
}

function maybeCompressImage(dataUrl, maxW = 1024, maxH = 1024, quality = 0.9) {
    return new Promise(resolve => {
        const img = new Image();
        img.onload = () => {
            let w = img.width, h = img.height;
            const ratio = Math.min(maxW / w, maxH / h, 1);
            w = Math.round(w * ratio);
            h = Math.round(h * ratio);

            const canvas = document.createElement('canvas');
            canvas.width = w;
            canvas.height = h;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0, w, h);
            resolve(canvas.toDataURL('image/jpeg', quality));
        };
        img.onerror = () => resolve(dataUrl);
        img.src = dataUrl;
    });
}

// ===== –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ imgbb –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL =====
// –ú—è–≥–∫–∏–π –∞–ø–ª–æ–∞–¥: –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑ throw
async function uploadToImgbb(dataUrl, apiKey) {
    const key = (apiKey || '').trim();
    if (!key) {
        console.warn('IMGBB API key missing ‚Äî skipping user image upload');
        return null; // –Ω–µ –ª–æ–º–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    }

    const base64 = String(dataUrl).split(',')[1];
    const form = new FormData();
    form.append('image', base64);

    const res = await fetch(`https://api.imgbb.com/1/upload?key=${encodeURIComponent(key)}`, {
        method: 'POST',
        body: form
    });

    let json;
    try {
        json = await res.json();
    } catch (e) {
        console.error('IMGBB: failed to parse JSON', e);
        return null;
    }
    console.debug('imgbb status:', res.status, res.statusText, json);

    if (!res.ok || !json?.success) {
        console.warn('IMGBB upload failed:', json?.error || json);
        return null;
    }
    return json.data.url;
}

// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –∏ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
async function uploadUserImageIfAny() {
    if (!userImageState.dataUrl) return null;
    if (userImageState.uploadedUrl) return userImageState.uploadedUrl;

    const url = await uploadToImgbb(userImageState.dataUrl, CONFIG.IMGBB_API_KEY);
    userImageState.uploadedUrl = url || null;
    return userImageState.uploadedUrl;
}

// üì± Telegram WebApp Integration

async function initTelegramApp() {
    console.log('üîç Initializing Telegram WebApp...');

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ Telegram SDK –¥–æ–ª—å—à–µ
    let attempts = 0;
    while (typeof window.Telegram === 'undefined' && attempts < 100) {
        await new Promise(resolve => setTimeout(resolve, 50)); // –∂–¥–µ–º 50–º—Å
        attempts++;
    }

    console.log('üì± After waiting - Telegram available:', !!window.Telegram?.WebApp);

    if (typeof window.Telegram === 'undefined' || !window.Telegram.WebApp) {
        console.log('‚ùå Telegram WebApp still not available - using fallback');
        appState.userId = 'fallback_' + Date.now();
        appState.userName = 'Fallback User';
        showStatus('info', 'Running in fallback mode');
        return;
    }

    try {
        appState.tg = window.Telegram.WebApp;
        appState.tg.ready();
        appState.tg.expand();
        console.log('üßæ Full initDataUnsafe dump:', JSON.stringify(appState.tg.initDataUnsafe, null, 2));

        // ‚ö†Ô∏è –ü–†–û–í–ï–†–ö–ê: –ï—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å?
        if (!appState.tg.initData || !appState.tg.initDataUnsafe?.user) {
            showStatus('error', '‚ö†Ô∏è WebApp –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–∑ Telegram. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –±–æ—Ç–∞.');
            return;
        }

        // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:
        console.log('üîç Telegram WebApp data:', {
            available: !!appState.tg,
            platform: appState.tg.platform,
            version: appState.tg.version,
            initDataUnsafe: appState.tg.initDataUnsafe,
            user: appState.tg.initDataUnsafe?.user,
            // –ù–û–í–´–ï –ü–†–û–í–ï–†–ö–ò:
            initData: appState.tg.initData, // –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            isExpanded: appState.tg.isExpanded,
            viewportHeight: appState.tg.viewportHeight,
            colorScheme: appState.tg.colorScheme,
            themeParams: appState.tg.themeParams
        });

        // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:
        console.log('üåç Environment check:', {
            url: window.location.href,
            referrer: document.referrer,
            userAgent: navigator.userAgent,
            isHTTPS: window.location.protocol === 'https:',
            hasInitData: !!appState.tg.initData,
            initDataLength: appState.tg.initData?.length || 0
        });

        console.log('üë§ User data extracted:', {
            userId: appState.tg.initDataUnsafe?.user?.id,
            firstName: appState.tg.initDataUnsafe?.user?.first_name,
            lastName: appState.tg.initDataUnsafe?.user?.last_name,
            username: appState.tg.initDataUnsafe?.user?.username
        });

        // Get user data
        if (appState.tg.initDataUnsafe && appState.tg.initDataUnsafe.user) {
            const user = appState.tg.initDataUnsafe.user;

            // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            appState.userId = user.id.toString();
            appState.userName = user.first_name + (user.last_name ? ' ' + user.last_name : '');

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            appState.userUsername = user.username || null;
            appState.userLanguage = user.language_code || 'en';
            appState.userIsPremium = user.is_premium || false;
            appState.userPhotoUrl = user.photo_url || null;
            appState.userAllowsWriteToPm = user.allows_write_to_pm || false;

            // –î–∞–Ω–Ω—ã–µ —á–∞—Ç–∞/—Å–µ—Å—Å–∏–∏
            appState.chatInstance = appState.tg.initDataUnsafe.chat_instance || null;
            appState.chatType = appState.tg.initDataUnsafe.chat_type || null;
            appState.authDate = appState.tg.initDataUnsafe.auth_date || null;

            // –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∏ –≤–µ—Ä—Å–∏—è
            appState.telegramPlatform = appState.tg.platform || 'unknown';
            appState.telegramVersion = appState.tg.version || 'unknown';

            console.log('‚úÖ REAL USER DATA SET:', {
                userId: appState.userId,
                userName: appState.userName,
                username: appState.userUsername,
                language: appState.userLanguage,
                isPremium: appState.userIsPremium,
                platform: appState.telegramPlatform,
                version: appState.telegramVersion,
                chatType: appState.chatType
            });
        } else {
            // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:
            console.log('‚ùå NO USER DATA - detailed check:', {
                hasInitDataUnsafe: !!appState.tg.initDataUnsafe,
                initDataUnsafeKeys: Object.keys(appState.tg.initDataUnsafe || {}),
                hasInitData: !!appState.tg.initData,
                initDataPreview: appState.tg.initData?.substring(0, 100),
                launchedVia: appState.tg.initDataUnsafe?.start_param || 'unknown',
                currentURL: window.location.href,
                isDirectAccess: !document.referrer.includes('telegram')
            });

            // –†–∞–∑–Ω—ã–µ fallback –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
            if (!appState.tg.initDataUnsafe) {
                appState.userId = 'fallback_no_unsafe_' + Date.now();
                appState.userName = 'No InitDataUnsafe';
            } else if (!appState.tg.initDataUnsafe.user) {
                appState.userId = 'fallback_no_user_' + Date.now();
                appState.userName = 'No User Data';
            } else {
                appState.userId = 'fallback_unknown_' + Date.now();
                appState.userName = 'Unknown Issue';
            }

            appState.userUsername = null;
            appState.userLanguage = 'en';
            appState.userIsPremium = false;
            appState.userPhotoUrl = null;
            appState.telegramPlatform = appState.tg?.platform || 'unknown';
            appState.telegramVersion = appState.tg?.version || 'unknown';
        }


        // Auto-detect language
        const tgLang = appState.tg.initDataUnsafe?.user?.language_code;
        if (tgLang && CONFIG.LANGUAGES.includes(tgLang)) {
            appState.setLanguage(tgLang);
        }

        showStatus('success', appState.translate('connected'));

    } catch (error) {
        console.error('‚ùå Telegram initialization error:', error);
        showStatus('error', 'Telegram connection error');
    }
}

// üöÄ App Initialization
document.addEventListener('DOMContentLoaded', async function () {
    console.log('üöÄ pixPLace Creator starting...');

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è processingScreen
    const ps = document.getElementById('processingScreen');
    if (ps) {
        console.log('‚úÖ –ù–∞—à—ë–ª processingScreen:', ps);
        console.log('‚û°Ô∏è –î–µ—Ç–∏ processingScreen:', ps.children.length);
    } else {
        console.error('‚ùå processingScreen –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM');
    }

    showLoadingScreen();
    appState.loadSettings();
    appState.loadHistory();

    try {
        await loadTelegramSDK();    // üëâ –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ SDK
        await initTelegramApp();    // üëâ —Ç–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ WebApp
    } catch (e) {
        console.error('‚ùå SDK load error:', e);
        showStatus('error', 'Telegram SDK load failed');
    }

    initializeUI();
    initUserImageUpload(); // ‚Üê –¥–æ–±–∞–≤—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
    setTimeout(() => {
        hideLoadingScreen();
        showApp();
    }, 1500);
});



// üñºÔ∏è Image Generation - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
async function generateImage(event) {
    if (event) {
        event.preventDefault();
    }

    if (appState.isGenerating) return;

    const prompt = document.getElementById('promptInput').value.trim();
    const mode = document.getElementById('modeSelect').value;
    const size = document.getElementById('sizeSelect').value;

    console.log('üöÄ Starting generation:', { prompt, style: appState.selectedStyle, mode, size });

    // Validation
    if (!prompt) {
        showToast('error', appState.translate('error_prompt_required'));
        triggerHaptic('error');
        return;
    }

    if (prompt.length < 5) {
        showToast('error', appState.translate('error_prompt_too_short'));
        triggerHaptic('error');
        return;
    }

    if (CONFIG.WEBHOOK_URL === 'YOUR_MAKE_WEBHOOK_URL_HERE') {
        showToast('error', appState.translate('error_webhook_not_configured'));
        return;
    }

    appState.isGenerating = true;
    appState.startTime = Date.now();

    // Create generation record
    // üëâ –ë–µ—Ä—ë–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –∫–∞—Ä—É—Å–µ–ª–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å
    const activeCard = document.querySelector('.carousel-2d-item.active');
    const currentStyle = (activeCard?.dataset.style || '').toLowerCase();
    appState.selectedStyle = currentStyle || appState.selectedStyle;

    appState.currentGeneration = {
        id: Date.now(),
        prompt: prompt,
        style: appState.selectedStyle,
        mode: mode,
        size: size,
        timestamp: new Date().toISOString(),
        status: 'processing',
        startTime: appState.startTime
    };

    // Add to history
    appState.generationHistory.unshift(appState.currentGeneration);
    appState.saveHistory();

    // Show processing screen
    showProcessing();
    startTimer();
    // 1) –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Äî –∑–∞–≥—Ä—É–∑–∏–º –Ω–∞ imgbb
    let userImageUrl = null;
    try {
        userImageUrl = await uploadUserImageIfAny();
    } catch (err) {
        console.warn('User image upload failed:', err);
        const errorEl = document.getElementById('userImageError');
        if (errorEl && !errorEl.textContent) {
            errorEl.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑ –Ω–µ–≥–æ.';
        }
    }

    try {
        console.log('üì§ Sending to webhook...');

        // Send request to Make webhook
        const result = await sendToWebhook({
            action: 'Image Generation',
            prompt: prompt,
            style: appState.selectedStyle,
            mode: mode,
            size: size,
            user_image_url: userImageUrl,
            user_id: appState.userId,
            user_name: appState.userName,
            user_username: appState.userUsername,
            user_language: appState.userLanguage,
            user_is_premium: appState.userIsPremium,
            telegram_platform: appState.telegramPlatform,
            telegram_version: appState.telegramVersion,
            timestamp: new Date().toISOString(),
            generation_id: appState.currentGeneration.id
        });

        console.log('üì• Webhook response received:', result);

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        appState.currentGeneration.endTime = Date.now();
        appState.currentGeneration.duration = appState.currentGeneration.endTime - appState.currentGeneration.startTime;

        // Handle response
        if (!result || typeof result !== 'object') {
            throw new Error('Invalid response from webhook');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É
        if (result.status === 'error' || result.error) {
            throw new Error(result.error || result.message || 'Unknown error from webhook');
        }

        /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ (–ü–ï–†–í–ê–Ø –ü–†–û–í–ï–†–ö–ê)
        console.log('üîç Checking if limit reached...');
        const limitReached = result.limit_reached === true ||
            result.limit_reached === 'true' ||
            result.limit_reached === '1' ||
            result.limit_reached === 1;

        console.log('üîç Limit reached result:', limitReached);

        if (limitReached) {
            console.log('‚ö†Ô∏è LIMIT REACHED - Opening modal');
            appState.currentGeneration.status = 'limit';
            appState.currentGeneration.result = result.image_url || null;
            appState.saveHistory();

            // –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
            const paymentUrl = result.payment_url || 'https://t.me/tribute/app?startapp=syDv';
            console.log('üîó Payment URL:', paymentUrl);

            // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            console.log('üîó Calling showSubscriptionNotice...');
            showSubscriptionNotice(result);

            showToast('warning', result.message || 'Generation limit reached');
            triggerHaptic('warning');
            return;
        }
        // –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        if (result.status === 'success' && result.image_url) {
            console.log('‚úÖ Generation successful');
            appState.currentGeneration.status = 'success';
            appState.currentGeneration.result = result.image_url;
            appState.saveHistory();

            showResult(result);
            showToast('success', appState.translate('success_generated'));
            triggerHaptic('success');
            return;
        }

        // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
        console.error('‚ùå Unexpected response format:', result);
        throw new Error('Unexpected response format: ' + JSON.stringify(result));

    } catch (error) {
        console.error('‚ùå Generation error:', error);

        appState.currentGeneration.status = 'error';
        appState.currentGeneration.error = error.message;
        appState.currentGeneration.endTime = Date.now();
        appState.currentGeneration.duration = appState.currentGeneration.endTime - appState.currentGeneration.startTime;
        appState.saveHistory();

        showToast('error', appState.translate('error_generation_failed') + ': ' + error.message);
        triggerHaptic('error');
        showGeneration();
    } finally {
        appState.isGenerating = false;
        stopTimer();
    }
}
// üåê Webhook Communication
async function sendToWebhook(data) {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), CONFIG.TIMEOUT);

    try {
        console.log('üì§ Sending webhook request:', data);

        const response = await fetch(CONFIG.WEBHOOK_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(data),
            signal: controller.signal
        });

        clearTimeout(timeoutId);

        console.log('üì• Webhook response status:', response.status, response.statusText);

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
        const contentType = response.headers.get('content-type');
        console.log('üìÑ Response content-type:', contentType);

        let result;
        if (contentType && contentType.includes('application/json')) {
            result = await response.json();
        } else {
            // –ï—Å–ª–∏ –Ω–µ JSON, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç
            const text = await response.text();
            console.log('üìÑ Response text:', text);

            // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
            try {
                result = JSON.parse(text);
            } catch (e) {
                throw new Error('Response is not valid JSON: ' + text);
            }
        }

        console.log('‚úÖ Parsed webhook response:', result);
        return result;

    } catch (error) {
        clearTimeout(timeoutId);

        if (error.name === 'AbortError') {
            throw new Error(appState.translate('error_timeout'));
        }

        console.error('‚ùå Webhook error:', error);
        throw error;
    }
}
// üé® Style Selection
//  2D Carousel (loop, Android-friendly)
(() => {
    // –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–µ–∫ –ø–æ id –∏–ª–∏ –ø–æ –∫–ª–∞—Å—Å—É
    const track = document.getElementById('carousel2d') || document.querySelector('.carousel-2d');
    if (!track) { console.warn('[carousel2d] —Ç—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'); return; }
    if (track._carouselInited) return; // –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    track._carouselInited = true;

    const cards = Array.from(track.querySelectorAll('.carousel-2d-item'));
    if (!cards.length) { console.warn('[carousel2d] –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'); return; }

    let selectedStyle = (cards[0].dataset.style || '').toLowerCase();
    let isPointerDown = false;
    let moved = false;
    let startX = 0, startY = 0, startScroll = 0;

    // ===== helpers =====
    function updateGutters() {
        const cardW = cards[0]?.offsetWidth || 0;
        const viewport = track.clientWidth || 0;
        if (!cardW || !viewport) return;
        const gutter = Math.max(0, (viewport - cardW) / 2);
        track.style.paddingLeft = `${gutter}px`;
        track.style.paddingRight = `${gutter}px`;
    }

    function centerCard(card, smooth = true) {
        if (!card) return;
        const viewport = track.clientWidth;
        const left = card.offsetLeft - (viewport - card.offsetWidth) / 2;
        const maxScroll = track.scrollWidth - viewport;
        const clamped = Math.max(0, Math.min(left, maxScroll));
        track.scrollTo({ left: clamped, behavior: smooth ? 'smooth' : 'auto' });
    }

    function highlight(card, { scroll = false } = {}) {
        cards.forEach(c => c.classList.remove('active'));
        if (!card) return;
        card.classList.add('active');

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å
        selectedStyle = (card.dataset.style || '').toLowerCase();
        if (window.appState) window.appState.selectedStyle = selectedStyle;

        // –°–æ–æ–±—â–∞–µ–º –Ω–∞—Ä—É–∂—É (–µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Å–ª—É—à–∞–µ—Ç)
        document.dispatchEvent(new CustomEvent('style:change', { detail: { style: selectedStyle } }));

        if (scroll) centerCard(card, true);
    }

    function nearestCard() {
        const trackRect = track.getBoundingClientRect();
        const centerX = trackRect.left + trackRect.width / 2;
        let best = null, bestDist = Infinity;
        for (const c of cards) {
            const r = c.getBoundingClientRect();
            const cardCenter = r.left + r.width / 2;
            const dist = Math.abs(cardCenter - centerX);
            if (dist < bestDist) { bestDist = dist; best = c; }
        }
        return best;
    }
    // ===== /helpers =====

    // Pointer-—Å–æ–±—ã—Ç–∏—è (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–ª—è –º—ã—à–∏/—Ç–∞—á–∞/–ø–µ—Ä–∞)
    track.addEventListener('pointerdown', (e) => {
        isPointerDown = true;
        moved = false;
        startX = e.clientX;
        startY = e.clientY;
        startScroll = track.scrollLeft;
        track.setPointerCapture?.(e.pointerId);
    });

    track.addEventListener('pointermove', (e) => {
        if (!isPointerDown) return;
        const dx = e.clientX - startX;
        const dy = e.clientY - startY;
        if (!moved && Math.hypot(dx, dy) > 8) moved = true; // —á—É—Ç—å –±–æ–ª—å—à–µ –ø–æ—Ä–æ–≥ ¬´–¥—Ä–æ–∂–∞–Ω–∏—è¬ª
        track.scrollLeft = startScroll - dx;
    });

    function endPointer(e) {
        if (!isPointerDown) return;
        isPointerDown = false;

        if (moved) {
            // –ø–æ—Å–ª–µ —Å–≤–∞–π–ø–∞ ‚Äî —Å–Ω—ç–ø –∫ –±–ª–∏–∂–∞–π—à–µ–π
            requestAnimationFrame(() => {
                const c = nearestCard();
                if (c) highlight(c, { scroll: true });
            });
        } else {
            // —ç—Ç–æ ¬´—Ç–∞–ø¬ª: –≤–æ–∑—å–º—ë–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥ –ø–∞–ª—å—Ü–µ–º/–º—ã—à—å—é
            const el = document.elementFromPoint(e.clientX, e.clientY);
            const card = el?.closest?.('.carousel-2d-item');
            if (card && track.contains(card)) {
                highlight(card, { scroll: true });
            }
        }
    }

    track.addEventListener('pointerup', endPointer);
    track.addEventListener('pointercancel', endPointer);
    track.addEventListener('pointerleave', endPointer);

    // –î–æ–ø. —Ñ–æ–ª–±—ç–∫: —è–≤–Ω—ã–µ –∫–ª–∏–∫–∏ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ pointer —Å–æ–±—ã—Ç–∏—è –≥–¥–µ-—Ç–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—é—Ç—Å—è)
    cards.forEach(c => {
        c.addEventListener('click', (e) => {
            // –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª —Å–≤–∞–π–ø ‚Äî –Ω–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫–ª–∏–∫–æ–º
            if (moved) return;
            highlight(c, { scroll: true });
        });
    });

    // –ü—É–±–ª–∏—á–Ω—ã–π API (–µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è)
    window.getSelectedStyle = function () { return selectedStyle; };
    window.setCarouselStyle = function (style) {
        const target = String(style || '').toLowerCase();
        const card = cards.find(c => (c.dataset.style || '').toLowerCase() === target);
        if (card) highlight(card, { scroll: true });
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    updateGutters();
    highlight(cards[0], { scroll: false });

    window.addEventListener('resize', () => {
        updateGutters();
        const active = track.querySelector('.carousel-2d-item.active');
        if (active) centerCard(active, true);
    });
})();


/*(function () {
    const track = document.getElementById('carousel2d');
    const wrapper = track?.closest('.carousel-2d-wrapper');
    if (!track || !wrapper) return;

    const cards = Array.from(track.querySelectorAll('.carousel-2d-item'));
    if (!cards.length) return;

    let selectedStyle = (cards[0].dataset.style || '').toLowerCase();
    let isPointerDown = false;
    let startX = 0;
    let startScroll = 0;
    let moved = false;

    
function nearestCard() {
    const trackRect = track.getBoundingClientRect();
    const center = trackRect.left + trackRect.width / 2;
    let best = null, bestDist = Infinity;

    for (const c of cards) {
        const r = c.getBoundingClientRect();
        const cardCenter = r.left + r.width / 2;
        const dist = Math.abs(cardCenter - center);
        if (dist < bestDist) {
            bestDist = dist;
            best = c;
        }
    }
    return best;
}

function highlight(card, { scroll = false } = {}) {
    cards.forEach(c => c.classList.remove('active'));
    if (!card) return;
    card.classList.add('active');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å
    selectedStyle = (card.dataset.style || '').toLowerCase();
    if (window.appState) {
        appState.selectedStyle = selectedStyle;
    }

    console.log('üé® Highlighted style:', selectedStyle);
    console.log('üé® appState.selectedStyle:', appState?.selectedStyle);

    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ —Å–∫–∞–∑–∞–Ω–æ
    if (scroll) {
        card.scrollIntoView({ behavior: 'smooth', inline: 'center', block: 'nearest' });
    }
}

// –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∫ —Ç–µ–∫—É—â–µ–º—É —Å–∫—Ä–æ–ª–ª—É

// –°–Ω—ç–ø–∏–º –∫ –±–ª–∏–∂–∞–π—à–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ
function onCardClick(e) {
    if (moved) return; // —Å–≤–∞–π–ø ‚Äî –Ω–µ –∫–ª–∏–∫
    const card = e.currentTarget;
    highlight(card, { scroll: true });
}

function snapToNearest() {
    const card = nearestCard();
    if (card) highlight(card, { scroll: true });
}


// Pointer —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Ç—Ä–µ–∫–µ
track.addEventListener('pointerdown', (e) => {
    isPointerDown = true;
    moved = false;
    startX = e.clientX;
    startScroll = track.scrollLeft;
    track.setPointerCapture(e.pointerId);
});

track.addEventListener('pointermove', (e) => {
    if (!isPointerDown) return;
    const dx = e.clientX - startX;
    if (Math.abs(dx) > 5) moved = true;
    // –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞
    track.scrollLeft = startScroll - dx;
});

function endPointer(e) {
    if (!isPointerDown) return;
    isPointerDown = false;
    // –ø–æ—Å–ª–µ —Å–≤–∞–π–ø–∞ ‚Äî —Å–Ω—ç–ø –∫ –±–ª–∏–∂–∞–π—à–µ–π
    requestAnimationFrame(snapToNearest);
}

track.addEventListener('pointerup', endPointer);
track.addEventListener('pointercancel', endPointer);
track.addEventListener('pointerleave', endPointer);

// –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
window.getSelectedStyle = function () {
    return selectedStyle;
};
window.setCarouselStyle = function (style) {
    const target = String(style || '').toLowerCase();
    const card = cards.find(c => (c.dataset.style || '').toLowerCase() === target);
    if (card) highlight(card, { scroll: true });
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî –≤—ã–¥–µ–ª–∏–º –ø–µ—Ä–≤—É—é –≤–∏–¥–∏–º—É—é/–ø–µ—Ä–≤—É—é –ø–æ —Å–ø–∏—Å–∫—É
// highlight(cards[0]);
highlight(cards[0], { scroll: false });

// –ù–∞ —Ä–µ—Å–∞–π–∑ ‚Äî —É–¥–µ—Ä–∂–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≤ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
window.addEventListener('resize', () => {
    const active = track.querySelector('.carousel-2d-item.active');
    if (active) active.scrollIntoView({ behavior: 'smooth', inline: 'nearest', block: 'nearest' });
});
}) ();
*/
// üîÑ Action Functions
function newGeneration() {
    showGeneration();
    // Clear form
    //  document.getElementById('promptInput').value = '';
    //  document.getElementById('charCounter').textContent = '0';
}

function cancelGeneration() {
    if (appState.currentGeneration) {
        appState.currentGeneration.status = 'cancelled';
        appState.currentGeneration.error = 'Cancelled by user';
        appState.saveHistory();
    }

    appState.isGenerating = false;
    stopTimer();
    showGeneration();
    triggerHaptic('medium');
}

// üì± Device Integration
async function downloadImage() {
    if (!appState.currentGeneration?.result) return;

    try {
        const response = await fetch(appState.currentGeneration.result);
        const blob = await response.blob();
        const url = URL.createObjectURL(blob);

        const link = document.createElement('a');
        link.href = url;
        link.download = `ai-generated-${appState.currentGeneration.id}.png`; // –ª—É—á—à–µ –æ—Å—Ç–∞–≤–∏—Ç—å .png
        document.body.appendChild(link); // –∏–Ω–æ–≥–¥–∞ –±–µ–∑ —ç—Ç–æ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ Safari
        link.click();
        document.body.removeChild(link);

        URL.revokeObjectURL(url); // —á–∏—Å—Ç–∏–º –ø–∞–º—è—Ç—å

        showToast('info', appState.translate('download_started'));
        triggerHaptic('light');
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏:", err);
        showToast('error', 'Download failed');
    }
}
/*function downloadImage() {
    if (!appState.currentGeneration?.result) return;

    const link = document.createElement('a');
    link.href = appState.currentGeneration.result;
    link.download = `ai-generated-${appState.currentGeneration.id}.png`;
    link.click();

    showToast('info', appState.translate('download_started'));
    triggerHaptic('light');
}
*/

function shareImage() {
    if (!appState.currentGeneration?.result) return;

    if (navigator.share) {
        navigator.share({
            title: 'Image generated by pixPLace App',
            text: appState.currentGeneration.prompt,
            url: appState.currentGeneration.result
        });
    } else {
        // Fallback: copy to clipboard
        navigator.clipboard.writeText(appState.currentGeneration.result).then(() => {
            showToast('info', appState.translate('copied_to_clipboard'));
        });
    }

    triggerHaptic('light');
}



// üåç Global Functions
window.toggleLanguage = () => appState.toggleLanguage();
window.toggleTheme = () => appState.toggleTheme();
window.showHistory = showHistory;
window.showGeneration = showGeneration;
window.showProcessing = showProcessing;
//window.selectStyle = selectStyle;
window.selectStyle = (s) => window.setCarouselStyle(s);
window.generateImage = generateImage;
window.newGeneration = newGeneration;
window.cancelGeneration = cancelGeneration;
window.clearHistory = clearHistory;
window.downloadImage = downloadImage;
window.shareImage = shareImage;
window.showSubscriptionNotice = showSubscriptionNotice;

// üéµ Music Functions
/*let currentWidget = null;
let isPlaying = false;

function toggleMusicDropdown() {
    const dropdown = document.getElementById('musicDropdown');
    const isVisible = dropdown.style.display === 'block';

    if (isVisible) {
    dropdown.style.display = 'none';
    } else {
    dropdown.style.display = 'block';
    }

    console.log('üéµ Music dropdown toggled:', !isVisible);
}

function playPlaylist(type) {
    const playlists = {
    lofi: 'https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/330718027&color=%237a8fb5&auto_play=true&hide_related=true&show_comments=false&show_user=false&show_reposts=false&show_teaser=false',
    ambient: 'https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/330718027&color=%237a8fb5&auto_play=true&hide_related=true&show_comments=false&show_user=false&show_reposts=false&show_teaser=false',
    jazz: 'https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/330718027&color=%237a8fb5&auto_play=true&hide_related=true&show_comments=false&show_user=false&show_reposts=false&show_teaser=false',
    relax: 'https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/330718027&color=%237a8fb5&auto_play=true&hide_related=true&show_comments=false&show_user=false&show_reposts=false&show_teaser=false'
    };

    const iframe = document.getElementById('musicPlayer');
    iframe.src = playlists[type];

    // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—ã
    const controls = document.getElementById('musicControls');
    if (controls) {
    controls.style.display = 'flex';
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É
    const playBtn = document.getElementById('playPauseBtn');
    if (playBtn) {
    playBtn.textContent = '‚ñ∂ Play';
    playBtn.onclick = function () {
    startMusicPlayback(type);
    };
    }

    console.log(`üéµ Loading ${type} playlist`);
}

function startMusicPlayback(type) {
    const playlists = {
    lofi: 'https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/330718027&color=%237a8fb5&auto_play=true&hide_related=true&show_comments=false&show_user=false&show_reposts=false&show_teaser=false',
    ambient: 'https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/330718027&color=%237a8fb5&auto_play=true&hide_related=true&show_comments=false&show_user=false&show_reposts=false&show_teaser=false',
    jazz: 'https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/330718027&color=%237a8fb5&auto_play=true&hide_related=true&show_comments=false&show_user=false&show_reposts=false&show_teaser=false',
    relax: 'https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/330718027&color=%237a8fb5&auto_play=true&hide_related=true&show_comments=false&show_user=false&show_reposts=false&show_teaser=false'
    };

    const iframe = document.getElementById('musicPlayer');
    iframe.src = playlists[type];

    const playBtn = document.getElementById('playPauseBtn');
    if (playBtn) {
    playBtn.textContent = '‚è∏';
    playBtn.onclick = togglePlayPause;
    }

    isPlaying = true;
    console.log(`üéµ Started ${type} playlist`);
}

function togglePlayPause() {
    const playBtn = document.getElementById('playPauseBtn');
    if (isPlaying) {
    playBtn.textContent = '‚ñ∂';
    isPlaying = false;
    } else {
    playBtn.textContent = '‚è∏';
    isPlaying = true;
    }
}

function setVolume(value) {
    console.log(`üîä Volume set to ${value}%`);
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ dropdown –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
document.addEventListener('click', function (event) {
    const musicWidget = document.querySelector('.music-widget');
    const dropdown = document.getElementById('musicDropdown');

    if (musicWidget && dropdown && !musicWidget.contains(event.target)) {
    dropdown.style.display = 'none';
    }
});*/
// üß™ Debug Functions
window.getAppState = () => appState;
window.setWebhookUrl = (url) => {
    CONFIG.WEBHOOK_URL = url;
    console.log('‚úÖ Webhook URL updated');
};

console.log('üéØ pixPLace App loaded!');
console.log('üîß Debug commands:');
console.log('- getAppState() - get current app state');
console.log('- setWebhookUrl("url") - set webhook URL');
console.log('‚ö†Ô∏è Don\'t forget to set your webhook URL!');
// –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞:
window.closeLimitModal = () => {
    const modal = document.getElementById('limitModal');
    if (modal) {
        modal.classList.remove('show');
        showGeneration();
    }
};

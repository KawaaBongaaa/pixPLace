// üîß Device detection helpers
export function isMobile() {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
}

export function isIOS() {
    return /iPad|iPhone|iPod/.test(navigator.userAgent);
}

export function isAndroid() {
    return /Android/i.test(navigator.userAgent);
}

export function isTablet() {
    return /iPad|Android(?=.*\bMobile\b)|Tablet/i.test(navigator.userAgent) || isAndroid();
}

export function supportsShare() {
    return navigator.share && navigator.canShare;
}

// üîß Utility Functions
export function generateUUIDv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        const r = Math.random() * 16 | 0;
        const v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}

export function sanitizeJsonString(str) {
    if (typeof str !== 'string') return str;

    return str
        .replace(/\\/g, '\\\\')  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª—ç—à–∏
        .replace(/"/g, '\\"')    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏
        .replace(/\n/g, '\\n')   // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã –Ω–∞ \n
        .replace(/\r/g, '\\r')   // –ó–∞–º–µ–Ω—è–µ–º \r
        .replace(/\t/g, '\\t');  // –ó–∞–º–µ–Ω—è–µ–º —Ç–∞–±—É–ª—è—Ü–∏–∏
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
export function getStatusText(status) {
    switch (status) {
        case 'processing': return '‚è≥';
        case 'success': return '‚úÖ';
        case 'error': return '‚ùå';
        default: return status;
    }
}

// –§—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–∞–∫ DataURL
export function readFileAsDataURL(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result);
        reader.onerror = reject;
        reader.readAsDataURL(file);
    });
}

// –§—É–Ω–∫—Ü–∏—è –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export function maybeCompressImage(dataUrl, maxW = 1024, maxH = 1024, quality = 0.9) {
    return new Promise(resolve => {
        const img = new Image();
        img.onload = () => {
            let w = img.width, h = img.height;
            const ratio = Math.min(maxW / w, maxH / h, 1);
            w = Math.round(w * ratio);
            h = Math.round(h * ratio);

            const canvas = document.createElement('canvas');
            canvas.width = w;
            canvas.height = h;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0, w, h);
            resolve(canvas.toDataURL('image/jpeg', quality));
        };
        img.onerror = () => resolve(dataUrl);
        img.src = dataUrl;
    });
}

// üçÉ –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–Ω–µ–≥–æ–ø–∞–¥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
export function createSnowflake() {
    const snowflake = document.createElement('div');
    snowflake.className = 'snowflake';

    // üî• –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –º–µ–ª–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –±–µ–∑ –æ–∫–∞–Ω—Ç–æ–≤–∫–∏
    const snowSymbols = ['¬∑', '‚Ä¢', '‚ó¶', '*', '‚ÅÉ', '.'];
    snowflake.textContent = snowSymbols[Math.floor(Math.random() * snowSymbols.length)];

    // üî• –¢–æ–ª—å–∫–æ –º–µ–ª–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –±–æ–ª–µ–µ –ø–ª–æ—Ç–Ω–æ–≥–æ —Å–Ω–µ–≥–æ–ø–∞–¥–∞
    const sizes = ['extra-small', 'small', 'mini'];
    const randomSize = sizes[Math.floor(Math.random() * sizes.length)];
    snowflake.classList.add(randomSize);

    // üî• –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
    snowflake.style.left = Math.random() * 150 + 'vw';

    // üî• –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–ê–Ø –°–¢–ê–†–¢–û–í–ê–Ø –ü–û–ó–ò–¶–ò–Ø –í–´–®–ï –î–ò–°–ü–õ–ï–Ø: –æ—Ç -100vh –¥–æ -20vh (–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–æ!)
    snowflake.style.top = -(Math.random() * 80 + 20) + 'vh'; // –æ—Ç -100vh –¥–æ -20vh —Ä–∞–Ω–¥–æ–º–Ω–æ

    // üî• –ù–ï –ü–õ–ê–í–ù–´–ô –°–¢–ê–†–¢: –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
    snowflake.style.animationDelay = '0s'; // –ú–ì–ù–û–í–ï–ù–ù–û –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏!

    // üî• –ü–õ–ê–í–ù–û–ï –ü–û–Ø–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç—å –∏ fade in –≤ CSS
    snowflake.style.opacity = '0';

    return snowflake;
}

export function startSnowfall() {
    const snowfallContainer = document.querySelector('.snowfall');
    if (!snowfallContainer) {
        console.warn('Snowfall container not found');
        return;
    }

    // üî• –ë–û–õ–¨–®–ï –°–ù–ï–ñ–ò–ù–û–ö –¥–ª—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
    const maxSnowflakes = 900;
    for (let i = 0; i < maxSnowflakes; i++) {
        const snowflake = createSnowflake();
        snowfallContainer.appendChild(snowflake);
    }

    console.log(`‚ùÑÔ∏è Rich snowfall started - ${maxSnowflakes} snowflakes from above`);

    // üî• –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏
    setInterval(() => {
        if (snowfallContainer.children.length < maxSnowflakes) {
            const snowflake = createSnowflake();
            snowfallContainer.appendChild(snowflake);
        }
    }, 1400); // –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã –¥–æ–±–∞–≤–ª—è–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
}

export function stopSnowfall() {
    const snowfallContainer = document.querySelector('.snowfall');
    if (!snowfallContainer) return;

    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–Ω–µ–∂–∏–Ω–∫–∏
    snowfallContainer.innerHTML = '';
    console.log('‚ùÑÔ∏è Snowfall stopped - all snowflakes removed');
}

console.log('üéØ Utils module loaded successfully');

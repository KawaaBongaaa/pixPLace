// üîß Device detection helpers
export function isMobile() {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
}

export function isIOS() {
    return /iPad|iPhone|iPod/.test(navigator.userAgent);
}

export function isAndroid() {
    return /Android/i.test(navigator.userAgent);
}

export function isTablet() {
    return /iPad|Android(?=.*\bMobile\b)|Tablet/i.test(navigator.userAgent) || isAndroid();
}

export function supportsShare() {
    return navigator.share && navigator.canShare;
}

// üî• –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –°–ö–ê–ß–ò–í–ê–ù–ò–Ø/–®–ê–†–ò–ù–ì–ê
// üéØ Smart platform detection with comprehensive support
export function getDeviceCapabilities() {
    const ua = navigator.userAgent;
    const hasShareAPI = navigator.share !== undefined;
    const hasCanShareAPI = navigator.canShare !== undefined;
    const isWebView = ua.includes('wv') || ua.includes('WebView');
    const isStandalone = window.matchMedia('(display-mode: standalone)').matches;
    const isTelegram = window.Telegram?.WebApp !== undefined;

    return {
        platform: {
            mobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(ua),
            android: /Android/i.test(ua),
            ios: /iPad|iPhone|iPod/.test(ua),
            tablet: /iPad|Android(?=.*\bMobile\b)|Tablet/i.test(ua) || /Android/i.test(ua),
            windows: /Windows/i.test(ua),
            macos: /Mac OS X/i.test(ua),
            linux: /Linux/i.test(ua) && !/Android/i.test(ua),
            telegram: isTelegram,
            webview: isWebView,
            standalone: isStandalone
        },
        api: {
            share: hasShareAPI,
            canShare: hasCanShareAPI,
            canShareFiles: hasCanShareAPI && navigator.canShare({ files: [new File([''], 'test.png')] }),
            blobUrl: URL.createObjectURL !== undefined,
            dataUrl: true
        },
        features: {
            haptic: navigator.vibrate !== undefined,
            clipboard: navigator.clipboard !== undefined,
            download: document.createElement('a').download !== undefined
        }
    };
}

// üñºÔ∏è Unified image download/share function with optimal platform handling
export async function downloadOrShareImage(imageUrl, options = {}) {
    const {
        filename = `ai-generated-${Date.now()}.png`,
        title = 'AI Generated Image',
        text = 'Created with pixPLace Bot',
        showToast = true
    } = options;

    const caps = getDeviceCapabilities();
    console.log('üì± Device capabilities:', caps);
    console.log('üîó Image URL to download:', imageUrl);

    // üéØ DESKTOP BROWSERS - PRIORITY DOWNLOAD FIRST
    if (!caps.platform.mobile) {
        console.log('üíª Desktop detected - starting download process');

        // Step 1: Try direct download with a.download attribute (Firefox, modern browsers)
        try {
            console.log('üîó Direct download with download attr');
            const link = document.createElement('a');
            link.href = imageUrl;
            link.download = filename;
            link.style.display = 'none';
            link.target = '_blank'; // Open in new tab if download doesn't work

            // Add to DOM and click
            document.body.appendChild(link);

            // Try programatic click first
            link.click();

            // Remove immediately after
            document.body.removeChild(link);

            console.log('‚úÖ Direct download link triggered');
            if (showToast) showToastNat('success', 'Download started! Check your downloads folder.');
            return { method: 'direct-download', success: true };
        } catch (error) {
            console.warn('‚ö†Ô∏è Direct download failed:', error.message);
        }

        // Step 2: Try blob download if CORS allows
        if (caps.api.blobUrl) {
            try {
                console.log('üíø Attempting blob download');
                const response = await fetch(imageUrl, {
                    method: 'GET',
                    mode: 'cors' // Explicitly set CORS mode
                });

                if (response.ok) {
                    const blob = await response.blob();
                    const blobUrl = URL.createObjectURL(blob);

                    const link = document.createElement('a');
                    link.href = blobUrl;
                    link.download = filename;
                    link.style.display = 'none';

                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);

                    URL.revokeObjectURL(blobUrl);

                    console.log('‚úÖ Blob download succeeded');
                    if (showToast) showToastNat('success', 'Download completed!');
                    return { method: 'blob-download', success: true };
                } else {
                    console.warn('‚ö†Ô∏è Blob fetch failed with status:', response.status);
                }
            } catch (corsError) {
                console.warn('‚ö†Ô∏è Blob download failed (likely CORS):', corsError.message);
                console.log('üí° CORS error is normal in local development - will use fallback');
            }
        }

        // Step 3: Final fallback - open in new tab with clear instructions
        console.log('üìÇ Desktop fallback - opening in new tab with save instructions');
        window.open(imageUrl, '_blank');

        // Show detailed instructions based on browser
        if (caps.platform.mac) {
            if (showToast) showToastNat('info', 'Image opened - ‚åò+S or right-click > Save Image As');
        } else {
            if (showToast) showToastNat('info', 'Image opened - Ctrl+S or right-click > Save image as');
        }

        return { method: 'open-with-save-instructions', success: true };
    }

    // ÔøΩ EMERGENCY MANUAL DOWNLOAD FOR BROKEN ENVIRONMENTS
    console.log('üö® Emergency manual download for broken environment');

    // Create a temporary download button
    const emergencyBtn = document.createElement('button');
    emergencyBtn.innerHTML = 'üì• Download Image';
    emergencyBtn.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
        padding: 10px 20px;
        background: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-weight: bold;
    `;

    emergencyBtn.onclick = () => {
        window.open(imageUrl, '_blank');
        document.body.removeChild(emergencyBtn);
        if (showToast) showToastNat('info', 'Manual download initiated - use browser menu to save');
    };

    document.body.appendChild(emergencyBtn);

    // Auto-remove after 10 seconds
    setTimeout(() => {
        if (emergencyBtn.parentNode) {
            document.body.removeChild(emergencyBtn);
        }
    }, 10000);

    if (showToast) showToastNat('warning', 'Download button created - click top-right blue button');
    return { method: 'emergency-manual', success: true };

    // ÔøΩüì± MOBILE DEVICES LOGIC BELOW

    // 1Ô∏è‚É£ MOBILE WITH SHARE API SUPPORT
    if (caps.api.share && caps.api.canShare) {
        try {
            console.log('üì± Using native share API');
            const response = await fetch(imageUrl);
            if (!response.ok) throw new Error('Fetch failed');

            const blob = await response.blob();
            const file = new File([blob], filename, { type: blob.type });

            const shareData = {
                files: [file],
                title,
                text
            };

            if (navigator.canShare(shareData)) {
                await navigator.share(shareData);
                if (showToast) showToastNat('success', 'File shared successfully!');
                return { method: 'native-share', success: true };
            } else {
                throw new Error('Cannot share files');
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Native share failed, falling back:', error.message);
        }
    }

    // 2Ô∏è‚É£ IOS SPECIAL HANDLING
    if (caps.platform.ios) {
        console.log('üçé iOS device - opening in new tab with instructions');
        window.open(imageUrl, '_blank');
        if (showToast) showToastNat('info', 'Tap and hold to save or share image');
        return { method: 'ios-open', success: true };
    }

    // 3Ô∏è‚É£ ANDROID/OTHER MOBILE - TRY BLOB IF SUPPORTED
    if (caps.api.blobUrl && caps.features.download) {
        try {
            console.log('üì± Mobile blob download attempt');
            const response = await fetch(imageUrl);
            if (!response.ok) throw new Error('Fetch failed');

            const blob = await response.blob();
            const url = URL.createObjectURL(blob);

            const link = document.createElement('a');
            link.href = url;
            link.download = filename;
            link.style.display = 'none';

            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            URL.revokeObjectURL(url);

            if (showToast) showToastNat('success', 'Download started!');
            return { method: 'mobile-blob-download', success: true };
        } catch (error) {
            console.warn('‚ö†Ô∏è Mobile blob download failed:', error.message);
        }
    }

    // 4Ô∏è‚É£ MOBILE FALLBACK - OPEN IN NEW TAB
    console.log('üìÇ Mobile opening in new tab');
    try {
        window.open(imageUrl, '_blank');

        let message = 'Image opened in new tab';
        if (caps.platform.android) {
            message = 'Tap and hold image to save';
        } else {
            message = 'Use browser menu to save image';
        }

        if (showToast) showToastNat('info', message);
        return { method: 'mobile-open-tab', success: true };
    } catch (error) {
        console.error('‚ùå All mobile methods failed:', error);
        if (showToast) showToastNat('error', 'Download failed - please check image URL');
        return { method: 'failed', success: false, error: error.message };
    }
}

// üîî –û–°–¢–û–†–û–ñ–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –° –¢–û–°–¢–û–ú - –ù–ï –ó–ê–í–ò–°–ò–¢ –û–¢ –í–ù–ï–®–ù–ò–• –ú–û–î–£–õ–ï–ô
function showToastNat(type, message) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º - –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ—É–Ω–∫—Ü–∏—è showToast –≤ window
    if (window.showToast && typeof window.showToast === 'function') {
        window.showToast(type, message);
        return;
    }

    // Fallback implementation - –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    const emoji = {
        success: '‚úÖ',
        error: '‚ùå',
        info: '‚ÑπÔ∏è',
        warning: '‚ö†Ô∏è'
    };
    console.log(`${emoji[type] || 'üìå'} ${message}`);
}

// üí§ Haptic feedback abstraction
export function triggerHapticFeedback(type = 'light') {
    if (!navigator.vibrate) return false;

    const patterns = {
        light: 50,
        medium: [50, 50, 50],
        heavy: [100, 50, 100],
        success: [100, 50, 100, 50, 100],
        error: [200, 50, 200],
        warning: [50, 100, 50, 100, 50]
    };

    const pattern = patterns[type] || patterns.light;
    navigator.vibrate(pattern);
    return true;
}

// ‚ö° –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
let deviceCapabilitiesCache = null;
let deviceCapabilitiesTimestamp = 0;
const CACHE_DURATION = 30000; // 30 —Å–µ–∫—É–Ω–¥ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è

// üß† Smart platform detection with cached results
export function getSmartDeviceCapabilities(forceRefresh = false) {
    const now = Date.now();

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ –∞–∫—Ç—É–∞–ª–µ–Ω –∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º
    if (!forceRefresh && deviceCapabilitiesCache && (now - deviceCapabilitiesTimestamp) < CACHE_DURATION) {
        return deviceCapabilitiesCache;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    const fresh = getDeviceCapabilities();

    // –†–∞—Å—à–∏—Ä—è–µ–º –ª–æ–≥–∏–∫—É —É–º–Ω—ã–º–∏ –≤—ã–≤–æ–¥–∞–º–∏
    const smart = {
        ...fresh,

        // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        recommendedStrategy: getRecommendedDownloadStrategy(fresh),

        // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
        formats: {
            webp: supportsFormat('image/webp'),
            avif: supportsFormat('image/avif'),
            heic: fresh.platform.ios && fresh.platform.mobile,
            jpeg: true,
            png: true
        },

        // –¢–∞–π–º–∏–Ω–≥–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        timings: {
            imageFetchTimeout: fresh.platform.mobile ? 10000 : 5000,
            shareTimeout: fresh.platform.mobile ? 5000 : 3000,
            downloadTimeout: fresh.platform.mobile ? 8000 : 4000
        }
    };

    // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    deviceCapabilitiesCache = smart;
    deviceCapabilitiesTimestamp = now;

    console.log('üîç Smart device capabilities detected:', smart);
    return smart;
}

// üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function getRecommendedDownloadStrategy(caps) {
    // Mobile —Å Share API - –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
    if (caps.platform.mobile && caps.api.share && caps.api.canShare) {
        return 'native-share';
    }

    // iOS - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    if (caps.platform.ios) {
        return 'ios-open';
    }

    // Chrome/Edge - blob download
    if (caps.api.blobUrl && caps.features.download) {
        return 'blob-download';
    }

    // Firefox - url download
    if (caps.api.download) {
        return 'url-download';
    }

    // Fallback
    return 'open-tab';
}

// üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ canvas
function supportsFormat(format) {
    try {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        return ctx.getImageData && canvas.toDataURL(format).indexOf(format) > -1;
    } catch (e) {
        return false;
    }
}


// üîß Utility Functions
export function generateUUIDv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        const r = Math.random() * 16 | 0;
        const v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}

export function sanitizeJsonString(str) {
    if (typeof str !== 'string') return str;

    return str
        .replace(/\\/g, '\\\\')  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª—ç—à–∏
        .replace(/"/g, '\\"')    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏
        .replace(/\n/g, '\\n')   // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã –Ω–∞ \n
        .replace(/\r/g, '\\r')   // –ó–∞–º–µ–Ω—è–µ–º \r
        .replace(/\t/g, '\\t');  // –ó–∞–º–µ–Ω—è–µ–º —Ç–∞–±—É–ª—è—Ü–∏–∏
}

// –§—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–∞–∫ DataURL
export function readFileAsDataURL(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result);
        reader.onerror = reject;
        reader.readAsDataURL(file);
    });
}

// –§—É–Ω–∫—Ü–∏—è –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export function maybeCompressImage(dataUrl, maxW = 1024, maxH = 1024, quality = 0.9) {
    return new Promise(resolve => {
        const img = new Image();
        img.onload = () => {
            let w = img.width, h = img.height;
            const ratio = Math.min(maxW / w, maxH / h, 1);
            w = Math.round(w * ratio);
            h = Math.round(h * ratio);

            const canvas = document.createElement('canvas');
            canvas.width = w;
            canvas.height = h;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0, w, h);
            resolve(canvas.toDataURL('image/jpeg', quality));
        };
        img.onerror = () => resolve(dataUrl);
        img.src = dataUrl;
    });
}

// üçÉ –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–Ω–µ–≥–æ–ø–∞–¥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
export function createSnowflake() {
    const snowflake = document.createElement('div');
    snowflake.className = 'snowflake';

    // üî• –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –º–µ–ª–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –±–µ–∑ –æ–∫–∞–Ω—Ç–æ–≤–∫–∏
    const snowSymbols = ['¬∑', '‚Ä¢', '‚ó¶', '*', '‚ÅÉ', '.'];
    snowflake.textContent = snowSymbols[Math.floor(Math.random() * snowSymbols.length)];

    // üî• –¢–æ–ª—å–∫–æ –º–µ–ª–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –±–æ–ª–µ–µ –ø–ª–æ—Ç–Ω–æ–≥–æ —Å–Ω–µ–≥–æ–ø–∞–¥–∞
    const sizes = ['extra-small', 'small', 'mini'];
    const randomSize = sizes[Math.floor(Math.random() * sizes.length)];
    snowflake.classList.add(randomSize);

    // üî• –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
    snowflake.style.left = Math.random() * 150 + 'vw';

    // üî• –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–ê–Ø –°–¢–ê–†–¢–û–í–ê–Ø –ü–û–ó–ò–¶–ò–Ø –í–´–®–ï –î–ò–°–ü–õ–ï–Ø: –æ—Ç -100vh –¥–æ -20vh (–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–æ!)
    snowflake.style.top = -(Math.random() * 80 + 20) + 'vh'; // –æ—Ç -100vh –¥–æ -20vh —Ä–∞–Ω–¥–æ–º–Ω–æ

    // üî• –ù–ï –ü–õ–ê–í–ù–´–ô –°–¢–ê–†–¢: –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
    snowflake.style.animationDelay = '0s'; // –ú–ì–ù–û–í–ï–ù–ù–û –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏!

    // üî• –ü–õ–ê–í–ù–û–ï –ü–û–Ø–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç—å –∏ fade in –≤ CSS
    snowflake.style.opacity = '0';

    return snowflake;
}

export function startSnowfall() {
    const snowfallContainer = document.querySelector('.snowfall');
    if (!snowfallContainer) {
        console.warn('Snowfall container not found');
        return;
    }

    // üî• –ë–û–õ–¨–®–ï –°–ù–ï–ñ–ò–ù–û–ö –¥–ª—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
    const maxSnowflakes = 900;
    for (let i = 0; i < maxSnowflakes; i++) {
        const snowflake = createSnowflake();
        snowfallContainer.appendChild(snowflake);
    }

    console.log(`‚ùÑÔ∏è Rich snowfall started - ${maxSnowflakes} snowflakes from above`);

    // üî• –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏
    setInterval(() => {
        if (snowfallContainer.children.length < maxSnowflakes) {
            const snowflake = createSnowflake();
            snowfallContainer.appendChild(snowflake);
        }
    }, 1400); // –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã –¥–æ–±–∞–≤–ª—è–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
}

export function stopSnowfall() {
    const snowfallContainer = document.querySelector('.snowfall');
    if (!snowfallContainer) return;

    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–Ω–µ–∂–∏–Ω–∫–∏
    snowfallContainer.innerHTML = '';
    console.log('‚ùÑÔ∏è Snowfall stopped - all snowflakes removed');
}

console.log('üéØ Utils module loaded successfully');

// üí∞ BALANCE MANAGEMENT - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
export function updateUserBalance(newBalance) {
    console.log(`üí∞ updateUserBalance called with: ${newBalance}`);

    try {
        // 1. –û–±–Ω–æ–≤–ª—è–µ–º appState
        if (window.appState) {
            window.appState.userCredits = newBalance;
            console.log(`‚úÖ appState.userCredits updated to: ${newBalance}`);
        }

        // 2. –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –±–∞–ª–∞–Ω—Å–∞
        if (window.appState && window.appState.balanceHistory) {
            const entry = {
                balance: newBalance,
                timestamp: Date.now(),
                reason: 'generation_complete'
            };
            window.appState.balanceHistory.push(entry);
            window.appState.saveBalanceHistory();
            console.log(`üìä Balance history entry added: ${entry.balance} credits`);
        }

        // 3. –û–±–Ω–æ–≤–ª—è–µ–º UI —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ navigation-manager
        if (window.updateUserBalanceDisplay) {
            window.updateUserBalanceDisplay(newBalance);
            console.log(`üîÑ UI balance display updated`);
        } else {
            console.warn('‚ö†Ô∏è updateUserBalanceDisplay function not available');
        }

    } catch (error) {
        console.error('‚ùå Error in updateUserBalance:', error);
    }
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–æ–±–∞–ª—å–Ω–æ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å parallel-generation.js
window.updateUserBalance = updateUserBalance;

console.log('üí∞ Balance management initialized');

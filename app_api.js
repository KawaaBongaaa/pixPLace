// App configuration - –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® BOT TOKEN!
const BOT_TOKEN = 'YOUR_BOT_TOKEN_HERE'; // ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –¢–û–ö–ï–ù!
const API_URL = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;

// App state
let tg = window.Telegram?.WebApp;
let selectedStyle = 'realistic';
let isGenerating = false;
let isTelegramApp = false;
let currentTheme = 'light';
let userId = null;
let generationHistory = [];
let currentGenerationId = null;

// Initialize app
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ App loaded');
    loadHistory();
    initTelegramApp();
    initEventListeners();
});

function initTelegramApp() {
    console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp...');

    if (typeof window.Telegram === 'undefined' || !window.Telegram.WebApp) {
        console.log('‚ö†Ô∏è Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        showStatus('‚ö†Ô∏è –û—Ç–∫—Ä–æ–π—Ç–µ —á–µ—Ä–µ–∑ Telegram –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏', 'info');
        return;
    }

    tg = window.Telegram.WebApp;
    console.log('‚úÖ Telegram WebApp –Ω–∞–π–¥–µ–Ω');

    try {
        tg.ready();
        tg.expand();
        isTelegramApp = true;

        // Get user data
        if (tg.initDataUnsafe?.user) {
            userId = tg.initDataUnsafe.user.id;
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', tg.initDataUnsafe.user.first_name);
            console.log('üÜî User ID:', userId);
        }

        // Setup main button
        if (tg.MainButton) {
            tg.MainButton.setText('‚ú® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
            tg.MainButton.onClick(generateImage);
            tg.MainButton.show();
            console.log('‚úÖ MainButton –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
        }

        showStatus('üì± –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Telegram', 'success');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showStatus('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram', 'error');
    }
}

function initEventListeners() {
    // Style buttons
    document.querySelectorAll('.style-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            document.querySelectorAll('.style-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            selectedStyle = this.dataset.style;

            if (tg?.HapticFeedback) {
                tg.HapticFeedback.impactOccurred('light');
            }

            console.log('üé® –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å:', selectedStyle);
        });
    });

    // Auto-resize textarea
    const textarea = document.getElementById('prompt');
    if (textarea) {
        textarea.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = this.scrollHeight + 'px';
        });
    }
}

function changeTheme() {
    currentTheme = currentTheme === 'light' ? 'dark' : 'light';
    document.body.setAttribute('data-theme', currentTheme);

    if (tg?.HapticFeedback) {
        tg.HapticFeedback.impactOccurred('light');
    }

    console.log('üé® –¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:', currentTheme);
}

async function generateImage() {
    if (isGenerating) return;

    const prompt = document.getElementById('prompt').value.trim();
    const quality = document.getElementById('quality').value;

    console.log('üöÄ –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
    console.log('üìù –ü—Ä–æ–º–ø—Ç:', prompt);
    console.log('üé® –°—Ç–∏–ª—å:', selectedStyle);
    console.log('‚öôÔ∏è –ö–∞—á–µ—Å—Ç–≤–æ:', quality);

    // Validation
    if (!prompt) {
        showStatus('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'error');
        if (tg?.HapticFeedback) {
            tg.HapticFeedback.notificationOccurred('error');
        }
        return;
    }

    if (prompt.length < 5) {
        showStatus('‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)', 'error');
        return;
    }

    // Check bot token
    if (BOT_TOKEN === 'YOUR_BOT_TOKEN_HERE') {
        showStatus('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å BOT_TOKEN –≤ –∫–æ–¥–µ', 'error');
        return;
    }

    isGenerating = true;
    currentGenerationId = Date.now();

    // Add to history immediately
    const historyItem = {
        id: currentGenerationId,
        prompt: prompt,
        style: selectedStyle,
        quality: quality,
        timestamp: new Date().toISOString(),
        status: 'pending',
        result: null
    };

    generationHistory.unshift(historyItem);
    saveHistory();

    showGeneratingScreen();

    try {
        await sendGenerationRequest(prompt, selectedStyle, quality);

        // Start polling for result
        startResultPolling(currentGenerationId);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
        showStatus('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: ' + error.message, 'error');
        updateHistoryItem(currentGenerationId, 'error', null, error.message);
        isGenerating = false;
        showMain();
    }
}

async function sendGenerationRequest(prompt, style, quality) {
    const requestData = {
        action: 'generate_image',
        prompt: prompt,
        style: style,
        quality: quality,
        user_id: userId,
        user_name: tg?.initDataUnsafe?.user?.first_name || 'Guest',
        timestamp: new Date().toISOString(),
        generation_id: currentGenerationId
    };

    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç—É
    const message = `üé® WEB_APP_REQUEST
${JSON.stringify(requestData, null, 2)}`;

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:', message);

    const response = await fetch(API_URL, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            chat_id: userId,
            text: message,
            parse_mode: 'HTML'
        })
    });

    if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`HTTP ${response.status}: ${errorData.description || 'Unknown error'}`);
    }

    const result = await response.json();
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ:', result);

    return result;
}

function startResultPolling(generationId) {
    let attempts = 0;
    const maxAttempts = 60; // 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º

    const pollInterval = setInterval(() => {
        attempts++;

        // Update progress
        const progress = Math.min((attempts / maxAttempts) * 100, 95);
        updateProgress(progress, `–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º... (${attempts}/${maxAttempts})`);

        // Check for result in history (—Å–∏–º—É–ª—è—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–¥–µ—Ç –æ—Ç –±–æ—Ç–∞)
        const historyItem = generationHistory.find(item => item.id === generationId);

        if (attempts >= maxAttempts) {
            clearInterval(pollInterval);
            updateHistoryItem(generationId, 'timeout', null, '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è');
            showStatus('‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∑–∂–µ.', 'error');
            isGenerating = false;
            showMain();
            return;
        }

        // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ—Ç –±–æ—Ç–∞)
        if (attempts === 10) { // –°–∏–º—É–ª—è—Ü–∏—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            clearInterval(pollInterval);
            simulateResult(generationId);
        }

    }, 5000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
}

function simulateResult(generationId) {
    // –≠—Ç–æ —Å–∏–º—É–ª—è—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ—Ç Make/–±–æ—Ç–∞
    const mockImageUrl = 'https://picsum.photos/512/512?random=' + generationId;

    updateHistoryItem(generationId, 'success', mockImageUrl);
    showResult(generationId);
    isGenerating = false;
}

function updateProgress(percentage, text) {
    const progressFill = document.querySelector('.progress-fill');
    const progressText = document.getElementById('progressText');

    if (progressFill) {
        progressFill.style.width = percentage + '%';
    }

    if (progressText) {
        progressText.textContent = text;
    }
}

function updateHistoryItem(id, status, result = null, error = null) {
    const itemIndex = generationHistory.findIndex(item => item.id === id);
    if (itemIndex !== -1) {
        generationHistory[itemIndex].status = status;
        if (result) generationHistory[itemIndex].result = result;
        if (error) generationHistory[itemIndex].error = error;
        saveHistory();
    }
}

function showGeneratingScreen() {
    hideAllScreens();
    document.getElementById('generatingScreen').classList.add('active');

    // Update main button
    if (isTelegramApp && tg?.MainButton) {
        tg.MainButton.setText('‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...');
        tg.MainButton.hide();
    }

    updateProgress(10, '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...');
}

function showResult(generationId) {
    const historyItem = generationHistory.find(item => item.id === generationId);
    if (!historyItem) return;

    hideAllScreens();
    document.getElementById('resultScreen').classList.add('active');

    const resultContent = document.getElementById('resultContent');
    resultContent.innerHTML = `
        <img src="${historyItem.result}" alt="Generated Image" class="result-image" />
        <div class="result-info">
            <h4>üìù –ü—Ä–æ–º–ø—Ç:</h4>
            <p>${historyItem.prompt}</p>
            <h4>üé® –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</h4>
            <p>–°—Ç–∏–ª—å: ${historyItem.style} | –ö–∞—á–µ—Å—Ç–≤–æ: ${historyItem.quality}</p>
            <h4>‚è∞ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:</h4>
            <p>${new Date(historyItem.timestamp).toLocaleString('ru-RU')}</p>
        </div>
    `;

    // Update main button
    if (isTelegramApp && tg?.MainButton) {
        tg.MainButton.setText('‚ú® –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ');
        tg.MainButton.show();
    }

    if (tg?.HapticFeedback) {
        tg.HapticFeedback.notificationOccurred('success');
    }
}

function showHistory() {
    hideAllScreens();
    document.getElementById('historyScreen').classList.add('active');

    const historyContent = document.getElementById('historyContent');

    if (generationHistory.length === 0) {
        historyContent.innerHTML = `
            <div class="empty-history">
                <p>–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</p>
                <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!</p>
            </div>
        `;
    } else {
        historyContent.innerHTML = generationHistory.map(item => `
            <div class="history-item">
                <div class="history-item-header">
                    <span class="history-item-date">${new Date(item.timestamp).toLocaleString('ru-RU')}</span>
                    <span class="history-item-status ${item.status}">${getStatusText(item.status)}</span>
                </div>
                <div class="history-item-prompt">${item.prompt}</div>
                <div class="history-item-details">
                    <span>üé® ${item.style}</span>
                    <span>‚öôÔ∏è ${item.quality}</span>
                </div>
                ${item.result ? `<img src="${item.result}" alt="Generated" class="history-item-image" />` : ''}
                ${item.error ? `<p style="color: var(--error-text); font-size: 12px; margin-top: 8px;">‚ùå ${item.error}</p>` : ''}
            </div>
        `).join('');
    }

    // Update main button
    if (isTelegramApp && tg?.MainButton) {
        tg.MainButton.setText('‚Üê –ù–∞–∑–∞–¥ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
        tg.MainButton.show();
    }
}

function getStatusText(status) {
    switch (status) {
        case 'pending': return '‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è';
        case 'success': return '‚úÖ –ì–æ—Ç–æ–≤–æ';
        case 'error': return '‚ùå –û—à–∏–±–∫–∞';
        case 'timeout': return '‚è∞ –¢–∞–π–º–∞—É—Ç';
        default: return status;
    }
}

function showMain() {
    hideAllScreens();
    document.getElementById('mainScreen').classList.add('active');

    // Update main button
    if (isTelegramApp && tg?.MainButton) {
        tg.MainButton.setText('‚ú® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
        tg.MainButton.show();
    }
}

function hideAllScreens() {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
}

function newGeneration() {
    showMain();
}

function cancelGeneration() {
    if (currentGenerationId) {
        updateHistoryItem(currentGenerationId, 'cancelled', null, '–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    }
    isGenerating = false;
    showMain();
}

function clearHistory() {
    if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–π?')) {
        generationHistory = [];
        saveHistory();
        showHistory();

        if (tg?.HapticFeedback) {
            tg.HapticFeedback.impactOccurred('medium');
        }
    }
}

function saveHistory() {
    try {
        localStorage.setItem('generationHistory', JSON.stringify(generationHistory));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
    }
}

function loadHistory() {
    try {
        const saved = localStorage.getItem('generationHistory');
        if (saved) {
            generationHistory = JSON.parse(saved);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        generationHistory = [];
    }
}

function showStatus(message, type = 'info') {
    const statusDiv = document.getElementById('status');
    if (statusDiv) {
        statusDiv.querySelector('span').textContent = message;
        statusDiv.className = `status ${type}`;

        if (type === 'success') {
            setTimeout(() => {
                statusDiv.style.display = 'none';
            }, 3000);
        }
    }
}

// Global functions for testing and debugging
window.testGeneration = function() {
    document.getElementById('prompt').value = '–∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –º–æ—Ä–µ–º';
    generateImage();
};

window.getAppInfo = function() {
    return {
        telegramAvailable: !!tg,
        isTelegramApp: isTelegramApp,
        selectedStyle: selectedStyle,
        isGenerating: isGenerating,
        currentTheme: currentTheme,
        userId: userId,
        historyCount: generationHistory.length,
        botTokenConfigured: BOT_TOKEN !== 'YOUR_BOT_TOKEN_HERE'
    };
};

window.setBotToken = function(token) {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    BOT_TOKEN = token;
    console.log('‚úÖ Bot token —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
};

console.log('üéØ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:');
console.log('- testGeneration() - —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
console.log('- getAppInfo() - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
console.log('- setBotToken("your_token") - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω');
console.log('‚ö†Ô∏è –ù–ï –ó–ê–ë–£–î–¨–¢–ï –ó–ê–ú–ï–ù–ò–¢–¨ BOT_TOKEN –í –ö–û–î–ï!');
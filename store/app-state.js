// store/app-state.js - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export class AppStateManager {
    constructor() {
        this.listeners = new Set();
        this.state = {
            // –Ø–∑—ã–∫ –∏ —Ç–µ–º–∞ (—Ñ–ª–∞–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞)
            language: 'en',
            isLanguageSetByUser: false, // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤—ã–±—Ä–∞–ª —è–∑—ã–∫ vs –¥–µ—Ñ–æ–ª—Ç –±—Ä–∞—É–∑–µ—Ä–∞
            theme: 'dark',

            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user: {
                id: null,
                name: null,
                credits: null,
                username: null,
                language: 'en',
                isPremium: false
            },

            // Telegram –æ–±—ä–µ–∫—Ç (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            tg: null,

            // –ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
            generationHistory: [],
            currentGeneration: null,

            // –ë–∞–ª–∞–Ω—Å –∏ –∏—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞
            balanceHistory: [],

            // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userImageState: {
                images: [] // –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ {id, file, dataUrl, uploadedUUID}
            },

            // –°—Ç–∏–ª—å (–¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
            selectedStyle: 'realistic',

            // –¢–∞–π–º–µ—Ä—ã
            startTime: null,
            timerInterval: null,

            // –°–Ω–µ–≥–æ–ø–∞–¥
            snowfallEnabled: false,

            // UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            isGenerating: false
        };
    }

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    subscribe(callback) {
        this.listeners.add(callback);
        return () => this.listeners.delete(callback);
    }

    // –û—Ç–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    unsubscribeAll() {
        this.listeners.clear();
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    getState() {
        return { ...this.state };
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ü–µ–ª–∏–∫–æ–º
    setState(newState) {
        const oldState = { ...this.state };
        this.state = { ...newState };
        this._notifyListeners(this.state, oldState);
    }

    // –ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    updateState(updates) {
        const oldState = { ...this.state };
        this.state = { ...this.state, ...updates };
        this._notifyListeners(this.state, oldState);
    }

    // –î–æ—Å—Ç—É–ø –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —á–∞—Å—Ç—è–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    get language() { return this.state.language; }
    get theme() { return this.state.theme; }
    get user() { return this.state.user; }
    get generationHistory() { return this.state.generationHistory; }
    get currentGeneration() { return this.state.currentGeneration; }
    set currentGeneration(value) { this.state.currentGeneration = value; }
    get userImageState() { return this.state.userImageState; }
    get selectedStyle() { return this.state.selectedStyle; }
    set selectedStyle(value) { this.updateState({ selectedStyle: value }); }
    get tg() { return this.state.tg; }
    set tg(value) { this.updateState({ tg: value }); }
    get isLanguageSetByUser() { return this.state.isLanguageSetByUser; }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram –æ–±—ä–µ–∫—Ç–∞
    setTg(tgObj) {
        this.tg = tgObj;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
    async setLanguage(lang) {
        this.updateState({
            language: lang,
            isLanguageSetByUser: true // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –≤—ã–±—Ä–∞–ª —ç—Ç–æ—Ç —è–∑—ã–∫
        });
        document.body.setAttribute('data-lang', lang);

        // üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú DICTIONARY MANAGER –î–õ–Ø LAZY LOADING (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω)
        if (window.dictionaryManager) {
            await window.dictionaryManager.setLanguage(lang);
        }

        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
        this.saveSettings();
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã
    setTheme(theme) {
        console.log('üé® setTheme called with:', theme, 'current:', this.state.theme);
        const oldTheme = this.state.theme;
        this.updateState({ theme });

        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–õ–Ø 'AUTO' –¢–ï–ú–´: –ò—Å–ø–æ–ª—å–∑—É–µ–º 'auto' –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è CSS media queries
        document.body.setAttribute('data-theme', theme);
        console.log('üé® Theme set to:', theme, 'DOM attribute:', theme, '(was:', oldTheme, ')');

        // üî• –î–û–ë–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏!
        this.saveSettings();
        console.log('üíæ Theme saved to localStorage:', theme);

        // üî• –ù–û–í–û–ï: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã –¥–ª—è auto —Ä–µ–∂–∏–º–∞
        this.setupAutoThemeListener(theme === 'auto');
    }

    // üî• –ù–û–í–û–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã –±—Ä–∞—É–∑–µ—Ä–∞ (light/dark)
    detectSystemTheme() {
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            return 'dark';
        }
        return 'light';
    }

    // üî• –ù–û–í–û–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã (–¥–ª—è auto —Ä–µ–∂–∏–º–∞)
    setupAutoThemeListener(isAutoMode) {
        // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª—É—à–∞—Ç–µ–ª—å –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª
        if (this.themeChangeListener) {
            this.themeChangeListener.removeEventListener('change', this.themeChangeHandler);
            this.themeChangeListener = null;
            this.themeChangeHandler = null;
        }

        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω auto —Ä–µ–∂–∏–º - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å
        if (isAutoMode) {
            const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã —Å–∏—Å—Ç–µ–º—ã
            this.themeChangeHandler = (event) => {
                const newSystemTheme = event.matches ? 'dark' : 'light';
                console.log('üåì System theme changed to:', newSystemTheme, '(auto mode)');
                document.body.setAttribute('data-theme', newSystemTheme);
            };

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å
            mediaQuery.addEventListener('change', this.themeChangeHandler);
            this.themeChangeListener = mediaQuery;

            console.log('üéØ Auto theme listener activated');
        } else {
            console.log('üéØ Auto theme listener deactivated');
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    setUser(userData) {
        this.updateState({
            user: { ...this.state.user, ...userData }
        });
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    setGenerationHistory(history) {
        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–†–Ø–î–ö–ê: –°–û–†–¢–ò–†–£–ï–ú –ú–ê–°–°–ò–í –ü–û ID –í –û–ë–†–ê–¢–ù–û–ú –ü–û–†–Ø–î–ö–ï –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –ò–∑ localStorage
        // –ù–æ–≤—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–ï–†–í–´–ú–ò (–Ω–æ–≤—ã–µ ID - –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞)
        const sortedHistory = Array.isArray(history) ? history.sort((a, b) => b.id - a.id) : history;
        this.updateState({ generationHistory: sortedHistory });
    }

    addGeneration(generation) {
        const newHistory = [...this.state.generationHistory, generation];
        this.updateState({ generationHistory: newHistory });
    }

    updateGeneration(id, updates) {
        const newHistory = this.state.generationHistory.map(gen =>
            gen.id === id ? { ...gen, ...updates } : gen
        );
        this.updateState({ generationHistory: newHistory });
    }

    // –ú–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    saveHistory() {
        try {
            localStorage.setItem('generationHistory', JSON.stringify(this.state.generationHistory));
        } catch (error) {
            console.error('Failed to save history:', error);
            // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ sessionStorage –∫–∞–∫ fallback
            try {
                sessionStorage.setItem('generationHistory', JSON.stringify(this.state.generationHistory));
            } catch (fallbackError) {
                console.error('Fallback storage also failed:', fallbackError);
            }
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (–∏–∑ —Å—Ç–∞—Ä–æ–≥–æ AppState)
    saveSettings() {
        try {
            localStorage.setItem('appSettings', JSON.stringify({
                language: this.state.language,
                isLanguageSetByUser: this.state.isLanguageSetByUser, // üî• –î–û–ë–ê–í–õ–ï–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥!
                theme: this.state.theme
            }));
        } catch (error) {
            console.error('Failed to save settings:', error);
        }
    }

    loadSettings() {
        console.log('üîÑ STARTING loadSettings() function');
        try {
            const storedSettings = localStorage.getItem('appSettings');
            console.log('üíæ Loading settings from localStorage:', storedSettings);
            console.log('üìã localStorage contents:', Object.keys(localStorage));

            const settings = storedSettings ? JSON.parse(storedSettings) : {};
            console.log('‚úÖ Parsed settings:', settings);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–º—É —Å –æ—Ç–∫–∞—Ç–æ–º –Ω–∞ –¥–µ—Ñ–æ–ª—Ç
            const theme = settings.theme || 'dark';
            console.log('üé® Loading theme:', theme);
            this.setTheme(theme);

            // üî• –î–û–ë–ê–í–õ–ï–ù–ò–ï: –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –§–õ–ê–ì isLanguageSetByUser –ò–ó localStorage
            // –° –æ—Ç–∫–∞—Ç–æ–º –Ω–∞ false
            const isLanguageSetByUser = settings.isLanguageSetByUser !== undefined ? settings.isLanguageSetByUser : false;
            console.log('üåç Loading isLanguageSetByUser:', isLanguageSetByUser);
            this.updateState({ isLanguageSetByUser });

            console.log('‚úÖ Settings loaded successfully');

        } catch (error) {
            console.error('‚ùå Failed to load settings from localStorage:', error);
            // üî• –î–û–ë–ê–í–õ–ï–ù–ò–ï: –û–¢–ö–ê–¢ –ù–ê –î–ï–§–û–õ–¢–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–ò –û–®–ò–ë–ö–ï
            console.warn('‚ö†Ô∏è Using default settings fallback');
            this.setTheme('dark'); // –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ç–µ–º–∞
            this.updateState({ isLanguageSetByUser: false }); // –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ñ–ª–∞–≥ —è–∑—ã–∫–∞
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º
    saveBalanceHistory() {
        try {
            localStorage.setItem('balanceHistory', JSON.stringify(this.state.balanceHistory));
        } catch (error) {
            console.error('Failed to save balance history:', error);
        }
    }

    // üî• –ù–û–í–û–ï: –ü—Ä—è–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    saveCurrentBalance() {
        try {
            // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å null - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 0 –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            const balanceToSave = this.state.user?.credits ?? 0;
            localStorage.setItem('currentBalance', balanceToSave);
            console.log('üíæ Current balance saved to localStorage:', balanceToSave, '(was:', this.state.user?.credits, ')');
        } catch (error) {
            console.error('Failed to save current balance:', error);
        }
    }

    // üî• –î–û–ë–ê–í–õ–ï–ù–ò–ï: –ú–µ—Ç–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    initializeDefaults() {
        console.log('üöÄ Initializing default app state...');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        const existingSettings = localStorage.getItem('appSettings');
        if (!existingSettings) {
            console.log('‚öôÔ∏è No settings found, saving defaults...');
            this.saveSettings(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é –±–∞–ª–∞–Ω—Å–∞ –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        const existingBalance = localStorage.getItem('balanceHistory');
        if (!existingBalance) {
            console.log('üí∞ No balance history found, initializing empty...');
            this.saveBalanceHistory(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é
        }

        // üî• –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—ç–∫–∞–ø –±–∞–ª–∞–Ω—Å–∞ –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
        const existingBalanceBackup = localStorage.getItem('currentBalance');
        const balanceValue = existingBalanceBackup ? parseFloat(existingBalanceBackup) : NaN;

        if (!existingBalanceBackup || isNaN(balanceValue) || balanceValue < 0) {
            console.log('üí∞ No valid balance backup found, initializing with 20 credits...');
            // –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (existingBalanceBackup !== null) {
                localStorage.removeItem('currentBalance');
                console.log('üßπ Cleared corrupted balance backup');
            }

            this.updateState({
                user: {
                    ...this.state.user,
                    credits: 20
                }
            });
            this.state.user.credits = 20; // üî• –î–û–ë–ê–í–õ–ï–ù–ò–ï: –ü—Ä—è–º–æ–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ
            console.log('üí∞ State directly set to:', this.state.user.credits);
            this.saveCurrentBalance(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        } else {
            console.log('üí∞ Valid balance backup found:', balanceValue);
        }

        console.log('‚úÖ Defaults initialized successfully');
    }

    loadBalanceHistory() {
        try {
            const storedHistory = localStorage.getItem('balanceHistory');
            console.log('üí∞ Loading balance history from localStorage:', storedHistory);

            if (storedHistory) {
                const history = JSON.parse(storedHistory);
                console.log('‚úÖ Parsed balance history:', history);

                if (Array.isArray(history)) {
                    this.updateState({ balanceHistory: history });

                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Å–∞–º—ã–º —Å–≤–µ–∂–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                    if (history.length > 0) {
                        const latestEntry = history[history.length - 1];
                        if (latestEntry && typeof latestEntry.balance === 'number') {
                            console.log('ü™ô Setting current balance to:', latestEntry.balance);
                            this.updateState({
                                user: {
                                    ...this.state.user,
                                    credits: latestEntry.balance
                                }
                            });
                        } else {
                            console.warn('‚ö†Ô∏è Latest balance entry is invalid:', latestEntry);
                        }
                    } else {
                        console.log('üì≠ No balance history entries found - checking direct backup...');
                        // üî• –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±—ç–∫–∞–ø –¥–∞–∂–µ –ø—Ä–∏ –ø—É—Å—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏
                        const directBalance = localStorage.getItem('currentBalance');
                        console.log('üîç DEBUG: directBalance from localStorage:', directBalance, 'type:', typeof directBalance);

                        if (directBalance !== null) {
                            const balance = parseFloat(directBalance);
                            console.log('üßÆ DEBUG: parsed balance:', balance, 'isNaN:', isNaN(balance), 'balance >= 0:', balance >= 0);

                            if (!isNaN(balance) && balance >= 0) {
                                console.log('ü™ô Loaded balance from direct backup:', balance);
                                this.updateState({
                                    balanceHistory: [],
                                    user: {
                                        ...this.state.user,
                                        credits: balance
                                    }
                                });
                                // üî• –î–û–ë–ê–í–õ–ï–ù–ò–ï: –ü—Ä—è–º–æ–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ credits —á—Ç–æ–± –∏–∑–±–µ–∂–∞—Ç—å racing conditions
                                this.state.user.credits = balance;
                                console.log('üí∞ State directly set to:', this.state.user.credits);
                            } else {
                                console.warn('‚ö†Ô∏è Invalid direct balance backup:', directBalance, 'parsed as:', balance);
                                this.updateState({
                                    balanceHistory: [],
                                    user: {
                                        ...this.state.user,
                                        credits: 20
                                    }
                                });
                            }
                        } else {
                            console.log('üì≠ No direct balance backup found - setting initial 20 credits');
                            this.updateState({
                                balanceHistory: [],
                                user: {
                                    ...this.state.user,
                                    credits: 20
                                }
                            });
                        }
                    }
                } else {
                    console.error('‚ùå Balance history is not an array:', history);
                    this.updateState({ balanceHistory: [] });
                    // üî• –ù–û–í–û–ï: –ü—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–∂–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±—ç–∫–∞–ø
                    const directBalance = localStorage.getItem('currentBalance');
                    if (directBalance !== null) {
                        const balance = parseFloat(directBalance);
                        if (!isNaN(balance) && balance >= 0) {
                            console.log('ü™ô Recovered balance from direct backup after invalid history:', balance);
                            this.updateState({
                                user: {
                                    ...this.state.user,
                                    credits: balance
                                }
                            });
                        } else {
                            this.updateState({
                                user: {
                                    ...this.state.user,
                                    credits: 20
                                }
                            });
                        }
                    }
                }
            } else {
                console.log('üì≠ No balance history in localStorage, checking for direct balance backup...');

                // üî• –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–π –±—ç–∫–∞–ø –±–∞–ª–∞–Ω—Å–∞
                const directBalance = localStorage.getItem('currentBalance');
                console.log('üîç DEBUG: directBalance from localStorage:', directBalance, 'type:', typeof directBalance);

                if (directBalance !== null) {
                    const balance = parseFloat(directBalance);
                    console.log('üßÆ DEBUG: parsed balance:', balance, 'isNaN:', isNaN(balance), 'balance >= 0:', balance >= 0);

                    if (!isNaN(balance) && balance >= 0) {
                        console.log('ü™ô Loaded balance from direct backup:', balance);
                        this.updateState({
                            balanceHistory: [],
                            user: {
                                ...this.state.user,
                                credits: balance
                            }
                        });
                    } else {
                        console.warn('‚ö†Ô∏è Invalid direct balance backup:', directBalance, 'parsed as:', balance);
                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        console.log('üéØ Setting initial 20 credits due to invalid backup');
                        this.updateState({
                            balanceHistory: [],
                            user: {
                                ...this.state.user,
                                credits: 20
                            }
                        });
                    }
                } else {
                    console.log('üì≠ No direct balance backup found - setting initial 20 credits');
                    this.updateState({ balanceHistory: [] });
                    // üî• –ù–û–í–û–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    this.updateState({
                        user: {
                            ...this.state.user,
                            credits: 20
                        }
                    });
                }
            }

            // üî• –î–û–ë–ê–í–õ–ï–ù–ò–ï: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞
            // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —á—Ç–æ –±–∞–ª–∞–Ω—Å –≤—Å–µ–≥–¥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ
            if (!this.state.user || typeof this.state.user.credits !== 'number' || isNaN(this.state.user.credits) || this.state.user.credits < 0) {
                console.log('‚ö†Ô∏è Balance corrupted or not set, resetting to 20 credits');

                // –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
                try {
                    localStorage.removeItem('balanceHistory');
                    localStorage.removeItem('currentBalance');
                    console.log('üßπ Cleared corrupted balance data from localStorage');
                } catch (cleanupError) {
                    console.warn('‚ùå Failed to cleanup corrupted data:', cleanupError);
                }

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å
                this.updateState({
                    balanceHistory: [],
                    user: {
                        ...this.state.user,
                        credits: 20
                    }
                });
                this.state.user.credits = 20;
                this.saveCurrentBalance();

                console.log('üõ†Ô∏è Balance reset to default 20 credits');
            }

            console.log('‚úÖ Balance loaded successfully');

        } catch (error) {
            console.error('‚ùå Failed to load balance from localStorage:', error);
            // üî• –ù–û–í–û–ï: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä—è–º–æ–π –±—ç–∫–∞–ø
            console.warn('‚ö†Ô∏è Trying direct balance backup as fallback...');

            const directBalance = localStorage.getItem('currentBalance');
            if (directBalance !== null) {
                const balance = parseFloat(directBalance);
                if (!isNaN(balance) && balance >= 0) {
                    console.log('ü™ô Recovered balance from direct backup after error:', balance);
                    this.updateState({
                        balanceHistory: [],
                        user: {
                            ...this.state.user,
                            credits: balance
                        }
                    });
                } else {
                    console.warn('‚ö†Ô∏è Invalid direct balance backup, using default');
                    this.updateState({
                        balanceHistory: [],
                        user: {
                            ...this.state.user,
                            credits: 20
                        }
                    });
                }
            } else {
                console.warn('‚ö†Ô∏è No direct balance backup available, using default');
                this.updateState({ balanceHistory: [] });
                this.updateState({
                    user: {
                        ...this.state.user,
                        credits: 20
                    }
                });
            }
        }
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞
    toggleLanguage() {
        const CONFIG_LANGUAGES = ['en', 'ru', 'es', 'fr', 'de', 'zh', 'pt', 'ar', 'hi', 'ja', 'it', 'ko', 'tr', 'pl', 'vi', 'th'];
        const currentIndex = CONFIG_LANGUAGES.indexOf(this.state.language);
        const nextIndex = (currentIndex + 1) % CONFIG_LANGUAGES.length;
        this.setLanguage(CONFIG_LANGUAGES[nextIndex]);
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
    toggleTheme() {
        const themes = ['light', 'dark', 'auto'];
        const currentIndex = themes.indexOf(this.state.theme);
        const nextIndex = (currentIndex + 1) % themes.length;
        this.setTheme(themes[nextIndex]);
    }



    // –ú–µ—Ç–æ–¥ translate –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç DictionaryManager
    translate(key) {
        return window.dictionaryManager?.translate(key) || key;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    setImageState(imageState) {
        this.updateState({ userImageState: imageState });
    }

    // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è localStorage
    serialize() {
        return {
            language: this.state.language,
            theme: this.state.theme,
            user: this.state.user,
            telegram: this.state.telegram,
            generationHistory: this.state.generationHistory,
            balanceHistory: this.state.balanceHistory
        };
    }

    // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ localStorage
    deserialize(data) {
        if (data.language) this.state.language = data.language;
        if (data.theme) this.state.theme = data.theme;
        if (data.user) this.state.user = { ...this.state.user, ...data.user };
        if (data.telegram) this.state.telegram = { ...this.state.telegram, ...data.telegram };
        if (data.generationHistory) this.state.generationHistory = data.generationHistory;
        if (data.balanceHistory) this.state.balanceHistory = data.balanceHistory;
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    _notifyListeners(newState, oldState) {
        this.listeners.forEach(callback => {
            try {
                callback(newState, oldState);
            } catch (error) {
                console.error('Error in state listener:', error);
            }
        });
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å —É—á–µ—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è backward compatibility
export function translate(key, stateManager) {
    const language = stateManager?.language || 'en';
    return window.dictionaryManager?.translate(key) || key;
}

// store/app-state.js - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export class AppStateManager {
    constructor() {
        this.listeners = new Set();
        this.state = {
            // –Ø–∑—ã–∫ –∏ —Ç–µ–º–∞ (—Ñ–ª–∞–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞)
            language: 'en',
            isLanguageSetByUser: false, // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤—ã–±—Ä–∞–ª —è–∑—ã–∫ vs –¥–µ—Ñ–æ–ª—Ç –±—Ä–∞—É–∑–µ—Ä–∞
            theme: 'dark',

            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user: {
                id: null,
                name: null,
                credits: null,
                username: null,
                language: 'en',
                isPremium: false
            },

            // Telegram –æ–±—ä–µ–∫—Ç (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            tg: null,

            // –ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
            generationHistory: [],
            currentGeneration: null,

            // –ë–∞–ª–∞–Ω—Å –∏ –∏—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞
            balanceHistory: [],

            // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userImageState: {
                images: [] // –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ {id, file, dataUrl, uploadedUUID}
            },

            // –°—Ç–∏–ª—å (–¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
            selectedStyle: 'realistic',

            // –¢–∞–π–º–µ—Ä—ã
            startTime: null,
            timerInterval: null,

            // –°–Ω–µ–≥–æ–ø–∞–¥
            snowfallEnabled: false,

            // UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            isGenerating: false
        };
    }

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    subscribe(callback) {
        this.listeners.add(callback);
        return () => this.listeners.delete(callback);
    }

    // –û—Ç–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    unsubscribeAll() {
        this.listeners.clear();
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    getState() {
        return { ...this.state };
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ü–µ–ª–∏–∫–æ–º
    setState(newState) {
        const oldState = { ...this.state };
        this.state = { ...newState };
        this._notifyListeners(this.state, oldState);
    }

    // –ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    updateState(updates) {
        const oldState = { ...this.state };
        this.state = { ...this.state, ...updates };
        this._notifyListeners(this.state, oldState);
    }

    // –î–æ—Å—Ç—É–ø –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —á–∞—Å—Ç—è–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    get language() { return this.state.language; }
    get theme() { return this.state.theme; }
    get user() { return this.state.user; }
    get generationHistory() { return this.state.generationHistory; }
    get currentGeneration() { return this.state.currentGeneration; }
    set currentGeneration(value) { this.state.currentGeneration = value; }
    get userImageState() { return this.state.userImageState; }
    get selectedStyle() { return this.state.selectedStyle; }
    set selectedStyle(value) { this.updateState({ selectedStyle: value }); }
    get tg() { return this.state.tg; }
    set tg(value) { this.updateState({ tg: value }); }
    get isLanguageSetByUser() { return this.state.isLanguageSetByUser; }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram –æ–±—ä–µ–∫—Ç–∞
    setTg(tgObj) {
        this.tg = tgObj;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
    async setLanguage(lang) {
        this.updateState({
            language: lang,
            isLanguageSetByUser: true // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –≤—ã–±—Ä–∞–ª —ç—Ç–æ—Ç —è–∑—ã–∫
        });
        document.body.setAttribute('data-lang', lang);

        // üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú DICTIONARY MANAGER –î–õ–Ø LAZY LOADING (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω)
        if (window.dictionaryManager) {
            await window.dictionaryManager.setLanguage(lang);
        }

        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
        this.saveSettings();
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã
    setTheme(theme) {
        this.updateState({ theme });
        document.body.setAttribute('data-theme', theme);
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    setUser(userData) {
        this.updateState({
            user: { ...this.state.user, ...userData }
        });
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    setGenerationHistory(history) {
        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–†–Ø–î–ö–ê: –°–û–†–¢–ò–†–£–ï–ú –ú–ê–°–°–ò–í –ü–û ID –í –û–ë–†–ê–¢–ù–û–ú –ü–û–†–Ø–î–ö–ï –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –ò–∑ localStorage
        // –ù–æ–≤—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–ï–†–í–´–ú–ò (–Ω–æ–≤—ã–µ ID - –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞)
        const sortedHistory = Array.isArray(history) ? history.sort((a, b) => b.id - a.id) : history;
        this.updateState({ generationHistory: sortedHistory });
    }

    addGeneration(generation) {
        const newHistory = [...this.state.generationHistory, generation];
        this.updateState({ generationHistory: newHistory });
    }

    updateGeneration(id, updates) {
        const newHistory = this.state.generationHistory.map(gen =>
            gen.id === id ? { ...gen, ...updates } : gen
        );
        this.updateState({ generationHistory: newHistory });
    }

    // –ú–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    saveHistory() {
        try {
            localStorage.setItem('generationHistory', JSON.stringify(this.state.generationHistory));
        } catch (error) {
            console.error('Failed to save history:', error);
            // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ sessionStorage –∫–∞–∫ fallback
            try {
                sessionStorage.setItem('generationHistory', JSON.stringify(this.state.generationHistory));
            } catch (fallbackError) {
                console.error('Fallback storage also failed:', fallbackError);
            }
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (–∏–∑ —Å—Ç–∞—Ä–æ–≥–æ AppState)
    saveSettings() {
        try {
            localStorage.setItem('appSettings', JSON.stringify({
                language: this.state.language,
                isLanguageSetByUser: this.state.isLanguageSetByUser, // üî• –î–û–ë–ê–í–õ–ï–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥!
                theme: this.state.theme
            }));
        } catch (error) {
            console.error('Failed to save settings:', error);
        }
    }

    loadSettings() {
        try {
            const settings = JSON.parse(localStorage.getItem('appSettings') || '{}');

            // üî• –†–ï–ú–û–í–ï–†: –£–ë–†–ê–ù–ê –õ–û–ì–ò–ö–ê –Ø–ó–´–ö–ê - DictionaryManager —Ç–µ–ø–µ—Ä—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —è–∑—ã–∫–∞
            // –Ø–∑—ã–∫ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ DictionaryManager.determineAndSetBaseLanguage()

            if (settings.theme) {
                this.setTheme(settings.theme);
            }

            // üî• –î–û–ë–ê–í–õ–ï–ù–ò–ï: –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –§–õ–ê–ì isLanguageSetByUser –ò–ó localStorage
            if (settings.isLanguageSetByUser !== undefined) {
                this.updateState({ isLanguageSetByUser: settings.isLanguageSetByUser });
            }

        } catch (error) {
            console.error('Failed to load settings:', error);
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º
    saveBalanceHistory() {
        try {
            localStorage.setItem('balanceHistory', JSON.stringify(this.state.balanceHistory));
        } catch (error) {
            console.error('Failed to save balance history:', error);
        }
    }

    loadBalanceHistory() {
        try {
            const history = localStorage.getItem('balanceHistory');
            if (history) {
                this.updateState({ balanceHistory: JSON.parse(history) });
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Å–∞–º—ã–º —Å–≤–µ–∂–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                if (this.state.balanceHistory.length > 0) {
                    const latestEntry = this.state.balanceHistory[this.state.balanceHistory.length - 1];
                    this.updateState({
                        user: {
                            ...this.state.user,
                            credits: latestEntry.balance
                        }
                    });
                }
            } else {
                this.updateState({ balanceHistory: [] });
            }
        } catch (error) {
            console.error('Failed to load balance history:', error);
            this.updateState({ balanceHistory: [] });
        }
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞
    toggleLanguage() {
        const CONFIG_LANGUAGES = ['en', 'ru', 'es', 'fr', 'de', 'zh', 'pt', 'ar', 'hi', 'ja', 'it', 'ko', 'tr', 'pl', 'vi', 'th'];
        const currentIndex = CONFIG_LANGUAGES.indexOf(this.state.language);
        const nextIndex = (currentIndex + 1) % CONFIG_LANGUAGES.length;
        this.setLanguage(CONFIG_LANGUAGES[nextIndex]);
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
    toggleTheme() {
        const themes = ['light', 'dark', 'auto'];
        const currentIndex = themes.indexOf(this.state.theme);
        const nextIndex = (currentIndex + 1) % themes.length;
        this.setTheme(themes[nextIndex]);
    }



    // –ú–µ—Ç–æ–¥ translate –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç DictionaryManager
    translate(key) {
        return window.dictionaryManager?.translate(key) || key;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    setImageState(imageState) {
        this.updateState({ userImageState: imageState });
    }

    // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è localStorage
    serialize() {
        return {
            language: this.state.language,
            theme: this.state.theme,
            user: this.state.user,
            telegram: this.state.telegram,
            generationHistory: this.state.generationHistory,
            balanceHistory: this.state.balanceHistory
        };
    }

    // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ localStorage
    deserialize(data) {
        if (data.language) this.state.language = data.language;
        if (data.theme) this.state.theme = data.theme;
        if (data.user) this.state.user = { ...this.state.user, ...data.user };
        if (data.telegram) this.state.telegram = { ...this.state.telegram, ...data.telegram };
        if (data.generationHistory) this.state.generationHistory = data.generationHistory;
        if (data.balanceHistory) this.state.balanceHistory = data.balanceHistory;
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    _notifyListeners(newState, oldState) {
        this.listeners.forEach(callback => {
            try {
                callback(newState, oldState);
            } catch (error) {
                console.error('Error in state listener:', error);
            }
        });
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å —É—á–µ—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è backward compatibility
export function translate(key, stateManager) {
    const language = stateManager?.language || 'en';
    return window.dictionaryManager?.translate(key) || key;
}

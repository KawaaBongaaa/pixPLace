/**
 * üöÄ Initialization Manager - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–≥—Ä—É–∑–∫—É —Å–ª–æ–≤–∞—Ä–µ–π, —Å–µ—Ä–≤–∏—Å–æ–≤, —è–∑—ã–∫–æ–≤
 */

import { initializeGlobalServices } from '../core/services.js';
import { dictionaryManager } from '../dictionary-manager.js';
import { AppStateManager } from '../store/app-state.js';

export class InitializationManager {
    constructor() {
        this.services = null;
        this.appState = null;
        this.isInitialized = false;

        console.log('üöÄ Initialization Manager created');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     */
    async initializeCore() {
        console.log('üîß Starting core initialization...');

        // –§–∞–∑–∞ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ —è–∑—ã–∫–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        await this.initializeBaseLanguageAndTranslations();

        // –§–∞–∑–∞ 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.appState = new AppStateManager();
        this.appState.initializeDefaults();
        window.appState = this.appState;

        // –§–∞–∑–∞ 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        await this.initializeGlobalServices();

        // –§–∞–∑–∞ 4: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        await this.initializeTelegram();

        // –§–∞–∑–∞ 5: –ó–∞–≤–µ—Ä—à–∞—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await this.finalizeInitialization();

        this.isInitialized = true;
        console.log('‚úÖ Core initialization completed');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ —è–∑—ã–∫–∞ –∏ —Å–ª–æ–≤–∞—Ä–µ–π
     */
    async initializeBaseLanguageAndTranslations() {
        try {
            console.log('üåç Starting language initialization...');

            // –¶–µ–Ω—Ç—Ä–∞–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —è–∑—ã–∫–∞
            const baseLanguage = await dictionaryManager.determineAndSetBaseLanguage();

            // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            dictionaryManager.updateTranslations();

            console.log('‚úÖ Language initialized:', baseLanguage);
        } catch (error) {
            console.error('‚ùå Language initialization failed:', error);
            // Fallback
            try {
                await dictionaryManager.setLanguage('en');
                dictionaryManager.updateTranslations();
            } catch (fallbackError) {
                console.error('‚ùå Fallback language failed:', fallbackError);
            }
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    async initializeGlobalServices() {
        try {
            console.log('üîß Initializing global services...');

            this.services = await initializeGlobalServices(this.appState);
            window.appServices = this.services;

            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if (this.services.appState) {
                this.services.appState.setLanguage(dictionaryManager.currentLanguage);
                console.log('‚úÖ Services initialized and synchronized');
            }
        } catch (error) {
            console.error('‚ùå Services initialization failed:', error);
            // Fallback —Å –º–∏–Ω–∏–º—É–º–æ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            this.services = this.createFallbackServices();
        }
    }

    /**
     * Fallback —Å–µ—Ä–≤–∏—Å—ã –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
     */
    createFallbackServices() {
        return {
            appState: this.appState,
            eventBus: { emit: () => {}, on: () => {} },
            telegram: { initialize: () => Promise.resolve(false) },
            storage: { get: () => null, set: () => {} },
            notifications: { show: (type, message) => console.log(`[${type}] ${message}`) },
            ui: null
        };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
     */
    async initializeTelegram() {
        try {
            let telegramInitialized = false;

            if (this.services.telegram) {
                telegramInitialized = await this.services.telegram.initialize();
                console.log('üì± Telegram initialization result:', telegramInitialized);
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —á–µ–∫–±–æ–∫—Å–∞
            this.initializeNegativePromptCheckbox();

            return telegramInitialized;
        } catch (error) {
            console.error('‚ùå Telegram initialization failed:', error);
            return false;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ–∫–±–æ–∫—Å–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
     */
    initializeNegativePromptCheckbox() {
        const negativePromptCheckbox = document.getElementById('negativePromptCheckbox');
        const negativePromptInput = document.getElementById('negativePromptInput');

        if (negativePromptCheckbox && negativePromptInput) {
            // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
            const defaultNegativePrompt = 'blurry, low quality, deformed, ugly, mutated, extra limbs, poorly drawn face, poorly drawn hands';

            negativePromptCheckbox.addEventListener('change', function() {
                const negativePromptFormGroup = document.getElementById('negativePromptFormGroup');

                if (this.checked) {
                    negativePromptFormGroup.style.display = 'block';
                    negativePromptFormGroup.classList.remove('hidden');

                    if (!negativePromptInput.value.trim()) {
                        negativePromptInput.value = defaultNegativePrompt;
                        const negativeCharCounter = document.getElementById('negativeCharCounter');
                        if (negativeCharCounter) {
                            negativeCharCounter.textContent = defaultNegativePrompt.length;
                        }
                    }
                    console.log('üìù Negative prompt field shown');
                } else {
                    negativePromptFormGroup.style.display = 'none';
                    negativePromptFormGroup.classList.add('hidden');
                    console.log('üö´ Negative prompt field hidden');
                }
            });

            negativePromptInput.placeholder = defaultNegativePrompt;
            console.log('‚úÖ Negative prompt checkbox initialized');
        }
    }

    /**
     * –ó–∞–≤–µ—Ä—à–∞—é—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    async finalizeInitialization() {
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤)
        this.appState.loadSettings();
        console.log('üé® Settings loaded');

        // Maintenance mode –ø—Ä–æ–≤–µ—Ä–∫–∞
        this.setupMaintenanceMode();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
     */
    setupMaintenanceMode() {
        try {
            const CONFIG = window.CONFIG || {};

            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
            localStorage.setItem('pixplace_maintenance_mode', CONFIG.MAINTENANCE_MODE ? 'true' : 'false');

            // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è maintenance.html
            window.CONFIG_MAINTENANCE_MODE = CONFIG.MAINTENANCE_MODE;
            window.MAINTENANCE_LAST_UPDATE = new Date().toISOString();

            console.log('üîß Maintenance mode configured:', CONFIG.MAINTENANCE_MODE);
        } catch (error) {
            console.warn('‚ùå Maintenance mode setup failed:', error);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
     */
    isReady() {
        return this.isInitialized && this.services;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ shutdown
     */
    async shutdown() {
        console.log('üõë Initialization Manager shutting down...');

        // TODO: –û—á–∏—Å—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        console.log('‚úÖ Initialization Manager shutdown complete');
    }
}

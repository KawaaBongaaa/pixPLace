/**
 * üé® Generation Manager - –ú–µ–Ω–µ–¥–∂–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ, –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏
 */



export class GenerationManager {
    constructor() {
        this.isEnabled = false;
        this.currentGeneration = null;
        this.pendingGenerations = [];

        // Callbacks
        this.onAuthRequired = null;

        console.log('üé® Generation Manager created');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    async initialize() {
        console.log('üé® Initializing Generation Manager...');

        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ UI —ç–ª–µ–º–µ–Ω—Ç–∞–º
        this.setupFormHandler();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        this.initializeImageUpload();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        await this.initializeGenerationManager();

        console.log('‚úÖ Generation Manager initialized');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–æ—Ä–º—ã
     * REMOVED: Form handling is done by UI Manager to avoid duplicates
     */
    setupFormHandler() {
        // Form submit is handled by UI Manager to prevent multiple generations
        console.log('üìù Form handler skipped (handled by UI Manager)');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    async handleGenerationRequest() {
        console.log('üéØ Generation request initiated');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (this.onAuthRequired && !this.checkAuthentication()) {
            this.onAuthRequired();
            return;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
        if (!this.validateForm()) {
            return;
        }

        // –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        this.showProcessing();

        // –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await this.startGeneration();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    checkAuthentication() {
        return window.appState?.userId ? true : false;
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
     */
    validateForm() {
        const prompt = document.getElementById('promptInput').value.trim();

        // –ü–æ–ª–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–æ (–∫—Ä–æ–º–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤)
        const mode = this.getCurrentMode();
        const requiresPrompt = !['background_removal', 'upscale_image'].includes(mode);

        if (requiresPrompt && (!prompt || prompt.length < 5)) {
            this.showError('Please enter a description of at least 5 characters');
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ä–µ–∂–∏–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏—Ö —Ç—Ä–µ–±—É—é—Ç
        const requiresImage = ['upscale_image', 'background_removal'].includes(mode);
        if (requiresImage && !this.hasUploadedImages()) {
            this.showError('Please upload an image for this mode');
            return false;
        }

        return true;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    getCurrentMode() {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ mode-cards –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        return 'photo_session'; // default
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
     */
    hasUploadedImages() {
        return window.userImageState?.images?.length > 0;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
     */
    initializeImageUpload() {
        // TODO: –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ª–æ–≥–∏–∫—É –∏–∑ app_modern.js
        console.log('üñºÔ∏è Image upload logic initialized');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
     */
    async initializeGenerationManager() {
        try {
            const { generationManager } = await import('../parallel-generation.js');
            this.generationManager = generationManager;
            console.log('‚úÖ Generation manager initialized');
        } catch (error) {
            console.error('‚ùå Failed to initialize generation manager:', error);
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    async startGeneration() {
        try {
            // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
            const generationData = this.collectFormData();

            console.log('üöÄ Starting generation with data:', generationData);

            // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ app_modern.js
            await generateImage.call(window, { preventDefault: () => {} }, generationData);

        } catch (error) {
            console.error('‚ùå Generation failed:', error);
            this.showError('Generation failed. Please try again.');

            // –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            this.showGeneration();
        }
    }

    /**
     * –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
     */
    collectFormData() {
        const prompt = document.getElementById('promptInput').value.trim();
        const style = this.getSelectedStyle();
        const mode = this.getCurrentMode();
        const size = document.getElementById('sizeSelect').value;
        const negativePrompt = this.getNegativePrompt();

        return {
            prompt,
            style,
            mode,
            size,
            negativePrompt,
            timestamp: new Date().toISOString()
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è
     */
    getSelectedStyle() {
        const activeCard = document.querySelector('.carousel-2d-item.active');
        return activeCard?.dataset.style || 'realistic';
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
     */
    getNegativePrompt() {
        const checkbox = document.getElementById('negativePromptCheckbox');
        const input = document.getElementById('negativePromptInput');

        if (checkbox && checkbox.checked && input) {
            return input.value.trim();
        }

        return '';
    }

    /**
     * –í–∫–ª—é—á–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
     */
    enableGeneration() {
        this.isEnabled = true;
        console.log('‚úÖ Generation enabled');
    }

    /**
     * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    disableGeneration() {
        this.isEnabled = false;
        console.log('üö´ Generation disabled');
    }

    /**
     * –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    showProcessing() {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ UI –º–µ–Ω–µ–¥–∂–µ—Ä
        console.log('‚è≥ Showing processing screen');
    }

    /**
     * –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    showGeneration() {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ UI –º–µ–Ω–µ–¥–∂–µ—Ä
        console.log('üé® Showing generation screen');
    }

    /**
     * –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
     */
    showError(message) {
        if (window.showToast) {
            window.showToast('error', message);
        } else {
            alert(message);
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —É—Å–ø–µ—Ö–∞
     */
    showSuccess(message) {
        if (window.showToast) {
            window.showToast('success', message);
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å
     */
    addGeneration(generation) {
        this.pendingGenerations.push(generation);
        console.log('üìã Generation added to queue:', generation.id);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    getCurrentGeneration() {
        return this.currentGeneration;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    clearCurrentGeneration() {
        this.currentGeneration = null;
    }

    /**
     * Shutdown –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    async shutdown() {
        console.log('üõë Generation Manager shutting down...');

        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        if (this.generationManager) {
            await this.generationManager.stopAll();
        }

        // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.clearCurrentGeneration();
        this.pendingGenerations = [];

        console.log('‚úÖ Generation Manager shutdown complete');
    }
}

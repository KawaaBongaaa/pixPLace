/**
 * üîê Auth Manager - –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * –†–µ–∞–ª–∏–∑—É–µ—Ç Telegram Login Widget –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –±–æ—Ç–æ–º
 */

export class AuthManager {
    constructor() {
        this.isAuthenticated = false;
        this.currentUser = null;
        this.widgetInitialized = false;

        // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        this.authModal = null;
        this.authOverlay = null;

        console.log('üîê Auth Manager created');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    async initialize() {
        console.log('üîê Initializing authentication...');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Login Widget
        this.initializeTelegramWidget();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await this.checkStoredAuth();

        console.log('‚úÖ Auth Manager initialized');
    }

    /**
     * –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–ø–æ—Å–ª–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM)
     */
    async finalizeInitialization() {
        console.log('üîê Finalizing auth initialization...');

        // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
        this.createAuthModal();

        console.log('‚úÖ Auth finalization complete');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    async checkInitialAuth() {
        try {
            const authCompleted = localStorage.getItem('telegram_auth_completed');
            const userData = localStorage.getItem('telegram_user');

            if (authCompleted === 'true' && userData) {
                const user = JSON.parse(userData);
                console.log('‚úÖ Stored auth found for:', user.first_name);
                this.setAuthenticatedUser(user);
                return;
            }
        } catch (error) {
            console.error('‚ùå Stored auth check failed:', error);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Login Widget
     */
    initializeTelegramWidget() {
        console.log('üéØ Initializing Telegram Login Widget...');

        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ Telegram widget
        window.onTelegramAuth = (user) => {
            console.log('üéâ Real Telegram widget auth callback:', user);
            this.handleWidgetAuth(user);
        };

        this.widgetInitialized = true;
        console.log('‚úÖ Telegram Login Widget initialized');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Login Widget
     */
    handleWidgetAuth(user) {
        console.log('üéâ Widget auth callback received:', user);

        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (!this.validateUserData(user)) {
                console.error('‚ùå Invalid user data from widget');
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            this.saveAuthData(user);

            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.setAuthenticatedUser(user);

            // –°–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            this.hideAuthModal();

            console.log('‚úÖ Widget authentication successful');

        } catch (error) {
            console.error('‚ùå Widget auth processing failed:', error);
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç widget
     */
    validateUserData(user) {
        if (!user) return false;
        if (!user.id || typeof user.id !== 'number') return false;
        if (!user.first_name && !user.username) return false;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ (–Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
        const now = Math.floor(Date.now() / 1000);
        const authDate = user.auth_date || 0;
        if (now - authDate > 24 * 60 * 60) {
            console.warn('‚ö†Ô∏è Auth data is too old');
            return false;
        }

        return true;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    saveAuthData(user) {
        try {
            localStorage.setItem('telegram_auth_completed', 'true');
            localStorage.setItem('telegram_auth_token', user.hash || 'widget_' + Date.now());
            localStorage.setItem('telegram_auth_timestamp', Date.now().toString());
            localStorage.setItem('telegram_user', JSON.stringify(user));

            console.log('üíæ Auth data saved to localStorage');
        } catch (error) {
            console.error('‚ùå Failed to save auth data:', error);
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    setAuthenticatedUser(user) {
        this.currentUser = user;
        this.isAuthenticated = true;

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º appState
        if (window.appState) {
            window.appState.userId = user.id;
            window.appState.userName = user.first_name || user.username;
        }

        console.log('üë§ User authenticated:', user.first_name || user.username);
    }

    /**
     * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    showAuthModal() {
        console.log('üîê Showing auth modal...');

        if (this.authModal && this.authOverlay) {
            this.authModal.style.display = 'block';
            this.authOverlay.style.display = 'block';
            document.body.classList.add('auth-modal-open');

            console.log('‚úÖ Auth modal shown with Telegram widget');
        } else {
            console.error('‚ùå Auth modal not found');
        }
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    hideAuthModal() {
        if (this.authModal && this.authOverlay) {
            this.authModal.style.display = 'none';
            this.authOverlay.style.display = 'none';
            document.body.classList.remove('auth-modal-open');

            console.log('‚úÖ Auth modal hidden');
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    createAuthModal() {
        try {
            console.log('ü™ü Creating auth modal...');

            // –°–æ–∑–¥–∞–Ω–∏–µ overlay (—Ñ–æ–Ω)
            this.authOverlay = document.createElement('div');
            this.authOverlay.className = 'auth-overlay';
            this.authOverlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0,0,0,0.7);
                z-index: 9999;
                display: none;
                backdrop-filter: blur(5px);
                cursor: pointer;
            `;

            // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª–∞
            this.authModal = document.createElement('div');
            this.authModal.className = 'auth-modal';
            this.authModal.style.cssText = `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: var(--bg-primary, #fff);
                border-radius: 20px;
                padding: 40px;
                max-width: 400px;
                width: 90%;
                text-align: center;
                z-index: 10000;
                display: none;
                box-shadow: 0 20px 60px rgba(0,0,0,0.3);
                border: 1px solid var(--border-primary, #e1e1e1);
            `;

            // –ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–¥–∞–ª–∞
            this.authModal.innerHTML = `
                <div style="margin-bottom: 30px;">
                    <svg class="logo-img" style="width:80px; height:80px; margin: 0 auto 20px;">
                        <use xlink:href="#pixplace-logo" />
                    </svg>
                    <h2 style="color: var(--text-primary, #333); margin: 0 0 10px 0; font-size: 24px;">
                        Welcome to pixPLace
                    </h2>
                    <p style="color: var(--text-secondary, #666); margin: 0 0 30px 0;">
                        Sign in with Telegram to start creating amazing images
                    </p>
                </div>

                <div class="telegram-login-widget" style="margin: 20px 0;">
                    <!-- Official Telegram Login Widget -->
                    <script async src="https://telegram.org/js/telegram-widget.js?22"
                        data-telegram-login="pixPLaceBot"
                        data-size="large"
                        data-radius="15"
                        data-request-access="write"
                        data-onauth="onTelegramAuth(user)"></script>

                    <div style="margin-top: 20px; font-size: 14px; color: #666; padding: 10px; background: #f5f5f5; border-radius: 8px;">
                        ‚ö†Ô∏è –î–ª—è —Ä–∞–±–æ—Ç—ã –≤–∏–¥–∂–µ—Ç–∞ –Ω—É–∂–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Telegram –±–æ—Ç —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –¥–æ–º–µ–Ω–æ–º.
                    </div>
                </div>

                <div style="margin-top: 30px;">
                    <p style="color: var(--text-secondary, #888); font-size: 14px; margin: 0;">
                        üîí Your data is secure and private
                    </p>
                </div>
            `;

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ DOM
            document.body.appendChild(this.authOverlay);
            document.body.appendChild(this.authModal);

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–∫—Ä—ã—Ç–∏—è
            this.setupModalCloseHandlers();

            console.log('‚úÖ Auth modal created and added to DOM');

        } catch (error) {
            console.error('‚ùå Failed to create auth modal:', error);
        }
    }



    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∞
     */
    setupModalCloseHandlers() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
        if (this.authOverlay) {
            this.authOverlay.addEventListener('click', (e) => {
                if (e.target === this.authOverlay) {
                    this.hideAuthModal();
                }
            });
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.authModal && this.authModal.style.display !== 'none') {
                this.hideAuthModal();
            }
        });

        console.log('üéØ Modal close handlers set up');
    }

    /**
     * –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
     */
    logout() {
        console.log('üö™ Logging out...');

        // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        localStorage.removeItem('telegram_auth_completed');
        localStorage.removeItem('telegram_auth_token');
        localStorage.removeItem('telegram_auth_timestamp');
        localStorage.removeItem('telegram_user');

        // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.isAuthenticated = false;
        this.currentUser = null;

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
        window.location.reload();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getCurrentUser() {
        return this.currentUser;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    isUserAuthenticated() {
        return this.isAuthenticated;
    }

    /**
     * Shutdown –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    async shutdown() {
        console.log('üõë Auth Manager shutting down...');

        // –°–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∞
        this.hideAuthModal();

        console.log('‚úÖ Auth Manager shutdown complete');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.AuthManagerInstance = null;

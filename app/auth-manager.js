/**
 * üîê Auth Manager - –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è Telegram WebApp
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram WebApp initData
 */

export class AuthManager {
    constructor() {
        this.isAuthenticated = false;
        this.currentUser = null;
        this.webappInitialized = false;

        // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        this.authModal = null;
        this.authOverlay = null;

        console.log('üîê Auth Manager (WebApp mode) created');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    async initialize() {
        console.log('üîê Initializing WebApp authentication...');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        this.initializeTelegramWebApp();

        // Robust WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∂–¥–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        await this.waitForWebAppData();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await this.checkStoredAuth();

        console.log('‚úÖ Auth Manager initialized');
    }

    /**
     * –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–ø–æ—Å–ª–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM)
     */
    async finalizeInitialization() {
        console.log('üîê Finalizing auth initialization...');

        // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
        this.createAuthModal();

        console.log('‚úÖ Auth finalization complete');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    async checkInitialAuth() {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º WebApp –¥–∞–Ω–Ω—ã–µ
            if (this.checkWebAppAuth()) {
                console.log('‚úÖ WebApp auth found, skipping stored check');
                return;
            }

            // Fallback –Ω–∞ localStorage
            const authCompleted = localStorage.getItem('telegram_auth_completed');
            const userData = localStorage.getItem('telegram_user');

            if (authCompleted === 'true' && userData) {
                const user = JSON.parse(userData);
                console.log('‚úÖ Stored auth found for:', user.first_name);
                this.setAuthenticatedUser(user);
                return;
            }
        } catch (error) {
            console.error('‚ùå Stored auth check failed:', error);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
     */
    initializeTelegramWebApp() {
        console.log('üì± Initializing Telegram WebApp...');

        // –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ–∫–Ω–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
        if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
            try {
                Telegram.WebApp.expand();
                console.log('‚úÖ WebApp expanded');
            } catch (error) {
                console.warn('‚ö†Ô∏è Failed to expand WebApp:', error);
            }
        } else {
            console.warn('‚ö†Ô∏è Telegram WebApp not available - assuming standalone mode');
        }

        this.webappInitialized = true;
        console.log('‚úÖ Telegram WebApp initialized');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ WebApp –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    checkWebAppAuth() {
        if (typeof Telegram === 'undefined' || !Telegram.WebApp) {
            console.log('üì± No Telegram WebApp available');
            return false;
        }

        const tg = Telegram.WebApp;
        const user = tg.initDataUnsafe?.user;

        if (!user) {
            console.log('üì± No user in WebApp initData');
            return false;
        }

        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ API
        this.authenticateViaAPI(user, tg.initData);
        return true;
    }

    /**
     * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ API
     */
    async authenticateViaAPI(user, initData) {
        console.log('üîë Starting API authentication for user:', user.first_name);

        try {
            const response = await fetch("https://pixplace.vercel.app/api/auth", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    user_id: user.id,
                    username: user.username,
                    first_name: user.first_name,
                    last_name: user.last_name,
                    initData: initData,
                    traffic_source: "webapp/start ads-teleram-eng-01",
                }),
            });

            const data = await response.json();
            console.log('üì• API auth response:', data);

            if (data.ok) {
                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                this.saveAuthData({
                    ...user,
                    auth_type: 'webapp_api'
                });

                // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                this.setAuthenticatedUser(user);

                console.log('‚úÖ WebApp API authentication successful');
            } else {
                throw new Error(data.error || 'API auth failed');
            }

        } catch (error) {
            console.error('‚ùå WebApp API auth failed:', error);
            // Fallback: –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å localStorage –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
        }
    }

    /**
     * –†—É—á–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ WebApp
     */
    async manualWebAppAuth() {
        if (typeof Telegram === 'undefined' || !Telegram.WebApp) {
            console.warn('‚ö†Ô∏è Manual WebApp auth not available');
            return false;
        }

        const tg = Telegram.WebApp;
        tg.expand(); // –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –æ–∫–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ

        const user = tg.initDataUnsafe?.user;
        const initData = tg.initData;

        if (!user || !initData) {
            console.warn('‚ö†Ô∏è No WebApp user data available for manual auth');
            return false;
        }

        await this.authenticateViaAPI(user, initData);
        return true;
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    validateUserData(user) {
        if (!user) return false;
        if (!user.id || typeof user.id !== 'number') return false;
        if (!user.first_name && !user.username) return false;
        return true;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    saveAuthData(user) {
        try {
            localStorage.setItem('telegram_auth_completed', 'true');
            localStorage.setItem('telegram_auth_token', 'webapp_' + Date.now());
            localStorage.setItem('telegram_auth_timestamp', Date.now().toString());
            localStorage.setItem('telegram_user', JSON.stringify(user));

            console.log('üíæ Auth data saved to localStorage');
        } catch (error) {
            console.error('‚ùå Failed to save auth data:', error);
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    setAuthenticatedUser(user) {
        this.currentUser = user;
        this.isAuthenticated = true;

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º appState
        if (window.appState) {
            window.appState.userId = user.id;
            window.appState.userName = user.first_name || user.username;
        }

        // –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª –µ—Å–ª–∏ –ø–æ–∫–∞–∑–∞–Ω
        this.hideAuthModal();

        console.log('üë§ User authenticated:', user.first_name || user.username);
    }

    /**
     * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    showAuthModal() {
        console.log('üîê Showing auth modal...');

        // –í WebApp —Ä–µ–∂–∏–º–µ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        if (this.manualWebAppAuth()) {
            console.log('‚úÖ Auto WebApp auth attempted');
            return;
        }

        if (this.authModal && this.authOverlay) {
            this.authModal.style.display = 'block';
            this.authOverlay.style.display = 'block';
            document.body.classList.add('auth-modal-open');

            console.log('‚úÖ Auth modal shown with WebApp integration');
        } else {
            console.error('‚ùå Auth modal not found');
        }
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    hideAuthModal() {
        if (this.authModal && this.authOverlay) {
            this.authModal.style.display = 'none';
            this.authOverlay.style.display = 'none';
            document.body.classList.remove('auth-modal-open');

            console.log('‚úÖ Auth modal hidden');
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    createAuthModal() {
        try {
            console.log('ü™ü Creating auth modal...');

            // –°–æ–∑–¥–∞–Ω–∏–µ overlay (—Ñ–æ–Ω)
            this.authOverlay = document.createElement('div');
            this.authOverlay.className = 'auth-overlay';
            this.authOverlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0,0,0,0.7);
                z-index: 9999;
                display: none;
                backdrop-filter: blur(5px);
                cursor: pointer;
            `;

            // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª–∞
            this.authModal = document.createElement('div');
            this.authModal.className = 'auth-modal';
            this.authModal.style.cssText = `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: var(--bg-primary, #fff);
                border-radius: 20px;
                padding: 40px;
                max-width: 400px;
                width: 90%;
                text-align: center;
                z-index: 10000;
                display: none;
                box-shadow: 0 20px 60px rgba(0,0,0,0.3);
                border: 1px solid var(--border-primary, #e1e1e1);
            `;

            // –ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–¥–∞–ª–∞ –¥–ª—è WebApp
            this.authModal.innerHTML = `
                <div style="margin-bottom: 30px;">
                    <svg class="logo-img" style="width:80px; height:80px; margin: 0 auto 20px;">
                        <use xlink:href="#pixplace-logo" />
                    </svg>
                    <h2 style="color: var(--text-primary, #333); margin: 0 0 10px 0; font-size: 24px;">
                        Welcome to pixPLace
                    </h2>
                    <p style="color: var(--text-secondary, #666); margin: 0 0 30px 0;">
                        Your account will be automatically verified through Telegram
                    </p>
                </div>

                <button id="webappAuthBtn" class="webapp-auth-btn" style="
                    background: #0084ff;
                    color: white;
                    border: none;
                    border-radius: 15px;
                    padding: 15px 30px;
                    font-size: 18px;
                    font-weight: bold;
                    cursor: pointer;
                    width: 100%;
                    max-width: 280px;
                    box-shadow: 0 4px 15px rgba(0,132,255,0.3);
                    margin: 20px auto;
                ">
                    üöÄ Continue with Telegram
                </button>

                <div style="margin-top: 30px;">
                    <p style="color: var(--text-secondary, #888); font-size: 14px; margin: 0;">
                        üîí Your data is secure and automatically verified
                    </p>
                </div>
            `;

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ DOM
            document.body.appendChild(this.authOverlay);
            document.body.appendChild(this.authModal);

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            this.setupModalCloseHandlers();
            this.setupWebAppAuthButton();

            console.log('‚úÖ Auth modal created for WebApp');

        } catch (error) {
            console.error('‚ùå Failed to create auth modal:', error);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ WebApp –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    setupWebAppAuthButton() {
        const button = document.getElementById('webappAuthBtn');
        if (button) {
            button.addEventListener('click', () => {
                console.log('üîë Manual WebApp auth triggered');
                this.manualWebAppAuth();
            });
        }
    }



    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∞
     */
    setupModalCloseHandlers() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
        if (this.authOverlay) {
            this.authOverlay.addEventListener('click', (e) => {
                if (e.target === this.authOverlay) {
                    this.hideAuthModal();
                }
            });
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.authModal && this.authModal.style.display !== 'none') {
                this.hideAuthModal();
            }
        });

        console.log('üéØ Modal close handlers set up');
    }

    /**
     * –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
     */
    logout() {
        console.log('üö™ Logging out...');

        // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        localStorage.removeItem('telegram_auth_completed');
        localStorage.removeItem('telegram_auth_token');
        localStorage.removeItem('telegram_auth_timestamp');
        localStorage.removeItem('telegram_user');

        // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.isAuthenticated = false;
        this.currentUser = null;

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
        window.location.reload();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getCurrentUser() {
        return this.currentUser;
    }

    /**
     * Robust WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∂–¥–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
     */
    async waitForWebAppData() {
        console.log('‚è≥ Starting robust WebApp data wait...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å WebApp
        if (typeof Telegram === 'undefined' || !Telegram.WebApp) {
            console.log('üì± No WebApp available - skipping robust wait');
            return false;
        }

        const tg = Telegram.WebApp;

        // –ñ–¥–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ —Ç–∞–π–º–∞—É—Ç–∞ (5 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º)
        for (let attempt = 0; attempt < 50; attempt++) {
            try {
                const user = tg.initDataUnsafe?.user;
                const initData = tg.initData;

                if (user && initData) {
                    console.log('‚úÖ WebApp data available - authenticating automatically');
                    await this.authenticateViaAPI(user, initData);
                    return true; // –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                }

                // –ñ–¥–µ–º 100ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await new Promise(resolve => setTimeout(resolve, 100));

            } catch (error) {
                console.warn('‚ö†Ô∏è WebApp data check failed on attempt', attempt, error);
                return false; // –û—à–∏–±–∫–∞ - –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –∂–¥–∞—Ç—å
            }
        }

        console.log('‚è∞ WebApp data timeout reached - user will use manual auth');
        return false;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    isUserAuthenticated() {
        return this.isAuthenticated;
    }

    /**
     * Shutdown –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    async shutdown() {
        console.log('üõë Auth Manager shutting down...');

        // –°–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∞
        this.hideAuthModal();

        console.log('‚úÖ Auth Manager shutdown complete');
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å legacy –∫–æ–¥–æ–º
window.handleTelegramLogin = async function() {
    console.log('üîÑ handleTelegramLogin called - redirecting to AuthManager');

    try {
        // –ï—Å–ª–∏ AuthManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (window.authManagerInstance) {
            await window.authManagerInstance.showAuthModal();
        } else {
            console.warn('‚ö†Ô∏è AuthManager not initialized, fallback to manual flow');

            // Fallback: –ø–æ–∫–∞–∑–∞—Ç—å alert —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            alert(`–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:

1. üîî –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –±–æ—Ç–∞: @pixPLaceBot
2. üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: /start
3. üîë –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
4. üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
5. ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!`);

            // –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
            window.open('https://t.me/pixPLaceBot?start=manual_auth', '_blank', 'noopener,noreferrer');
        }
    } catch (error) {
        console.error('‚ùå handleTelegramLogin failed:', error);

        // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π fallback
        alert('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.AuthManagerInstance = null;

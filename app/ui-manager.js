/**
 * üñ•Ô∏è UI Manager - –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç —ç–∫—Ä–∞–Ω–∞–º–∏, –º–æ–¥–∞–ª–∞–º–∏, —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ UI
 */

import { ScreenManager } from '../screen-manager.js';

export class UIManager {
    constructor() {
        this.currentScreen = 'loading';

        // Callbacks
        this.onAuthRequired = null;
        this.onGenerationRequired = null;

        console.log('üñ•Ô∏è UI Manager created');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
     */
    async initialize() {
        console.log('üé® Initializing UI...');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        await this.initializeBaseUI();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        await this.initializeModals();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Ö–µ–¥–µ—Ä–µ
        this.initializeAuthDisplay();

        // –ü–æ–∫–∞–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        this.showInitialScreen();

        console.log('‚úÖ UI initialized');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ UI
     */
    async initializeBaseUI() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤
        this.initializeCharacterCounters();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è dropdown'–æ–≤
        this.initializeDropdowns();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º
        this.initializeThemes();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ñ–æ—Ä–º—ã
        this.initializeForm();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
     */
    async initializeModals() {
        // –ú–æ–¥–∞–ª –ª–∏–º–∏—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        this.initializeLimitModal();

        // –î—Ä—É–≥–∏–µ –º–æ–¥–∞–ª—ã
        console.log('ü™ü Modals ready');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤
     */
    initializeCharacterCounters() {
        const promptInput = document.getElementById('promptInput');
        const charCounter = document.getElementById('charCounter');

        if (promptInput && charCounter) {
            promptInput.addEventListener('input', function() {
                charCounter.textContent = this.value.length;
                this.style.height = 'auto';
                this.style.height = this.scrollHeight + 'px';
            });
            console.log('‚úÖ Prompt character counter initialized');
        }

        const negativePromptInput = document.getElementById('negativePromptInput');
        const negativeCharCounter = document.getElementById('negativeCharCounter');

        if (negativePromptInput && negativeCharCounter) {
            negativePromptInput.addEventListener('input', function() {
                negativeCharCounter.textContent = this.value.length;
                this.style.height = 'auto';
                this.style.height = Math.min(this.scrollHeight, 120) + 'px';
            });
            console.log('‚úÖ Negative prompt character counter initialized');
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è dropdown'–æ–≤
     */
    initializeDropdowns() {
        // Language dropdown
        const langBtn = document.getElementById('langBtn');
        const langMenu = document.getElementById('langMenu');

        if (langBtn && langMenu) {
            this.setupLanguageDropdown(langBtn, langMenu);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ dropdown —è–∑—ã–∫–∞
     */
    setupLanguageDropdown(btn, menu) {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        if (menu.dataset.initialized === 'true') return;
        menu.dataset.initialized = 'true';

        // –ö–∞—Ä—Ç–∞ —è–∑—ã–∫–æ–≤
        const languageMap = {
            'en': { flag: 'üá¨üáß', name: 'English' },
            'ru': { flag: 'üá∑üá∫', name: '–†—É—Å—Å–∫–∏–π' },
            'es': { flag: 'üá™üá∏', name: 'Espa√±ol' },
            'fr': { flag: 'üá´üá∑', name: 'Fran√ßais' },
            'de': { flag: 'üá©üá™', name: 'Deutsch' },
            'zh': { flag: 'üá®üá≥', name: '‰∏≠Êñá' },
            'pt': { flag: 'üáµüáπ', name: 'Portugu√™s' },
            'ar': { flag: 'üá¶üá™', name: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©' },
            'hi': { flag: 'üáÆüá≥', name: '‡§π‡§ø‡§Ç‡§¶‡•Ä' },
            'ja': { flag: 'üáØüáµ', name: 'Êó•Êú¨Ë™û' },
            'it': { flag: 'üáÆüáπ', name: 'Italiano' },
            'ko': { flag: 'üá∞üá∑', name: 'ÌïúÍµ≠Ïñ¥' },
            'vi': { flag: 'üáªüá≥', name: 'Ti·∫øng Vi·ªát' },
            'th': { flag: 'üáπüá≠', name: '‡πÑ‡∏ó‡∏¢' },
            'tr': { flag: 'üáπüá∑', name: 'T√ºrk√ße' },
            'pl': { flag: 'üáµüá±', name: 'Polski' }
        };

        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ–Ω—é
        menu.innerHTML = '';
        const CONFIG = window.CONFIG || { LANGUAGES: ['en', 'ru', 'es'] };
        CONFIG.LANGUAGES.forEach(lang => {
            const li = document.createElement('li');
            const langInfo = languageMap[lang] || { flag: lang, name: lang };
            li.innerHTML = `<span class="flag">${langInfo.flag}</span> <span class="lang-name">${langInfo.name}</span>`;
            li.dataset.lang = lang;

            li.addEventListener('click', async (evt) => {
                evt.stopPropagation();

                try {
                    const { dictionaryManager } = await import('../dictionary-manager.js');
                    await dictionaryManager.setLanguage(lang);
                    window.appState.setLanguage(lang);
                    menu.style.display = 'none';
                    console.log('‚úÖ Language changed to:', lang);
                } catch (error) {
                    console.error('‚ùå Language change failed:', error);
                }
            });
            menu.appendChild(li);
        });

        menu.style.display = 'none';

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è
        btn.addEventListener('click', (evt) => {
            evt.stopPropagation();
            menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
        document.addEventListener('click', (evt) => {
            if (!menu.contains(evt.target) && !btn.contains(evt.target)) {
                menu.style.display = 'none';
            }
        });

        document.addEventListener('keydown', (evt) => {
            if (evt.key === 'Escape') {
                menu.style.display = 'none';
            }
        });

        console.log('üåç Language dropdown initialized');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º
     */
    initializeThemes() {
        const themeBtn = document.querySelector('.control-btn[title="Theme"]');
        if (themeBtn) {
            themeBtn.addEventListener('click', () => {
                window.appState.toggleTheme();
            });
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    initializeForm() {
        const form = document.querySelector('.generation-form');
        if (form) {
            form.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleGenerationSubmit();
            });
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    async handleGenerationSubmit() {
        console.log('üìù Generation form submitted');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (this.onAuthRequired) {
            const isAuth = await this.checkAuthentication();
            if (!isAuth) {
                this.onAuthRequired();
                return;
            }
        }

        // –í—ã–∑–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if (this.onGenerationRequired) {
            this.onGenerationRequired();
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    async checkAuthentication() {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ AuthManager
        return window.appState?.userId ? true : false;
    }

    /**
     * –ü–æ–∫–∞–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
     */
    showInitialScreen() {
        this.currentScreen = 'generation';
        ScreenManager.show('generationScreen');
        console.log('üè† Initial screen shown: generation');
    }

    /**
     * –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    showGeneration() {
        ScreenManager.show('generationScreen');
        this.currentScreen = 'generation';

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        this.refreshHistoryDisplay();

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–≤—å—é
        setTimeout(() => {
            this.forceLoadVisiblePreviews();
        }, 50);
    }

    /**
     * –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    showResult(result) {
        ScreenManager.displayFullResult(result);
        this.currentScreen = 'result';
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
     */
    async refreshHistoryDisplay() {
        try {
            const { updateHistoryDisplay } = await import('../history-manager.js');
            updateHistoryDisplay();
        } catch (error) {
            console.warn('‚ö†Ô∏è Could not refresh history display:', error);
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–∏–º—ã—Ö –ø—Ä–µ–≤—å—é
     */
    forceLoadVisiblePreviews() {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ GlobalHistoryLoader
        console.log('üñºÔ∏è Force load previews requested');
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    showAuthenticatedState(user) {
        console.log('üéâ Showing authenticated state for:', user.first_name);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        this.updateUserDisplay(user);

        // –ü–æ–∫–∞–∑ welcome toast
        this.showWelcomeToast(user);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    updateUserDisplay(user) {
        this.updateHeaderAuthDisplay(user);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Ö–µ–¥–µ—Ä–µ
     */
    updateHeaderAuthDisplay(user) {
        const userBalanceContainer = document.getElementById('userBalance');
        const userNameDisplay = document.getElementById('userNameDisplay');
        const userCreditsDisplay = document.getElementById('userCreditsDisplay');

        if (userBalanceContainer) {
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            userBalanceContainer.innerHTML = '';

            if (user) {
                // –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –∏ –±–∞–ª–∞–Ω—Å
                userBalanceContainer.innerHTML = `
                    <div class="user-info">
                        <span class="user-name">${user.first_name || user.username || 'User'}</span>
                        <span class="balance-text">Balance:</span>
                    </div>
                    <span class="credits-amount">--</span>
                `;

                console.log('üë§ Header updated with authenticated user:', user.first_name || user.username);
            } else {
                // –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
                const loginButton = document.createElement('button');
                loginButton.className = 'header-login-btn';
                loginButton.innerHTML = `
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 6px;">
                        <path d="M11.944 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0a12 12 0 0 0-.056 0zm4.962 5.547c.24.24.443.442.443.783v.054c0 .34-.203.542-.443.783l-.054.054-2.572 2.572-1.781 1.781a.48.48 0 0 1-.683 0l-.054-.054-.832-.832-.832-.832-.832-.832-.832-.832-.054-.054a.48.48 0 0 1 0-.683l.054-.054 1.781-1.781L14.746 5.6c1.086 1.086 2.238 2.238 2.572 2.572z"/>
                    </svg>
                    Login
                `;

                loginButton.style.cssText = `
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    padding: 6px 12px;
                    background: var(--accent-primary, #0088cc);
                    color: white;
                    border: none;
                    border-radius: 6px;
                    font-size: 14px;
                    font-weight: 500;
                    cursor: pointer;
                    transition: background-color 0.2s;
                `;

                loginButton.onmouseover = () => {
                    loginButton.style.background = 'var(--accent-hover, #0077b5)';
                };

                loginButton.onmouseout = () => {
                    loginButton.style.background = 'var(--accent-primary, #0088cc)';
                };

                loginButton.onclick = () => {
                    console.log('üîê Header login button clicked');
                    if (this.onAuthRequired) {
                        this.onAuthRequired();
                    }
                };

                userBalanceContainer.appendChild(loginButton);
                console.log('üîì Header updated with login button');
            }
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Ö–µ–¥–µ—Ä–µ
     */
    initializeAuthDisplay() {
        console.log('üîê Initializing header auth display...');

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ AuthManager –≤–º–µ—Å—Ç–æ appState (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
        const authManager = window.pixPlaceApp?.authManager;
        let currentUser = null;

        if (authManager?.isAuthenticated && authManager?.currentUser) {
            currentUser = authManager.currentUser;
            console.log('üë§ Using authenticated user from AuthManager:', currentUser.first_name);
        } else if (window.appState?.userId && window.appState?.userName) {
            // Fallback –Ω–∞ appState –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ
            currentUser = {
                id: window.appState.userId,
                first_name: window.appState.userName,
                username: window.appState.userName
            };
            console.log('üîÑ Using fallback user from appState');
        } else {
            console.log('üîì No authentication found, showing login button');
        }

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–ª–æ–≥–∏–Ω –∫–Ω–æ–ø–∫–∞ –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        this.updateHeaderAuthDisplay(currentUser);

        console.log('‚úÖ Header auth display initialized');
    }

    /**
     * –ü–æ–∫–∞–∑ welcome toast
     */
    showWelcomeToast(user) {
        const userName = user.first_name || user.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        if (window.showToast) {
            window.showToast('success', `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userName}! üéâ`);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª–∞ –ª–∏–º–∏—Ç–∞
     */
    initializeLimitModal() {
        // –ú–æ–¥–∞–ª –ª–∏–º–∏—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ mutation observer
        console.log('ü™ü Limit modal observer set');

        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                    const modal = document.getElementById('limitModal');
                    if (modal && modal.classList.contains('show')) {
                        this.initializeLimitModalInternal();
                    }
                }
            });
        });

        const modal = document.getElementById('limitModal');
        if (modal) {
            observer.observe(modal, { attributes: true, attributeFilter: ['class'] });
        }
    }

    /**
     * –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª–∞ –ª–∏–º–∏—Ç–∞
     */
    async initializeLimitModalInternal() {
        try {
            // –ò–º–ø–æ—Ä—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—É—Å–µ–ª–∏ –ø–ª–∞–Ω–æ–≤
            const planCarousel = await this.generatePlanCarouselHTML();
            this.injectPlanCarousel(planCarousel);

            // TODO: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è handlers –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–ª–∞–Ω–æ–≤
        } catch (error) {
            console.error('‚ùå Failed to initialize limit modal:', error);
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –∫–∞—Ä—É—Å–µ–ª–∏ –ø–ª–∞–Ω–æ–≤
     */
    generatePlanCarouselHTML() {
        // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
        return '<div class="plans-carousel">Plans carousel content</div>';
    }

    /**
     * –í—Å—Ç–∞–≤–∫–∞ –∫–∞—Ä—É—Å–µ–ª–∏ –≤ –º–æ–¥–∞–ª
     */
    injectPlanCarousel(html) {
        const container = document.querySelector('#limitModal .plans-carousel-container');
        if (container) {
            container.innerHTML = html;
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
     */
    showError(message) {
        if (window.showToast) {
            window.showToast('error', message);
        } else {
            alert(message);
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —É—Å–ø–µ—Ö–∞
     */
    showSuccess(message) {
        if (window.showToast) {
            window.showToast('success', message);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
     */
    getCurrentScreen() {
        return this.currentScreen;
    }

    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ UI –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    async shutdown() {
        console.log('üõë UI Manager shutting down...');

        // –û—á–∏—Å—Ç–∫–∞ listeners
        this.cleanupEventListeners();

        // –°–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–≤
        this.hideAllModals();

        console.log('‚úÖ UI Manager shutdown complete');
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ listeners
     */
    cleanupEventListeners() {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö listeners
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –º–æ–¥–∞–ª–æ–≤
     */
    hideAllModals() {
        // –°–∫—Ä—ã—Ç–∏–µ auth –º–æ–¥–∞–ª–∞
        if (this.authModal) {
            this.authModal.style.display = 'none';
        }
    }
}

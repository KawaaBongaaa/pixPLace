// screen-manager.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞–º–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

class ScreenManager {
    static currentScreen = null;
    static pendingResults = []; // –û–∂–∏–¥–∞—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤ —Ç–æ—Å—Ç–∞—Ö

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–æ–≤
    static show(screenId) {
        console.log('üîÑ ScreenManager.show called for:', screenId);

        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
        const targetScreen = document.getElementById(screenId);
        if (!targetScreen) {
            console.error('Screen not found:', screenId);
            return;
        }



        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        console.log('üìã Current screens state:');
        document.querySelectorAll('.screen').forEach(screen => {
            const isActive = screen.classList.contains('active');
            const isHidden = screen.classList.contains('hidden');
            if (isActive || !isHidden) {
                console.log(`   ${screen.id}: active=${isActive}, hidden=${isHidden}`);
            }
        });

        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
        document.querySelectorAll('.screen').forEach(screen => {
            screen.classList.remove('active');
            screen.classList.add('hidden'); // –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø—Ä—è—á–µ–º
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π
        targetScreen.classList.remove('hidden');
        targetScreen.classList.add('active');
        this.currentScreen = screenId;

        console.log(`‚úÖ Switched to screen: ${screenId}, target classes:`, targetScreen.className);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–ª—å –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        setTimeout(() => {
            console.log(`üéØ Screen ${screenId} final display:`, window.getComputedStyle(targetScreen).display);
            console.log(`üéØ Screen ${screenId} final visibility:`, window.getComputedStyle(targetScreen).visibility);
            console.log(`üéØ Screen ${screenId} final opacity:`, window.getComputedStyle(targetScreen).opacity);
        }, 10);
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–∏–¥–∏–º—ã–π —ç–∫—Ä–∞–Ω
    static getCurrent() {
        const generationEl = document.getElementById('generationScreen');
        const processingEl = document.getElementById('processingScreen');
        const authScreen = document.getElementById('authScreen');
        const chatScreen = document.getElementById('chatScreen');

        const isVisible = el => {
            if (!el) return false;
            const cs = window.getComputedStyle(el);
            if (el.classList.contains('hidden')) return false;
            return cs.display !== 'none' && cs.visibility !== 'hidden' && cs.opacity !== '0';
        };

        if (isVisible(processingEl)) return 'processing';
        if (isVisible(generationEl)) return 'generation';
        if (isVisible(chatScreen)) return 'chat';
        if (isVisible(authScreen)) return 'auth';
        return 'unknown';
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    static showAuth() {
        this.show('authScreen');
        console.log('üéØ –ü–æ–∫–∞–∑–∞–Ω —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');

        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ .app –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–∏–¥–∏–º—ã–π
        const app = document.querySelector('.app');
        if (app && !app.classList.contains('loaded')) {
            app.classList.add('loaded');
            console.log('üéØ App container made visible for auth screen');
        }

        // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if (typeof window.dictionaryManager !== 'undefined' && window.dictionaryManager.updateTranslations) {
            setTimeout(() => {
                window.dictionaryManager.updateTranslations();
                console.log('‚úÖ Translations updated for auth screen');
            }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
        }

        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —ç–∫—Ä–∞–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const authScreen = document.getElementById('authScreen');
        const authContainer = authScreen?.querySelector('.auth-container');
        const authTitle = authScreen?.querySelector('.auth-title');
        const authSubtitle = authScreen?.querySelector('.auth-subtitle');
        const authContent = authScreen?.querySelector('.auth-content');
        const authBtn = authScreen?.querySelector('.auth-btn');

        console.log('üëÄ Auth screen structure:', {
            screen: !!authScreen,
            screenDisplay: authScreen ? getComputedStyle(authScreen).display : 'null',
            screenClasses: authScreen?.className,
            container: !!authContainer,
            containerDisplay: authContainer ? getComputedStyle(authContainer).display : 'null',
            containerPosition: authContainer ? getComputedStyle(authContainer).position : 'null',
            containerWidth: authContainer ? getComputedStyle(authContainer).width : 'null',
            containerHeight: authContainer ? getComputedStyle(authContainer).height : 'null',
            containerMargin: authContainer ? getComputedStyle(authContainer).margin : 'null',
            containerPadding: authContainer ? getComputedStyle(authContainer).padding : 'null',
            containerLeft: authContainer ? getComputedStyle(authContainer).left : 'null',
            containerTop: authContainer ? getComputedStyle(authContainer).top : 'null',
            containerBgColor: authContainer ? getComputedStyle(authContainer).backgroundColor : 'null',
            title: !!authTitle,
            titleText: authTitle?.textContent?.substring(0, 20),
            titleDisplay: authTitle ? getComputedStyle(authTitle).display : 'null',
            titleColor: authTitle ? getComputedStyle(authTitle).color : 'null',
            subtitle: !!authSubtitle,
            subtitleDisplay: authSubtitle ? getComputedStyle(authSubtitle).display : 'null',
            subtitleColor: authSubtitle ? getComputedStyle(authSubtitle).color : 'null',
            content: !!authContent,
            contentDisplay: authContent ? getComputedStyle(authContent).display : 'null',
            btn: !!authBtn,
            btnDisplay: authBtn ? getComputedStyle(authBtn).display : 'null',
            btnBgColor: authBtn ? getComputedStyle(authBtn).backgroundColor : 'null'

        });
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
    static showProcessing() {
        this.show('processingScreen');
        // updateProcessingSteps(1); // –§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —É–±—Ä–∞–Ω–∞ –∏–∑ –∫–æ–¥–∞
        console.log('--- –ü—Ä–æ–≤–µ—Ä–∫–∞ processingScreen ---');
        const proc = document.getElementById('processingScreen');
        if (!proc) {
            console.error('‚ùå –ù–µ—Ç –±–ª–æ–∫–∞ #processingScreen –≤ DOM');
        } else {
            console.log('‚úÖ –ù–∞—à—ë–ª processingScreen:', proc);
            console.log('–ö–ª–∞—Å—Å—ã:', proc.className);
            console.log('display:', getComputedStyle(proc).display);
            console.log('opacity:', getComputedStyle(proc).opacity);
            console.log('transform:', getComputedStyle(proc).transform);
            console.log('innerHTML –¥–ª–∏–Ω–∞:', proc.innerHTML.length);
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    static showGeneration() {
        this.show('generationScreen');
    }

    static showApp() {
        console.log('ScreenManager.showApp called - showing app screen');
        this.show('generationScreen');
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
        document.querySelector('.app').classList.add('loaded');
        console.log('üéØ App screen shown successfully');
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ª–æ–≥–∏–∫–æ–π
    static showResult(result) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ —Å–µ–π—á–∞—Å –ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if (this.getCurrent() === 'result') {
            // –≠–∫—Ä–∞–Ω —É–∂–µ –∑–∞–Ω—è—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Å—Ç-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showResultToast(result);
            console.log('üéØ –ü–æ–∫–∞–∑–∞–Ω —Ç–æ—Å—Ç —Å –Ω–æ–≤—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (—ç–∫—Ä–∞–Ω –∑–∞–Ω—è—Ç)');
        } else {
            // –≠–∫—Ä–∞–Ω —Å–≤–æ–±–æ–¥–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.displayFullResult(result);
            console.log('üéØ –ü–æ–∫–∞–∑–∞–Ω –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—ç–∫—Ä–∞–Ω —Å–≤–æ–±–æ–¥–µ–Ω)');
        }
    }

    // –ü–æ–ª–Ω—ã–π –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –º–æ–¥–∞–ª—å–Ω–æ–º—É –æ–∫–Ω—É
    static displayFullResult(result) {
        console.log('üîÑ displayFullResult: Redirecting to generationResultModal');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ showGenerationResultModal
        if (typeof window.showGenerationResultModal === 'function') {
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç item –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–∂–∏–¥–∞–µ–º–æ–º showGenerationResultModal
            const item = {
                id: window.appState.currentGeneration?.id || Date.now(),
                result: result.image_url,
                dataUrl: result.image_url, // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º dataUrl –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                prompt: window.appState.currentGeneration?.prompt || '',
                mode: window.appState.currentGeneration?.mode || 'unknown',
                style: window.appState.currentGeneration?.style || 'unknown',
                generation_cost: window.appState.currentGeneration?.generation_cost,
                cost_currency: window.appState.currentGeneration?.cost_currency || 'Cr',
                timestamp: window.appState.currentGeneration?.timestamp || new Date().toISOString()
            };

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            window.showGenerationResultModal(item);
            console.log('üéØ Opened generationResultModal for generation result');
        } else {
            console.error('‚ùå showGenerationResultModal function not available');
            // Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Å—Ç –æ–± –æ—à–∏–±–∫–µ
            this.showResultToast(result);
        }
    }

    // –¢–æ—Å—Ç-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    static showResultToast(result) {
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ç–æ—Å—Ç–∞
        const toastId = `result-toast-${Date.now()}`;
        const generation = window.appState.currentGeneration;

        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Ç–æ—Å—Ç–∞
        const toast = document.createElement('div');
        toast.id = toastId;
        toast.className = 'result-toast';

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const style = (generation.style || 'unknown');
        const mode = (generation.mode || 'unknown');

        toast.innerHTML = `
            <div class="toast-content">
                <div class="toast-image">
                    <img src="${result.image_url}?t=${Date.now()}" alt="Generated image preview" loading="lazy">
                </div>
                <div class="toast-details">
                    <div class="toast-meta">
                        <span class="toast-style">${style}</span>
                        <span class="toast-mode">${mode}</span>
                    </div>
                    <button class="toast-view-btn">View Result</button>
                    <button class="toast-close-btn">√ó</button>
                </div>
            </div>
        `;

        // –°—Ç–∏–ª–∏ –¥–ª—è —Ç–æ—Å—Ç–∞ (–±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ CSS –∏–ª–∏ –∏–Ω–ª–∞–π–Ω–æ–≤–æ)
        Object.assign(toast.style, {
            position: 'fixed',
            bottom: '20px',
            right: '20px',
            width: '280px',
            background: 'var(--bg-primary)',
            border: '1px solid var(--border-primary)',
            borderRadius: '12px',
            boxShadow: '0 8px 32px rgba(0,0,0,0.3)',
            zIndex: '10000',
            opacity: '0',
            transform: 'translateY(100px)',
            transition: 'all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94)',
            cursor: 'default',
            overflow: 'hidden'
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        toast.querySelector('.toast-view-btn').addEventListener('click', (e) => {
            e.stopPropagation();
            this.displayFullResult(result);
            this.removeResultToast(toast);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∑–∞–∫—Ä—ã—Ç–∏—é —Ç–æ—Å—Ç–∞
        toast.querySelector('.toast-close-btn').addEventListener('click', (e) => {
            e.stopPropagation();
            this.removeResultToast(toast);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –≤—Å–µ–º—É —Ç–æ—Å—Ç—É (–∫—Ä–æ–º–µ –∫–Ω–æ–ø–æ–∫)
        toast.addEventListener('click', () => {
            this.displayFullResult(result);
            this.removeResultToast(toast);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        document.body.appendChild(toast);

        // –ê–Ω–∏–º–∏—Ä—É–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ
        requestAnimationFrame(() => {
            toast.style.opacity = '1';
            toast.style.transform = 'translateY(0)';
        });

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            this.removeResultToast(toast);
        }, 5000);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–æ—Å—Ç–∞
        const styleElement = document.createElement('style');
        styleElement.textContent = `
            .result-toast .toast-content {
                display: flex;
                padding: 0;
            }
            .result-toast .toast-image {
                width: 80px;
                height: 80px;
                flex-shrink: 0;
            }
            .result-toast .toast-image img {
                width: 100%;
                height: 100%;
                object-fit: cover;
                border-radius: 8px 0 0 8px;
            }
            .result-toast .toast-details {
                flex: 1;
                padding: 12px;
                display: flex;
                flex-direction: column;
                justify-content: space-between;
            }
            .result-toast .toast-meta {
                display: flex;
                flex-direction: column;
                gap: 4px;
                margin-bottom: 8px;
            }
            .result-toast .toast-meta span {
                font-size: 11px;
                font-weight: 500;
                color: var(--text-secondary);
                background: var(--bg-secondary);
                padding: 2px 6px;
                border-radius: 4px;
            }
            .result-toast .toast-view-btn {
                background: var(--accent-primary);
                color: white;
                border: none;
                border-radius: 6px;
                padding: 6px 12px;
                font-size: 12px;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.2s ease;
                align-self: flex-start;
            }
            .result-toast .toast-view-btn:hover {
                background: var(--accent-secondary);
                transform: translateY(-1px);
            }
            .result-toast .toast-close-btn {
                position: absolute;
                top: 6px;
                right: 6px;
                background: rgba(0,0,0,0.1);
                border: none;
                border-radius: 50%;
                width: 20px;
                height: 20px;
                font-size: 12px;
                font-weight: bold;
                cursor: pointer;
                display: flex;
                align-items: center;
                justify-content: center;
            }
        `;
        document.head.appendChild(styleElement);

        console.log('üîî –ü–æ–∫–∞–∑–∞–Ω —Ç–æ—Å—Ç —Å –Ω–æ–≤—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ—Å—Ç–∞
    static removeResultToast(toast) {
        if (!toast) return;

        toast.style.opacity = '0';
        toast.style.transform = 'translateY(100px)';

        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 300);
    }

    // üî• –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö –ì–ï–ù–ï–†–ê–¶–ò–ò =====

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –µ—Å–ª–∏ –≤–µ–±—Ö—É–∫ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É
    static handleGenerationError(generationId, error) {
        console.log(`‚ùå Handling generation error for ID: ${generationId}`);

        // –ò—â–µ–º –ø—Ä–µ–≤—å—é —ç–ª–µ–º–µ–Ω—Ç
        const previewItem = document.getElementById(`loading-${generationId}`) || document.getElementById(`history-${generationId}`);
        if (previewItem) {
            // –ê–Ω–∏–º–∏—Ä—É–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º
            previewItem.style.transition = 'all 0.3s ease-out';
            previewItem.style.opacity = '0';
            previewItem.style.transform = 'translateY(-20px)';

            setTimeout(() => {
                if (previewItem.parentNode) {
                    previewItem.parentNode.removeChild(previewItem);
                    console.log(`üóëÔ∏è Removed failed preview for generation ${generationId}`);
                }
            }, 300);
        }

        // –ò—â–µ–º –æ–±—ä–µ–∫—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏ —É–¥–∞–ª—è–µ–º
        if (window.appState && window.appState.generationHistory) {
            const generationIndex = window.appState.generationHistory.findIndex(g => g.id == generationId);
            if (generationIndex !== -1) {
                window.appState.generationHistory.splice(generationIndex, 1);
                window.appState.saveHistory();
                console.log(`üìã Removed generation ${generationId} from history due to error`);
            }
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (error && error.message) {
            showToast('error', `Generation failed: ${error.message}`);
        } else {
            showToast('error', 'Generation failed. Please try again.');
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ "accepted" –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≤–µ–±—Ö—É–∫–∞ - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ—à–∏–±–∫—É
    // –ï—Å–ª–∏ –≤–µ–±—Ö—É–∫ –≤–µ—Ä–Ω—É–ª "accepted" - —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫—É —Å–µ—Ä–≤–µ—Ä–∞
    static handleWebhookAcceptedResponse(generationId) {
        console.warn(`üö® Webhook returned "accepted" for generation ${generationId} - server overloaded`);

        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–≤—å—é —Ç–∞–∫ –∫–∞–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
        const error = new Error('Server overloaded. Please try again later.');
        this.handleGenerationError(generationId, error);
    }
}

// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ showToast
function showToast(type, message) {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Ç–æ—Å—Ç–∞
    const toast = document.createElement('div');
    toast.className = `toast toast-${type} show`;
    toast.innerHTML = `
        <div class="toast-content">
            <span class="toast-message">${message}</span>
            <button class="toast-close" onclick="this.parentElement.parentElement.remove()">√ó</button>
        </div>
        <div class="toast-progress"></div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–æ—Å—Ç–æ–≤
    const container = document.getElementById('toastContainer');
    if (container) {
        container.appendChild(toast);
    } else {
        document.body.appendChild(toast);
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (toast.parentNode) {
            toast.classList.remove('show');
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 300);
        }
    }, 5000);

    console.log(`üîî Toast shown: ${type} - ${message}`);
}

// –ó–∞–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é showToast
window.showToast = showToast;

// –õ–µ–≥–∞—Å–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
function showScreen(screenId) { return ScreenManager.show(screenId); }
function getCurrentScreen() { return ScreenManager.getCurrent(); }
function showProcessing() { return ScreenManager.showProcessing(); }
function showApp() { return ScreenManager.showApp(); }
function showResult(result) { return ScreenManager.showResult(result); }
function showAuth() { return ScreenManager.showAuth(); }
function displayFullResult(result) { return ScreenManager.displayFullResult(result); }
function showResultToast(result) { return ScreenManager.showResultToast(result); }
function removeResultToast(toast) { return ScreenManager.removeResultToast(toast); }

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –∏ —Ñ—É–Ω–∫—Ü–∏–∏
export { ScreenManager };
export { showScreen, getCurrentScreen, showProcessing, showApp, showResult, showAuth, displayFullResult, showResultToast, removeResultToast };

console.log('‚úÖ showToast function registered globally');

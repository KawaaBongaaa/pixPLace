/**
 * Remove Background Module
 * –û—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º webhook
 */

class RemoveBackgroundModule {
    constructor() {
        this.initialized = false;
        this.webhookUrl = 'https://api.runware.ai/v1/'; // Direct API endpoint
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    init() {
        if (this.initialized) return;
        console.log('üé® RemoveBackgroundModule initialized');
        this.initialized = true;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {Object} generation - –æ–±—ä–µ–∫—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ generationManager
     * @param {string} apiKey - API –∫–ª—é—á Runware
     */
    async processRemoval(generation, apiKey) {
        console.log('üé® Starting background removal for generation:', generation.id);

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π UUID
            const imageUUID = generation.imageUUIDs?.[0] || generation.imageUUID;
            if (!imageUUID) {
                throw new Error('No image UUID found for background removal');
            }

            console.log('üé® Using image UUID:', imageUUID, 'for background removal');
            console.log('üé® Task UUID:', generation.taskUUID);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∫ Runware API –≤–º–µ—Å—Ç–æ webhook
            const result = await this.directRunwareRequest(imageUUID, generation.taskUUID, apiKey);
            console.log('üé® Background removal result:', result);

            if (result.status === 'success') {
                console.log('‚úÖ Background removal successful:', result.image_url);

                // –£–±–∏—Ä–∞–µ–º cost –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                return {
                    status: 'success',
                    image_url: result.image_url,
                    cost: 0, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0, –Ω–∞—Å—Ç–æ—è—â–∏–π cost –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                    cost_currency: 'Cr',
                    remaining_credits: null, // –ü–æ–∫–∞ –±–µ–∑ –∫—Ä–µ–¥–∏—Ç–æ–≤
                    imageUUID: imageUUID,
                    taskUUID: generation.taskUUID
                };
            } else {
                throw new Error(result.error || 'Background removal failed');
            }

        } catch (error) {
            console.error('‚ùå Background removal failed:', error);
            return {
                status: 'error',
                error: error.message || 'Background removal failed'
            };
        }
    }

    /**
     * –ü—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ Runware API –¥–ª—è background removal (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)
     * @param {string} imageUUID - UUID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {string} taskUUID - UUID –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    async directRunwareRequest(imageUUID, taskUUID, apiKey) {
        if (!apiKey) {
            throw new Error('Runware API key not configured');
        }

        const requestBody = [
            {
                taskType: "imageBackgroundRemoval",
                inputImage: imageUUID,
                outputType: ["URL"],
                outputFormat: "PNG",
                model: "runware:110@1",
                includeCost: true,
                taskUUID: taskUUID
            }
        ];

        console.log('üé® Direct Runware request for background removal:', {
            imageUUID,
            taskUUID,
            model: "runware:110@1"
        });

        try {
            const response = await fetch(this.webhookUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'Authorization': `Bearer ${apiKey}`
                },
                body: JSON.stringify(requestBody)
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }

            const result = await response.json();
            console.log('üé® Direct Runware response:', result);

            if (result.data && result.data[0] && result.data[0].imageURL) {
                return {
                    status: 'success',
                    image_url: result.data[0].imageURL,
                    cost: result.data[0].cost || 0
                };
            } else {
                throw new Error('Unexpected response format from Runware');
            }
        } catch (error) {
            console.error('‚ùå Direct Runware request failed:', error);
            throw error;
        }
    }
}

// –≠–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥—É–ª—è
const removeBackgroundModule = new RemoveBackgroundModule();

// –≠–∫—Å–ø–æ—Ä—Ç
export { removeBackgroundModule, RemoveBackgroundModule };

// –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å window
window.removeBackgroundModule = removeBackgroundModule;

console.log('üé® Remove Background Module loaded');

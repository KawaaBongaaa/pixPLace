// core/services.js - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ —Ñ–∞–±—Ä–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤

import { AppStateManager } from '../store/app-state.js';
import { eventBus } from '../events/event-bus.js';

// –°–µ—Ä–≤–∏—Å Telegram
class TelegramService {
    constructor(appStateManager, eventBus) {
        this.appState = appStateManager;
        this.eventBus = eventBus;
        this.tg = null;

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        this.eventBus.on('generation:completed', this._handleGenerationCompleted.bind(this));
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
    async initialize() {
        console.log('üì± Initializing Telegram WebApp service');

        // üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –≠–¢–û –ñ–ï–ù–°–¢–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ü–û–õ–£–ß–ê–ï–ú –°–í–ï–ñ–ò–ï –î–ê–ù–ù–´–ï –û–¢ TELEGRAM
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¢–û–õ–¨–ö–û –µ—Å–ª–∏ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (fallback –¥–ª—è —Å–µ—Å—Å–∏–π)

        // –ñ–¥–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram SDK —Å –±–æ–ª—å—à–∏–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
        console.log('‚è≥ Waiting for Telegram SDK to load...');

        return new Promise((resolve) => {
            let attempts = 0;
            const maxAttempts = 25; // 5 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º (25 * 200ms = 5000ms)
            const retryDelay = 200; // –∫–∞–∂–¥—ã–µ 200–º—Å

            const checkWebApp = () => {
                attempts++;
                console.log(`üîç WebApp check attempt ${attempts}/${maxAttempts}`);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram SDK
                if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
                    console.log('üì± WebApp detected, initializing...');

                    this.tg = window.Telegram.WebApp;
                    this.tg.ready();
                    this.tg.expand();

                    console.log('üì± WebApp available, initDataUnsafe:', {
                        hasInitData: !!this.tg.initDataUnsafe,
                        hasUser: !!this.tg.initDataUnsafe?.user,
                        userId: this.tg.initDataUnsafe?.user?.id,
                        userFirstName: this.tg.initDataUnsafe?.user?.first_name
                    });

                    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initDataUnsafe
                    const loadUserFromInitData = () => {
                        if (this.tg.initDataUnsafe?.user) {
                            const user = this.tg.initDataUnsafe.user;
                            this.appState.setUser({
                                id: user.id.toString(),
                                name: user.first_name + (user.last_name ? ' ' + user.last_name : ''),
                                username: user.username || null,
                                language: user.language_code || 'en',
                                isPremium: user.is_premium || false
                            });

                            // –ê–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞
                            if (user.language_code && ['en', 'ru', 'es', 'fr', 'de', 'zh', 'pt', 'ar', 'hi', 'ja', 'it', 'ko', 'vi', 'th', 'tr', 'pl'].includes(user.language_code)) {
                                this.appState.setLanguage(user.language_code);
                            }

                            console.log('‚úÖ Telegram user data loaded:', this.appState.user);

                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—É–¥—É—â–∏—Ö —Å–µ—Å—Å–∏–π
                            localStorage.setItem('telegram_auth_completed', 'true');
                            localStorage.setItem('telegram_auth_token', 'webapp_' + Date.now());
                            localStorage.setItem('telegram_user_data', JSON.stringify(user));
                            localStorage.setItem('telegram_auth_timestamp', Date.now().toString());

                            return true;
                        }
                        return false;
                    };

                    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ä–∞–∑—É
                    if (loadUserFromInitData()) {
                        resolve(true);
                        return;
                    }

                    // –ï—Å–ª–∏ initDataUnsafe.user –ø—É—Å—Ç–æ–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (fallback)
                    const urlParams = new URLSearchParams(window.location.search);
                    const urlUserId = urlParams.get('user_id');
                    const urlUserData = urlParams.get('user_data');

                    if (urlUserId && urlUserData) {
                        try {
                            console.log('üì° User data from URL params detected');
                            const parsedUserData = JSON.parse(decodeURIComponent(urlUserData));

                            this.appState.setUser({
                                id: parsedUserData.id.toString(),
                                name: parsedUserData.first_name + (parsedUserData.last_name ? ' ' + parsedUserData.last_name : ''),
                                username: parsedUserData.username || null,
                                language: parsedUserData.language_code || 'en',
                                isPremium: parsedUserData.is_premium || false
                            });

                            console.log('‚úÖ Telegram user data loaded from URL:', this.appState.user);

                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                            localStorage.setItem('telegram_auth_completed', 'true');
                            localStorage.setItem('telegram_auth_token', 'url_' + Date.now());
                            localStorage.setItem('telegram_user_data', JSON.stringify(parsedUserData));
                            localStorage.setItem('telegram_auth_timestamp', Date.now().toString());

                            // –û—á–∏—â–∞–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                            const cleanUrl = window.location.pathname + window.location.hash;
                            window.history.replaceState({}, document.title, cleanUrl);

                            resolve(true);
                            return;
                        } catch (error) {
                            console.error('‚ùå Error parsing URL user data:', error);
                        }
                    }

                    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –Ω–∏ –≤ initDataUnsafe, –Ω–∏ –≤ URL - –ø—Ä–æ–±—É–µ–º —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                    console.log('‚è≥ No user data found, trying with retry delay');

                    // –ù–∞—á–∏–Ω–∞–µ–º internal retry –≤–Ω—É—Ç—Ä–∏ —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ WebApp
                    let internalAttempts = 0;
                    const internalMaxAttempts = 10;

                    const checkWithDelay = () => {
                        internalAttempts++;
                        console.log(`üîÑ Internal retry ${internalAttempts}/${internalMaxAttempts}`);

                        if (loadUserFromInitData()) {
                            resolve(true);
                            return;
                        }

                        if (internalAttempts >= internalMaxAttempts) {
                            console.warn('‚ùå No user data after internal retries');
                            resolve(false); // –ü–û–ö–ê–ó–ê–¢–¨ AUTH SCREEN
                        } else {
                            setTimeout(checkWithDelay, retryDelay);
                        }
                    };

                    setTimeout(checkWithDelay, retryDelay);

                } else if (attempts >= maxAttempts) {
                    console.warn('‚ùå Telegram WebApp not available after max attempts');
                    resolve(false); // –ü–û–ö–ê–ó–ê–¢–¨ AUTH SCREEN
                } else {
                    setTimeout(checkWebApp, retryDelay);
                }
            };

            // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 1500ms –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π (–±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É SDK)
            setTimeout(checkWebApp, 1500);
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    _handleGenerationCompleted(data) {
        console.log('üéØ TelegramService: Generation completed, checking share options');

        // –í Telegram –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        if (this.tg && data?.image_url) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —à–∞—Ä–∏–Ω–≥—É
            this.eventBus.emit('telegram:share_ready', {
                imageUrl: data.image_url,
                prompt: data.prompt,
                canShare: this.tg?.platform === 'android' || this.tg?.platform === 'ios'
            });
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getCurrentUser() {
        return this.appState.user;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞
    isPremium() {
        return this.appState.user.isPremium || false;
    }
}

// –°–µ—Ä–≤–∏—Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
class StorageService {
    constructor(appStateManager) {
        this.appState = appStateManager;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    saveSettings() {
        try {
            const data = this.appState.serialize();
            localStorage.setItem('appSettings', JSON.stringify(data));
            console.log('üíæ Settings saved to localStorage');
        } catch (error) {
            console.error('‚ùå Failed to save settings:', error);
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    loadSettings() {
        try {
            const data = JSON.parse(localStorage.getItem('appSettings') || '{}');
            this.appState.deserialize(data);
            console.log('üìö Settings loaded from localStorage');
        } catch (error) {
            console.error('‚ùå Failed to load settings:', error);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    saveHistory() {
        try {
            localStorage.setItem('generationHistory', JSON.stringify(this.appState.generationHistory));
            console.log('üíæ History saved');
        } catch (error) {
            console.error('‚ùå Failed to save history:', error);
            // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ sessionStorage –∫–∞–∫ fallback
            try {
                sessionStorage.setItem('generationHistory', JSON.stringify(this.appState.generationHistory));
            } catch (fallbackError) {
                console.error('Fallback storage also failed:', fallbackError);
            }
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    loadHistory() {
        try {
            const history = JSON.parse(localStorage.getItem('generationHistory') || '[]');
            this.appState.setGenerationHistory(history);
            console.log('üìö History loaded:', history.length, 'items');
        } catch (error) {
            console.error('‚ùå Failed to load history:', error);
            this.appState.setGenerationHistory([]);
        }
    }
}

// –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
class NotificationService {
    constructor(eventBus) {
        this.eventBus = eventBus;
        this.eventBus.on('notification:show', this.showNotification.bind(this));
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification(type, message, duration = 3000) {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        toast.innerHTML = `
            <span class="toast-message">${message}</span>
            <button class="toast-close">√ó</button>
        `;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        toast.querySelector('.toast-close').onclick = () => this.removeToast(toast);
        toast.onclick = () => this.removeToast(toast);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        document.body.appendChild(toast);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        if (duration > 0) {
            setTimeout(() => this.removeToast(toast), duration);
        }

        console.log(`üîî Notification shown: ${type} - ${message}`);
    }

    // –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    removeToast(toast) {
        if (toast.parentNode) {
            toast.style.opacity = '0';
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 300);
        }
    }
}

// –§–∞–±—Ä–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
export function createAppServices() {
    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const appState = new AppStateManager();

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å–æ–±—ã—Ç–∏–π
    const evBus = eventBus;

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
    const services = {
        appState,
        eventBus: evBus,
        telegram: new TelegramService(appState, evBus),
        storage: new StorageService(appState),
        notifications: new NotificationService(evBus)
    };

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    services.storage.loadSettings();
    services.storage.loadHistory();

    console.log('‚úÖ App services initialized');
    return services;
}

// –≠–∫—Å–ø–æ—Ä—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export let globalServices = null;

export function initializeGlobalServices() {
    if (!globalServices) {
        globalServices = createAppServices();

        // –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è legacy –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        if (typeof window !== 'undefined') {
            window.appServices = globalServices;
        }
    }
    return globalServices;
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
if (typeof window !== 'undefined') {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.addEventListener('DOMContentLoaded', () => {
        initializeGlobalServices();
    });
}

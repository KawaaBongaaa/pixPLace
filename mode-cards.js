// –û–¢–î–ï–õ–¨–ù–´–ô –ú–û–î–£–õ–¨ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–†–¢–û–ß–ö–ê–ú–ò –†–ï–ñ–ò–ú–û–í
// (LAZY LOADING —Ä–∞–∑–¥–µ–ª–µ–Ω –ø–æ –º–æ–¥—É–ª—è–º –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)

let selectedMode = 'photo_session';
let currentExpandedCard = null;
let activeTooltip = null;
let tooltipShowTimer = null;
let tooltipHideTimer = null;

// –≠–ö–°–ü–û–†–¢–ò–†–£–ï–ú –§–£–ù–ö–¶–ò–Æ –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –í–´–ë–†–ê–ù–ù–û–ì–û –†–ï–ñ–ò–ú–ê
export function getSelectedMode() {
    return selectedMode;
}

// –≠–ö–°–ü–û–†–¢–ò–†–£–ï–ú –§–£–ù–ö–¶–ò–Æ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –û–¢–õ–û–ñ–ï–ù–ù–û–ô–ó–ê–ì–†–£–ó–ö–ò
export async function initOnDemand() {
    await initializeModeCardsLazy();

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å appState –µ—Å–ª–∏ –æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω
    if (window.appState && window.appState.selectedMode) {
        selectedMode = window.appState.selectedMode;
    }

    // üî• –î–û–ë–ê–í–õ–ï–ù–û: –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
    window.modeCardsExports = {
        getSelectedMode,
        initOnDemand,
        setSelectedMode
    };

    console.log('‚úÖ Mode cards initialized successfully with selected mode:', selectedMode);
    console.log('‚úÖ Mode cards exports attached to window.modeCardsExports');
}

// –í–ù–£–¢–†–ï–ù–ù–Ø–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
async function initializeModeCardsLazy() {
    const modeCardsWrapper = document.getElementById('modeCardsWrapper');
    if (!modeCardsWrapper) {
        console.warn('Mode cards wrapper container not found');
        return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–∂–∏–º–æ–≤ —Å –ø–æ–ª–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –¥–ª—è tooltip
    const cardsHTML = `
        <div class="mode-cards-grid">
            <div class="mode-card" data-mode="photo_session" data-full-description="Perfect for photo editing. Upload an image and describe what to change - adjust lighting, composition, colors, or add creative elements. Supports various image formats with precise control over each modification.">
                <span class="mode-badge mode-badge--premium" data-i18n="badge_premium">Premium</span>
                <div class="mode-icon">üçå</div>
                <h4 class="mode-title">Nano Banana Editor</h4>
                <p class="mode-description">Perfect for photo editing. Upload an image and describe what to change</p>
            </div>

            <div class="mode-card" data-mode="dreamshaper_xl" data-full-description="Fast generation model designed as an all-in-one solution for photos, stylized art, anime, and manga. Optimized for quick results with high quality output across multiple styles and creative directions.">
                <span class="mode-badge mode-badge--free" data-i18n="badge_free">Free</span>
                <div class="mode-icon">‚ãÜ.Àöü¶ã‡ºò‚ãÜ</div>
                <h4 class="mode-title">DreamShaper XL</h4>
                <p class="mode-description">Fast generation model designed as an all-in-one for photos, stylized art, and anime/manga.</p>
            </div>
            <div class="mode-card" data-mode="fast_generation" data-full-description="The fastest mode for simple picture generation without requiring image upload. Perfect for quick concepts, ideas, or basic illustrations that don't need reference material.">
                <span class="mode-badge mode-badge--standard" data-i18n="badge_standard">Standard</span>
                <div class="mode-icon">‚ö°</div>
                <h4 class="mode-title">Flux Fast Generation</h4>
                <p class="mode-description">Fastest mode for simple pictures generation without image upload</p>
            </div>

            <div class="mode-card" data-mode="pixplace_pro" data-full-description="Advanced mode with comprehensive text support, logos, and complex multi-element compositions. Ideal for professional projects requiring precise placement, typography, and layered designs with multiple visual components.">
                <span class="mode-badge mode-badge--premium" data-i18n="badge_premium">Premium</span>
                <div class="mode-icon">ùìüùìªùì∏</div>
                <h4 class="mode-title">Flux Pro Advanced</h4>
                <p class="mode-description">Advanced mode with text support, logos and complex compositions</p>
            </div>

            <div class="mode-card" data-mode="print_maker" data-full-description="Specialized for Print on Demand industry. Creates ready-made designs optimized for clothes, accessories, and merchandise. Automatically adapts to different print surfaces with proper color profiles and sizing.">
                <span class="mode-badge mode-badge--standard" data-i18n="badge_standard">Standard</span>
                <div class="mode-icon">üëï</div>
                <h4 class="mode-title">Print on Demand</h4>
                <p class="mode-description">Specialized for Print on Demand. Creates ready-made prints for clothes and accessories</p>
            </div>

            <div class="mode-card" data-mode="background_removal" data-full-description="Advanced background removal that preserves objects with pixel-perfect accuracy. Uses AI to detect and isolate subjects while maintaining edge quality and transparency for professional results.">
                <span class="mode-badge mode-badge--free" data-i18n="badge_free">Free</span>
                <div class="mode-icon">‚úÇ</div>
                <h4 class="mode-title">Remove Background</h4>
                <p class="mode-description">Removes background from image while preserving the object</p>
            </div>

            <div class="mode-card" data-mode="upscale_image" data-full-description="Improves quality and resolution of existing images up to 4K using advanced AI algorithms. Enhances details, reduces noise, and restores clarity without losing original characteristics.">
                <span class="mode-badge mode-badge--premium" data-i18n="badge_premium">Premium</span>
                <div class="mode-icon">*‡©à‚ú©‚Äß‚ÇäÀö</div>
                <h4 class="mode-title">Upscale Image</h4>
                <p class="mode-description">Improves quality and resolution of existing image up to 4K</p>
            </div>
        </div>
    `;

    modeCardsWrapper.innerHTML = cardsHTML;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
    initModeCardListeners();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º tooltip —Å–ª—É—à–∞—Ç–µ–ª–∏
    initTooltipListeners();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    selectModeCard(selectedMode);

    console.log('‚úÖ Mode cards HTML created and inserted to modeCardsWrapper');
    console.log('‚úÖ Mode cards tooltips initialized');
}

// –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í
function initModeCardListeners() {
    const modeCards = document.querySelectorAll('.mode-card');

    modeCards.forEach(card => {
        card.addEventListener('click', () => {
            const mode = card.dataset.mode;
            selectModeCard(mode);
        });
    });
}

// –§–£–ù–ö–¶–ò–Ø –í–´–ë–û–†–ê –ö–ê–†–¢–û–ß–ö–ò –†–ï–ñ–ò–ú–ê
async function selectModeCard(modeValue) {
    selectedMode = modeValue;

    // üî• –í–°–ï–ì–î–ê –û–ë–ù–û–í–õ–Ø–ï–ú UI –≠–õ–ï–ú–ï–ù–¢–´ –î–õ–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
    // –û–±–Ω–æ–≤–ª—è–µ–º UI –∫–∞—Ä—Ç–æ—á–µ–∫
    const allCards = document.querySelectorAll('.mode-card');
    allCards.forEach(card => card.classList.remove('selected'));
    const selectedCard = document.querySelector(`.mode-card[data-mode="${modeValue}"]`);
    if (selectedCard) {
        currentExpandedCard = selectedCard;
        selectedCard.classList.add('selected');
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å hidden select –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const modeSelect = document.getElementById('modeSelect');
    if (modeSelect) {
        modeSelect.value = modeValue;
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å appState –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if (window.appState) {
        window.appState.selectedMode = modeValue;
    }

    // üî• –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞
    if (window.updateSizeSelectVisibility) {
        await window.updateSizeSelectVisibility();
    }
    if (window.updateImageUploadVisibility) {
        window.updateImageUploadVisibility();
    }
    if (window.updatePromptVisibility) {
        await window.updatePromptVisibility();
    }

    // –î–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
    document.dispatchEvent(new CustomEvent('mode:changed', {
        detail: { mode: modeValue }
    }));

    console.log(`üéõÔ∏è Mode changed to: ${modeValue}`);
}

// –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø UI –î–õ–Ø –í–´–ë–†–ê–ù–ù–û–ì–û –†–ï–ñ–ò–ú–ê
async function updateUIForSelectedMode(mode) {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ app_modern.js –µ—Å–ª–∏ –æ–Ω–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã
    if (window.updateImageUploadVisibility) {
        window.updateImageUploadVisibility();
    }

    if (window.updatePromptVisibility) {
        await window.updatePromptVisibility();
    }

    if (window.updateSizeSelectVisibility) {
        await window.updateSizeSelectVisibility();
    }

    // –î–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
    document.dispatchEvent(new CustomEvent('mode:changed', {
        detail: { mode: mode }
    }));
}

// –§–£–ù–ö–¶–ò–Ø –ü–†–û–ì–†–ê–ú–ú–ù–û–ì–û –í–´–ë–û–†–ê –†–ï–ñ–ò–ú–ê (–¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
export function setSelectedMode(mode) {
    selectModeCard(mode);
}

// –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø TOOLTIP –≠–õ–ï–ú–ï–ù–¢–ê
function createTooltipElement(text, targetRect) {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π tooltip —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    if (activeTooltip) {
        activeTooltip.classList.remove('visible');
        setTimeout(() => {
            if (activeTooltip) {
                activeTooltip.remove();
                activeTooltip = null;
            }
        }, 200);
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π tooltip
    const tooltip = document.createElement('div');
    tooltip.className = 'mode-tooltip';
    tooltip.textContent = text;
    tooltip.setAttribute('data-tooltip-id', 'mode-tooltip-' + Date.now());

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é (–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Å–≤–µ—Ä—Ö—É, –∏–Ω–∞—á–µ —Å–Ω–∏–∑—É)
    const viewportWidth = window.innerWidth;
    const viewportHeight = window.innerHeight;
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;

    // –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ viewport
    const absTop = targetRect.top + scrollTop;
    const absLeft = targetRect.left + scrollLeft;
    const absBottom = absTop + targetRect.height;

    let top, left;
    const tooltipMaxHeight = 120; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –≤—ã—Å–æ—Ç–∞ tooltip

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ —Å–≤–µ—Ä—Ö—É
    if (targetRect.top - 10 >= tooltipMaxHeight) {
        // –†–∞–∑–º–µ—â–∞–µ–º —Å–≤–µ—Ä—Ö—É
        top = absTop - 10;
        tooltip.classList.add('position-top');
    } else {
        // –†–∞–∑–º–µ—â–∞–µ–º —Å–Ω–∏–∑—É
        top = absBottom + 10;
        tooltip.classList.add('position-bottom');
    }

    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    left = absLeft + (targetRect.width / 2) - 150;

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —ç–∫—Ä–∞–Ω–∞ –±–µ–∑ —É—á–µ—Ç–∞ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è viewport –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const tooltipWidth = 300;
    left = Math.max(10, Math.min(left, viewportWidth - tooltipWidth - 10));

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ fixed –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –º–æ–±–∏–ª—å–Ω—ã–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
    tooltip.style.position = 'fixed';
    tooltip.style.left = left + 'px';
    tooltip.style.top = top + 'px';
    tooltip.style.maxWidth = Math.min(300, viewportWidth - 20) + 'px';
    tooltip.style.zIndex = '10000';

    // –î–æ–±–∞–≤–ª—è–µ–º fade-in –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∑–∏—Ü–∏–∏
    requestAnimationFrame(() => {
        document.body.appendChild(tooltip);
        activeTooltip = tooltip;
        requestAnimationFrame(() => tooltip.classList.add('visible'));
    });

    return tooltip;
}

// –§–£–ù–ö–¶–ò–Ø –ü–û–ö–ê–ó–ê TOOLTIP –ü–†–ò HOVER
function showModeTooltip(card) {
    const fullDescription = card.dataset.fullDescription;
    if (!fullDescription) return;

    const cardRect = card.getBoundingClientRect();
    createTooltipElement(fullDescription, cardRect);

    // –ü–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ tooltip, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–∫—Ä—ã—Ç–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
    if (activeTooltip) {
        activeTooltip.style.transitionDelay = '0ms';
    }
}

// –§–£–ù–ö–¶–ò–Ø –°–ö–†–´–¢–ò–Ø TOOLTIP
function hideModeTooltip() {
    if (activeTooltip) {
        activeTooltip.classList.remove('visible');
        setTimeout(() => {
            if (activeTooltip) {
                activeTooltip.remove();
                activeTooltip = null;
            }
        }, 200);
    }
}

// –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò TOOLTIP –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í
function initTooltipListeners() {
    const modeCards = document.querySelectorAll('.mode-card');

    modeCards.forEach(card => {
        let touchTimer;
        let touchStartX = 0;
        let touchStartY = 0;
        let isLongPress = false;
        let showTimer;
        let hideTimer;

        // Hover —Å–æ–±—ã—Ç–∏—è –¥–ª—è desktop
        card.addEventListener('mouseenter', () => {
            if (!('ontouchstart' in window) || !isLongPress) {
                clearTimeout(showTimer);
                clearTimeout(hideTimer);

                // –ú–∞–ª–µ–Ω—å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
                showTimer = setTimeout(() => {
                    showModeTooltip(card);
                }, 200);
            }
        });

        card.addEventListener('mouseleave', () => {
            if (!isLongPress) {
                clearTimeout(showTimer);
                clearTimeout(hideTimer);

                // –ó–∞–¥–µ—Ä–∂–∫–∞ –±–æ–ª—å—à–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ–∫–∞–∑–∞ –¥–ª—è –ø–ª–∞–≤–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
                hideTimer = setTimeout(() => {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã—à—å –Ω–µ –Ω–∞ –∫–∞–∫–æ–π-—Ç–æ –¥—Ä—É–≥–æ–π –∫–∞—Ä—Ç–µ
                    const anyCardHovered = Array.from(modeCards).some(c => c.matches(':hover'));
                    if (!anyCardHovered) {
                        hideModeTooltip();
                    }
                }, 300);
            }
        });

        // Touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        card.addEventListener('touchstart', (e) => {
            touchStartX = e.touches[0].clientX;
            touchStartY = e.touches[0].clientY;
            isLongPress = false;

            clearTimeout(touchTimer);
            clearTimeout(showTimer);
            clearTimeout(hideTimer);

            touchTimer = setTimeout(() => {
                isLongPress = true;
                if (navigator.vibrate) {
                    navigator.vibrate(50);
                }
                showModeTooltip(card);
            }, 800);
        });

        card.addEventListener('touchend', () => {
            clearTimeout(touchTimer);

            if (isLongPress) {
                setTimeout(() => {
                    hideModeTooltip();
                    isLongPress = false;
                }, 200);
            }
        });

        card.addEventListener('touchmove', (e) => {
            if (!touchTimer) return;

            const touch = e.touches[0];
            const deltaX = Math.abs(touch.clientX - touchStartX);
            const deltaY = Math.abs(touch.clientY - touchStartY);

            if (deltaX > 10 || deltaY > 10) {
                clearTimeout(touchTimer);
                clearTimeout(showTimer);
                clearTimeout(hideTimer);
                touchTimer = null;
                hideModeTooltip();
            }
        });

        card.addEventListener('click', () => {
            clearTimeout(showTimer);
            clearTimeout(hideTimer);
            clearTimeout(touchTimer);
            hideModeTooltip();
        });
    });

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è tooltip
    document.addEventListener('scroll', () => {
        clearTimeout(tooltipShowTimer);
        clearTimeout(tooltipHideTimer);
        hideModeTooltip();
    }, { passive: true });

    document.addEventListener('resize', () => {
        hideModeTooltip();
    });

    document.addEventListener('orientationchange', () => {
        hideModeTooltip();
    });

    if ('ontouchstart' in window) {
        document.addEventListener('touchstart', (e) => {
            const target = e.target;
            if (!target.closest('.mode-card') && !target.closest('.mode-tooltip')) {
                clearTimeout(tooltipShowTimer);
                clearTimeout(tooltipHideTimer);
                hideModeTooltip();
            }
        }, { passive: true });
    }
}

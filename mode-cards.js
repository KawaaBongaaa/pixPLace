// –û–¢–î–ï–õ–¨–ù–´–ô –ú–û–î–£–õ–¨ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–†–¢–û–ß–ö–ê–ú–ò –†–ï–ñ–ò–ú–û–í
// (LAZY LOADING —Ä–∞–∑–¥–µ–ª–µ–Ω –ø–æ –º–æ–¥—É–ª—è–º –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)

let selectedMode = 'dreamshaper_xl';
let currentExpandedCard = null;
let tooltipElement = null;
let globalTooltipShowTimer = null;
let globalTooltipHideTimer = null;

// –≠–ö–°–ü–û–†–¢–ò–†–£–ï–ú –§–£–ù–ö–¶–ò–Æ –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –í–´–ë–†–ê–ù–ù–û–ì–û –†–ï–ñ–ò–ú–ê
export function getSelectedMode() {
    return selectedMode;
}

// –≠–ö–°–ü–û–†–¢–ò–†–£–ï–ú –§–£–ù–ö–¶–ò–Æ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –û–¢–õ–û–ñ–ï–ù–ù–û–ô–ó–ê–ì–†–£–ó–ö–ò
export async function initOnDemand() {
    await initializeModeCardsLazy();

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å appState –µ—Å–ª–∏ –æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω
    if (window.appState && window.appState.selectedMode) {
        selectedMode = window.appState.selectedMode;
    }

    // üî• –î–û–ë–ê–í–õ–ï–ù–û: –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
    window.modeCardsExports = {
        getSelectedMode,
        initOnDemand,
        setSelectedMode
    };

    console.log('‚úÖ Mode cards initialized successfully with selected mode:', selectedMode);
    console.log('‚úÖ Mode cards exports attached to window.modeCardsExports');
}

// –í–ù–£–¢–†–ï–ù–ù–Ø–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
async function initializeModeCardsLazy() {
    const modeCardsWrapper = document.getElementById('modeCardsWrapper');
    if (!modeCardsWrapper) {
        console.warn('Mode cards wrapper container not found');
        return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–∂–∏–º–æ–≤ —Å –ø–æ–ª–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –¥–ª—è tooltip
    const cardsHTML = `
        <div class="mode-cards-grid">
            <div class="mode-card" data-mode="photo_session">
                <span class="mode-badge mode-badge--premium" data-i18n="badge_premium">Premium</span>
                <div class="mode-icon">üçå</div>
                <h4 class="mode-title">Nano Banana Editor</h4>
                <p class="mode-description" data-i18n="mode_photo_session_desc">Perfect for photo editing. Upload an image and describe what to change</p>
                <span class="mode-info-indicator">i</span>
            </div>

            <div class="mode-card" data-mode="dreamshaper_xl">
                <span class="mode-badge mode-badge--free" data-i18n="badge_free">Free</span>
                <div class="mode-icon">‚ãÜ.Àöü¶ã‡ºò‚ãÜ</div>
                <h4 class="mode-title">DreamShaper XL</h4>
                <p class="mode-description" data-i18n="mode_dreamshaper_xl_desc">Fast generation model designed as an all-in-one for photos, stylized art, and anime/manga.</p>
                <span class="mode-info-indicator">i</span>
            </div>
            <div class="mode-card" data-mode="fast_generation">
                <span class="mode-badge mode-badge--standard" data-i18n="badge_standard">Standard</span>
                <div class="mode-icon">‚ö°</div>
                <h4 class="mode-title">Flux Fast Generation</h4>
                <p class="mode-description" data-i18n="mode_fast_generation_desc">Fastest mode for simple pictures generation without image upload</p>
                <span class="mode-info-indicator">i</span>
            </div>

            <div class="mode-card" data-mode="pixplace_pro">
                <span class="mode-badge mode-badge--premium" data-i18n="badge_premium">Premium</span>
                <div class="mode-icon">ùìüùìªùì∏</div>
                <h4 class="mode-title">Flux Pro Advanced</h4>
                <p class="mode-description" data-i18n="mode_pixplace_pro_desc">Advanced mode with text support, logos and complex compositions</p>
                <span class="mode-info-indicator">i</span>
            </div>

            <div class="mode-card" data-mode="print_maker">
                <span class="mode-badge mode-badge--standard" data-i18n="badge_standard">Standard</span>
                <div class="mode-icon">üëï</div>
                <h4 class="mode-title">Print on Demand</h4>
                <p class="mode-description" data-i18n="mode_print_maker_desc">Specialized for Print on Demand. Creates ready-made prints for clothes and accessories</p>
                <span class="mode-info-indicator">i</span>
            </div>

            <div class="mode-card" data-mode="background_removal">
                <span class="mode-badge mode-badge--free" data-i18n="badge_free">Free</span>
                <div class="mode-icon">‚úÇ</div>
                <h4 class="mode-title">Remove Background</h4>
                <p class="mode-description" data-i18n="mode_background_removal_desc">Removes background from image while preserving the object</p>
                <span class="mode-info-indicator">i</span>
            </div>

            <div class="mode-card" data-mode="upscale_image">
                <span class="mode-badge mode-badge--premium" data-i18n="badge_premium">Premium</span>
                <div class="mode-icon">*‡©à‚ú©‚Äß‚ÇäÀö</div>
                <h4 class="mode-title">Upscale Image</h4>
                <p class="mode-description" data-i18n="mode_upscale_image_desc">Improves quality and resolution of existing image up to 4K</p>
                <span class="mode-info-indicator">i</span>
            </div>
        </div>
    `;

    modeCardsWrapper.innerHTML = cardsHTML;

    // üî• –°–û–ó–î–ê–ï–ú –ï–î–ò–ù–´–ô TOOLTIP ELEMENT (–î–û –°–õ–£–®–ê–¢–ï–õ–ï–ô!)
    initTooltipElement();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
    initModeCardListeners();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º tooltip —Å–ª—É—à–∞—Ç–µ–ª–∏
    initTooltipListeners();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    selectModeCard(selectedMode);

    // üî• –û–ë–ù–û–í–õ–Ø–ï–ú –ü–ï–†–ï–í–û–î–´ –î–õ–Ø –ù–û–í–´–• –≠–õ–ï–ú–ï–ù–¢–û–í
    if (window.dictionaryManager && window.dictionaryManager.updateTranslations) {
        window.dictionaryManager.updateTranslations();
    }

    console.log('‚úÖ Mode cards HTML created and inserted to modeCardsWrapper');
    console.log('‚úÖ Mode cards translations applied');
    console.log('‚úÖ Mode cards tooltips initialized');
}

// –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í
function initModeCardListeners() {
    const modeCards = document.querySelectorAll('.mode-card');

    modeCards.forEach(card => {
        card.addEventListener('click', () => {
            const mode = card.dataset.mode;
            selectModeCard(mode);
        });
    });
}

// –§–£–ù–ö–¶–ò–Ø –í–´–ë–û–†–ê –ö–ê–†–¢–û–ß–ö–ò –†–ï–ñ–ò–ú–ê
async function selectModeCard(modeValue) {
    selectedMode = modeValue;

    // üî• –í–°–ï–ì–î–ê –û–ë–ù–û–í–õ–Ø–ï–ú UI –≠–õ–ï–ú–ï–ù–¢–´ –î–õ–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
    // –û–±–Ω–æ–≤–ª—è–µ–º UI –∫–∞—Ä—Ç–æ—á–µ–∫
    const allCards = document.querySelectorAll('.mode-card');
    allCards.forEach(card => card.classList.remove('selected'));
    const selectedCard = document.querySelector(`.mode-card[data-mode="${modeValue}"]`);
    if (selectedCard) {
        currentExpandedCard = selectedCard;
        selectedCard.classList.add('selected');
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å hidden select –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const modeSelect = document.getElementById('modeSelect');
    if (modeSelect) {
        modeSelect.value = modeValue;
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å appState –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if (window.appState) {
        window.appState.selectedMode = modeValue;
    }

    // üî• –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞
    if (window.updateSizeSelectVisibility) {
        await window.updateSizeSelectVisibility();
    }
    if (window.updateImageUploadVisibility) {
        window.updateImageUploadVisibility();
    }
    if (window.updatePromptVisibility) {
        await window.updatePromptVisibility();
    }

    // –î–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
    document.dispatchEvent(new CustomEvent('mode:changed', {
        detail: { mode: modeValue }
    }));

    console.log(`üéõÔ∏è Mode changed to: ${modeValue}`);
}

// –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø UI –î–õ–Ø –í–´–ë–†–ê–ù–ù–û–ì–û –†–ï–ñ–ò–ú–ê
async function updateUIForSelectedMode(mode) {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ app_modern.js –µ—Å–ª–∏ –æ–Ω–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã
    if (window.updateImageUploadVisibility) {
        window.updateImageUploadVisibility();
    }

    if (window.updatePromptVisibility) {
        await window.updatePromptVisibility();
    }

    if (window.updateSizeSelectVisibility) {
        await window.updateSizeSelectVisibility();
    }

    // –î–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
    document.dispatchEvent(new CustomEvent('mode:changed', {
        detail: { mode: mode }
    }));
}

// –§–£–ù–ö–¶–ò–Ø –ü–†–û–ì–†–ê–ú–ú–ù–û–ì–û –í–´–ë–û–†–ê –†–ï–ñ–ò–ú–ê (–¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
export function setSelectedMode(mode) {
    selectModeCard(mode);
}

// –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ï–î–ò–ù–û–ì–û TOOLTIP –≠–õ–ï–ú–ï–ù–¢–ê
function initTooltipElement() {
    if (tooltipElement) return; // –£–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω

    tooltipElement = document.createElement('div');
    tooltipElement.className = 'mode-tooltip';
    tooltipElement.style.position = 'fixed';
    tooltipElement.style.zIndex = '10000';
    tooltipElement.style.opacity = '0';
    tooltipElement.style.pointerEvents = 'none';
    document.body.appendChild(tooltipElement);

    console.log('‚úÖ Single tooltip element created');
}

// –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ü–û–ó–ò–¶–ò–ò –ò –°–û–î–ï–†–ñ–ò–ú–û–ì–û TOOLTIP
function updateTooltipPosition(text, targetRect) {
    if (!tooltipElement) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    tooltipElement.textContent = text;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é (–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Å–≤–µ—Ä—Ö—É, –∏–Ω–∞—á–µ —Å–Ω–∏–∑—É)
    const viewportWidth = window.innerWidth;
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;

    // –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ viewport
    const absTop = targetRect.top + scrollTop;
    const absLeft = targetRect.left + scrollLeft;
    const absBottom = absTop + targetRect.height;

    let top, left;
    const tooltipMaxHeight = 120; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –≤—ã—Å–æ—Ç–∞ tooltip

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã
    tooltipElement.classList.remove('position-top', 'position-bottom');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ —Å–≤–µ—Ä—Ö—É
    if (targetRect.top - 10 >= tooltipMaxHeight) {
        // –†–∞–∑–º–µ—â–∞–µ–º —Å–≤–µ—Ä—Ö—É
        top = absTop - 10;
        tooltipElement.classList.add('position-top');
    } else {
        // –†–∞–∑–º–µ—â–∞–µ–º —Å–Ω–∏–∑—É
        top = absBottom + 10;
        tooltipElement.classList.add('position-bottom');
    }

    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    left = absLeft + (targetRect.width / 2) - 150;

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —ç–∫—Ä–∞–Ω–∞ –±–µ–∑ —É—á–µ—Ç–∞ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è viewport –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const tooltipWidth = 300;
    left = Math.max(10, Math.min(left, viewportWidth - tooltipWidth - 10));

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ —Ä–∞–∑–º–µ—Ä—ã
    tooltipElement.style.top = top + 'px';
    tooltipElement.style.left = left + 'px';
    tooltipElement.style.maxWidth = Math.min(300, viewportWidth - 20) + 'px';

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ –∏ –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    tooltipElement.classList.add('visible');
    tooltipElement.style.opacity = '1';
    tooltipElement.style.visibility = 'visible';
    tooltipElement.style.pointerEvents = 'none';
}

// –§–£–ù–ö–¶–ò–Ø –ü–û–ö–ê–ó–ê TOOLTIP –ü–†–ò HOVER - –ü–û–õ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –†–ï–ñ–ò–ú–ï
function showModeTooltip(card) {
    const mode = card.dataset.mode;
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∏–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —á–µ—Ä–µ–∑ dictionaryManager
    const fullDescription = window.dictionaryManager ?
        window.dictionaryManager.translate(`mode_${mode}_desc`) : '';

    if (!fullDescription || !tooltipElement) return;

    const cardRect = card.getBoundingClientRect();
    updateTooltipPosition(fullDescription, cardRect);
}

// –§–£–ù–ö–¶–ò–Ø –°–ö–†–´–¢–ò–Ø TOOLTIP
function hideModeTooltip() {
    if (!tooltipElement) return;

    tooltipElement.classList.remove('visible');
    tooltipElement.style.opacity = '0';
    tooltipElement.style.visibility = 'hidden';
}

// –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò TOOLTIP –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í
function initTooltipListeners() {
    const modeCards = document.querySelectorAll('.mode-card');
    let currentHoveredCard = null;

    function clearAllTimers() {
        clearTimeout(globalTooltipShowTimer);
        clearTimeout(globalTooltipHideTimer);
        globalTooltipShowTimer = null;
        globalTooltipHideTimer = null;
    }

    function hideTooltipWithDelay(delay = 250) {
        clearTimeout(globalTooltipHideTimer);
        globalTooltipHideTimer = setTimeout(() => {
            const isAnyCardHovered = currentHoveredCard !== null;
            if (!isAnyCardHovered) {
                hideModeTooltip();
            }
        }, delay);
    }

    // –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞ touch
    function showIndicatorOnTouch(card) {
        if (!card.classList.contains('active-touch')) {
            card.classList.add('active-touch');
            setTimeout(() => {
                card.classList.remove('active-touch');
            }, 3000); // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏—Å—á–µ–∑–Ω–µ—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫
        }
    }

    modeCards.forEach(card => {
        const indicator = card.querySelector('.mode-info-indicator');

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        if (indicator) {
            // –î–ª—è desktop - hover –Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            indicator.addEventListener('mouseenter', () => {
                clearAllTimers();
                currentHoveredCard = card;
                showModeTooltip(card);
            });

            indicator.addEventListener('mouseleave', () => {
                currentHoveredCard = null;
                hideTooltipWithDelay();
            });

            // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö - tap –Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            indicator.addEventListener('click', (e) => {
                e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏
                clearAllTimers();
                currentHoveredCard = card;
                showModeTooltip(card);
                // –°–∫—Ä—ã–≤–∞–µ–º tooltip —á–µ—Ä–µ–∑ 3 —Å–µ–∫
                setTimeout(() => {
                    hideModeTooltip();
                    currentHoveredCard = null;
                }, 3000);
            });
        }

        // –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–∏ touchstart –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ
        card.addEventListener('touchstart', (e) => {
            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –µ—Å–ª–∏ touch –Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–µ
            if (e.target.classList.contains('mode-info-indicator')) return;

            showIndicatorOnTouch(card);
        }, { passive: true });

        // Hover —Å–æ–±—ã—Ç–∏—è –¥–ª—è desktop (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        card.addEventListener('mouseenter', () => {
            if (!('ontouchstart' in window)) {
                clearAllTimers();
                currentHoveredCard = card;

                globalTooltipShowTimer = setTimeout(() => {
                    if (currentHoveredCard === card) {
                        showModeTooltip(card);
                    }
                }, 1000); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º tooltip —á–µ—Ä–µ–∑ 1 —Å–µ–∫ hover –±–µ–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            }
        });

        card.addEventListener('mouseleave', () => {
            if (!('ontouchstart' in window)) {
                currentHoveredCard = null;
                hideTooltipWithDelay();
            }
        });

        // Click –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ —Å–∫—Ä—ã–≤–∞–µ—Ç tooltip
        card.addEventListener('click', () => {
            clearAllTimers();
            hideModeTooltip();
        });
    });

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è tooltip
    document.addEventListener('scroll', () => {
        clearAllTimers();
        hideModeTooltip();
    }, { passive: true });

    document.addEventListener('resize', () => {
        clearAllTimers();
        hideModeTooltip();
    });

    document.addEventListener('orientationchange', () => {
        clearAllTimers();
        hideModeTooltip();
    });

    if ('ontouchstart' in window) {
        document.addEventListener('touchstart', (e) => {
            const target = e.target;
            if (!target.closest('.mode-card') && !target.closest('.mode-tooltip')) {
                clearAllTimers();
                hideModeTooltip();
            }
        }, { passive: true });
    }
}

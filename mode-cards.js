// –û–¢–î–ï–õ–¨–ù–´–ô –ú–û–î–£–õ–¨ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–†–¢–û–ß–ö–ê–ú–ò –†–ï–ñ–ò–ú–û–í
// (LAZY LOADING —Ä–∞–∑–¥–µ–ª–µ–Ω –ø–æ –º–æ–¥—É–ª—è–º –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)

let selectedMode = 'photo_session';
let currentExpandedCard = null;

// –≠–ö–°–ü–û–†–¢–ò–†–£–ï–ú –§–£–ù–ö–¶–ò–Æ –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –í–´–ë–†–ê–ù–ù–û–ì–û –†–ï–ñ–ò–ú–ê
export function getSelectedMode() {
    return selectedMode;
}

// –≠–ö–°–ü–û–†–¢–ò–†–£–ï–ú –§–£–ù–ö–¶–ò–Æ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –û–¢–õ–û–ñ–ï–ù–ù–û–ô–ó–ê–ì–†–£–ó–ö–ò
export async function initOnDemand() {
    await initializeModeCardsLazy();

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å appState –µ—Å–ª–∏ –æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω
    if (window.appState && window.appState.selectedMode) {
        selectedMode = window.appState.selectedMode;
    }

    // üî• –î–û–ë–ê–í–õ–ï–ù–û: –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
    window.modeCardsExports = {
        getSelectedMode,
        initOnDemand,
        setSelectedMode
    };

    console.log('‚úÖ Mode cards initialized successfully with selected mode:', selectedMode);
    console.log('‚úÖ Mode cards exports attached to window.modeCardsExports');
}

// –í–ù–£–¢–†–ï–ù–ù–Ø–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
async function initializeModeCardsLazy() {
    const modeCardsWrapper = document.getElementById('modeCardsWrapper');
    if (!modeCardsWrapper) {
        console.warn('Mode cards wrapper container not found');
        return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–∂–∏–º–æ–≤
    const cardsHTML = `
        <div class="mode-cards-grid">
            <div class="mode-card" data-mode="photo_session">
                <span class="mode-badge mode-badge--premium" data-i18n="badge_premium">Premium</span>
                <div class="mode-icon">üçå</div>
                <h4 class="mode-title">Nano Banana Editor</h4>
                <p class="mode-description">Perfect for photo editing. Upload an image and describe what to change</p>
            </div>
            
            <div class="mode-card" data-mode="dreamshaper_xl">
                <span class="mode-badge mode-badge--free" data-i18n="badge_free">Free</span>
                <div class="mode-icon">‚ãÜ.Àöü¶ã‡ºò‚ãÜ</div>
                <h4 class="mode-title">DreamShaper XL</h4>
                <p class="mode-description">Fast generation model designed as an all-in-one for photos, stylized art, and anime/manga.</p>
            </div>
            <div class="mode-card" data-mode="fast_generation">
                <div class="mode-icon">‚ö°</div>
                <h4 class="mode-title">Flux Fast Generation</h4>
                <p class="mode-description">Fastest mode for simple pictures generation without image upload</p>
            </div>

            <div class="mode-card" data-mode="pixplace_pro">
                <span class="mode-badge mode-badge--premium" data-i18n="badge_premium">Premium</span>
                <div class="mode-icon">ùìüùìªùì∏</div>
                <h4 class="mode-title">Flux Pro Advanced</h4>
                <p class="mode-description">Advanced mode with text support, logos and complex compositions</p>
            </div>

            <div class="mode-card" data-mode="print_maker">
                <div class="mode-icon">üëï</div>
                <h4 class="mode-title">Print on Demand</h4>
                <p class="mode-description">Specialized for Print on Demand. Creates ready-made prints for clothes and accessories</p>
            </div>

            <div class="mode-card" data-mode="background_removal">
                <span class="mode-badge mode-badge--free" data-i18n="badge_free">Free</span>
                <div class="mode-icon">‚úÇ</div>
                <h4 class="mode-title">Remove Background</h4>
                <p class="mode-description">Removes background from image while preserving the object</p>
            </div>

            <div class="mode-card" data-mode="upscale_image">
                <span class="mode-badge mode-badge--premium" data-i18n="badge_premium">Premium</span>
                <div class="mode-icon">*‡©à‚ú©‚Äß‚ÇäÀö</div>
                <h4 class="mode-title">Upscale Image</h4>
                <p class="mode-description">Improves quality and resolution of existing image up to 4K</p>
            </div>
        </div>
    `;

    modeCardsWrapper.innerHTML = cardsHTML;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
    initModeCardListeners();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    selectModeCard(selectedMode);

    console.log('‚úÖ Mode cards HTML created and inserted to modeCardsWrapper');
}

// –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í
function initModeCardListeners() {
    const modeCards = document.querySelectorAll('.mode-card');

    modeCards.forEach(card => {
        card.addEventListener('click', () => {
            const mode = card.dataset.mode;
            selectModeCard(mode);
        });
    });
}

// –§–£–ù–ö–¶–ò–Ø –í–´–ë–û–†–ê –ö–ê–†–¢–û–ß–ö–ò –†–ï–ñ–ò–ú–ê
async function selectModeCard(modeValue) {
    selectedMode = modeValue;

    // üî• –í–°–ï–ì–î–ê –û–ë–ù–û–í–õ–Ø–ï–ú UI –≠–õ–ï–ú–ï–ù–¢–´ –î–õ–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
    // –û–±–Ω–æ–≤–ª—è–µ–º UI –∫–∞—Ä—Ç–æ—á–µ–∫
    const allCards = document.querySelectorAll('.mode-card');
    allCards.forEach(card => card.classList.remove('selected'));
    const selectedCard = document.querySelector(`.mode-card[data-mode="${modeValue}"]`);
    if (selectedCard) {
        currentExpandedCard = selectedCard;
        selectedCard.classList.add('selected');
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å hidden select –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const modeSelect = document.getElementById('modeSelect');
    if (modeSelect) {
        modeSelect.value = modeValue;
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å appState –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if (window.appState) {
        window.appState.selectedMode = modeValue;
    }

    // üî• –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞
    if (window.updateSizeSelectVisibility) {
        await window.updateSizeSelectVisibility();
    }
    if (window.updateImageUploadVisibility) {
        window.updateImageUploadVisibility();
    }
    if (window.updatePromptVisibility) {
        await window.updatePromptVisibility();
    }

    // –î–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
    document.dispatchEvent(new CustomEvent('mode:changed', {
        detail: { mode: modeValue }
    }));

    console.log(`üéõÔ∏è Mode changed to: ${modeValue}`);
}

// –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø UI –î–õ–Ø –í–´–ë–†–ê–ù–ù–û–ì–û –†–ï–ñ–ò–ú–ê
async function updateUIForSelectedMode(mode) {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ app_modern.js –µ—Å–ª–∏ –æ–Ω–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã
    if (window.updateImageUploadVisibility) {
        window.updateImageUploadVisibility();
    }

    if (window.updatePromptVisibility) {
        await window.updatePromptVisibility();
    }

    if (window.updateSizeSelectVisibility) {
        await window.updateSizeSelectVisibility();
    }

    // –î–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
    document.dispatchEvent(new CustomEvent('mode:changed', {
        detail: { mode: mode }
    }));
}

// –§–£–ù–ö–¶–ò–Ø –ü–†–û–ì–†–ê–ú–ú–ù–û–ì–û –í–´–ë–û–†–ê –†–ï–ñ–ò–ú–ê (–¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
export function setSelectedMode(mode) {
    selectModeCard(mode);
}
